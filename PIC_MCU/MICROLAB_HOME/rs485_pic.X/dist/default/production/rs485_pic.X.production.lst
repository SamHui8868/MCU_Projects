

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Fri Apr 10 12:32:58 2020

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	18F23K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     6                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     7                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1,group=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    51                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    52                           	psect	text36,global,reloc=2,class=CODE,delta=1
    53                           	psect	text37,global,reloc=2,class=CODE,delta=1
    54                           	psect	text38,global,reloc=2,class=CODE,delta=1
    55                           	psect	text39,global,reloc=2,class=CODE,delta=1
    56                           	psect	text40,global,reloc=2,class=CODE,delta=1
    57                           	psect	text41,global,reloc=2,class=CODE,delta=1
    58                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    59                           	psect	text42,global,reloc=2,class=CODE,delta=1
    60                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    61                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    62  0000                     
    63                           ; Version 2.10
    64                           ; Generated 31/07/2019 GMT
    65                           ; 
    66                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    67                           ; All rights reserved.
    68                           ; 
    69                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    70                           ; 
    71                           ; Redistribution and use in source and binary forms, with or without modification, are
    72                           ; permitted provided that the following conditions are met:
    73                           ; 
    74                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    75                           ;        conditions and the following disclaimer.
    76                           ; 
    77                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    78                           ;        of conditions and the following disclaimer in the documentation and/or other
    79                           ;        materials provided with the distribution.
    80                           ; 
    81                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    82                           ;        software without specific prior written permission.
    83                           ; 
    84                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    85                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    86                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    87                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    88                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    89                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    90                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    91                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    92                           ; 
    93                           ; 
    94                           ; Code-generator required, PIC18F23K22 Definitions
    95                           ; 
    96                           ; SFR Addresses
    97  0000                     
    98                           	psect	mediumconst
    99  001D4E                     __pmediumconst:
   100                           	opt callstack 0
   101  001D4E  00                 	db	0
   102  001D4F                     _CRC_LO_TABLE:
   103                           	opt callstack 0
   104  001D4F  00                 	db	0
   105  001D50  C0                 	db	192
   106  001D51  C1                 	db	193
   107  001D52  01                 	db	1
   108  001D53  C3                 	db	195
   109  001D54  03                 	db	3
   110  001D55  02                 	db	2
   111  001D56  C2                 	db	194
   112  001D57  C6                 	db	198
   113  001D58  06                 	db	6
   114  001D59  07                 	db	7
   115  001D5A  C7                 	db	199
   116  001D5B  05                 	db	5
   117  001D5C  C5                 	db	197
   118  001D5D  C4                 	db	196
   119  001D5E  04                 	db	4
   120  001D5F  CC                 	db	204
   121  001D60  0C                 	db	12
   122  001D61  0D                 	db	13
   123  001D62  CD                 	db	205
   124  001D63  0F                 	db	15
   125  001D64  CF                 	db	207
   126  001D65  CE                 	db	206
   127  001D66  0E                 	db	14
   128  001D67  0A                 	db	10
   129  001D68  CA                 	db	202
   130  001D69  CB                 	db	203
   131  001D6A  0B                 	db	11
   132  001D6B  C9                 	db	201
   133  001D6C  09                 	db	9
   134  001D6D  08                 	db	8
   135  001D6E  C8                 	db	200
   136  001D6F  D8                 	db	216
   137  001D70  18                 	db	24
   138  001D71  19                 	db	25
   139  001D72  D9                 	db	217
   140  001D73  1B                 	db	27
   141  001D74  DB                 	db	219
   142  001D75  DA                 	db	218
   143  001D76  1A                 	db	26
   144  001D77  1E                 	db	30
   145  001D78  DE                 	db	222
   146  001D79  DF                 	db	223
   147  001D7A  1F                 	db	31
   148  001D7B  DD                 	db	221
   149  001D7C  1D                 	db	29
   150  001D7D  1C                 	db	28
   151  001D7E  DC                 	db	220
   152  001D7F  14                 	db	20
   153  001D80  D4                 	db	212
   154  001D81  D5                 	db	213
   155  001D82  15                 	db	21
   156  001D83  D7                 	db	215
   157  001D84  17                 	db	23
   158  001D85  16                 	db	22
   159  001D86  D6                 	db	214
   160  001D87  D2                 	db	210
   161  001D88  12                 	db	18
   162  001D89  13                 	db	19
   163  001D8A  D3                 	db	211
   164  001D8B  11                 	db	17
   165  001D8C  D1                 	db	209
   166  001D8D  D0                 	db	208
   167  001D8E  10                 	db	16
   168  001D8F  F0                 	db	240
   169  001D90  30                 	db	48
   170  001D91  31                 	db	49
   171  001D92  F1                 	db	241
   172  001D93  33                 	db	51
   173  001D94  F3                 	db	243
   174  001D95  F2                 	db	242
   175  001D96  32                 	db	50
   176  001D97  36                 	db	54
   177  001D98  F6                 	db	246
   178  001D99  F7                 	db	247
   179  001D9A  37                 	db	55
   180  001D9B  F5                 	db	245
   181  001D9C  35                 	db	53
   182  001D9D  34                 	db	52
   183  001D9E  F4                 	db	244
   184  001D9F  3C                 	db	60
   185  001DA0  FC                 	db	252
   186  001DA1  FD                 	db	253
   187  001DA2  3D                 	db	61
   188  001DA3  FF                 	db	255
   189  001DA4  3F                 	db	63
   190  001DA5  3E                 	db	62
   191  001DA6  FE                 	db	254
   192  001DA7  FA                 	db	250
   193  001DA8  3A                 	db	58
   194  001DA9  3B                 	db	59
   195  001DAA  FB                 	db	251
   196  001DAB  39                 	db	57
   197  001DAC  F9                 	db	249
   198  001DAD  F8                 	db	248
   199  001DAE  38                 	db	56
   200  001DAF  28                 	db	40
   201  001DB0  E8                 	db	232
   202  001DB1  E9                 	db	233
   203  001DB2  29                 	db	41
   204  001DB3  EB                 	db	235
   205  001DB4  2B                 	db	43
   206  001DB5  2A                 	db	42
   207  001DB6  EA                 	db	234
   208  001DB7  EE                 	db	238
   209  001DB8  2E                 	db	46
   210  001DB9  2F                 	db	47
   211  001DBA  EF                 	db	239
   212  001DBB  2D                 	db	45
   213  001DBC  ED                 	db	237
   214  001DBD  EC                 	db	236
   215  001DBE  2C                 	db	44
   216  001DBF  E4                 	db	228
   217  001DC0  24                 	db	36
   218  001DC1  25                 	db	37
   219  001DC2  E5                 	db	229
   220  001DC3  27                 	db	39
   221  001DC4  E7                 	db	231
   222  001DC5  E6                 	db	230
   223  001DC6  26                 	db	38
   224  001DC7  22                 	db	34
   225  001DC8  E2                 	db	226
   226  001DC9  E3                 	db	227
   227  001DCA  23                 	db	35
   228  001DCB  E1                 	db	225
   229  001DCC  21                 	db	33
   230  001DCD  20                 	db	32
   231  001DCE  E0                 	db	224
   232  001DCF  A0                 	db	160
   233  001DD0  60                 	db	96
   234  001DD1  61                 	db	97
   235  001DD2  A1                 	db	161
   236  001DD3  63                 	db	99
   237  001DD4  A3                 	db	163
   238  001DD5  A2                 	db	162
   239  001DD6  62                 	db	98
   240  001DD7  66                 	db	102
   241  001DD8  A6                 	db	166
   242  001DD9  A7                 	db	167
   243  001DDA  67                 	db	103
   244  001DDB  A5                 	db	165
   245  001DDC  65                 	db	101
   246  001DDD  64                 	db	100
   247  001DDE  A4                 	db	164
   248  001DDF  6C                 	db	108
   249  001DE0  AC                 	db	172
   250  001DE1  AD                 	db	173
   251  001DE2  6D                 	db	109
   252  001DE3  AF                 	db	175
   253  001DE4  6F                 	db	111
   254  001DE5  6E                 	db	110
   255  001DE6  AE                 	db	174
   256  001DE7  AA                 	db	170
   257  001DE8  6A                 	db	106
   258  001DE9  6B                 	db	107
   259  001DEA  AB                 	db	171
   260  001DEB  69                 	db	105
   261  001DEC  A9                 	db	169
   262  001DED  A8                 	db	168
   263  001DEE  68                 	db	104
   264  001DEF  78                 	db	120
   265  001DF0  B8                 	db	184
   266  001DF1  B9                 	db	185
   267  001DF2  79                 	db	121
   268  001DF3  BB                 	db	187
   269  001DF4  7B                 	db	123
   270  001DF5  7A                 	db	122
   271  001DF6  BA                 	db	186
   272  001DF7  BE                 	db	190
   273  001DF8  7E                 	db	126
   274  001DF9  7F                 	db	127
   275  001DFA  BF                 	db	191
   276  001DFB  7D                 	db	125
   277  001DFC  BD                 	db	189
   278  001DFD  BC                 	db	188
   279  001DFE  7C                 	db	124
   280  001DFF  B4                 	db	180
   281  001E00  74                 	db	116
   282  001E01  75                 	db	117
   283  001E02  B5                 	db	181
   284  001E03  77                 	db	119
   285  001E04  B7                 	db	183
   286  001E05  B6                 	db	182
   287  001E06  76                 	db	118
   288  001E07  72                 	db	114
   289  001E08  B2                 	db	178
   290  001E09  B3                 	db	179
   291  001E0A  73                 	db	115
   292  001E0B  B1                 	db	177
   293  001E0C  71                 	db	113
   294  001E0D  70                 	db	112
   295  001E0E  B0                 	db	176
   296  001E0F  50                 	db	80
   297  001E10  90                 	db	144
   298  001E11  91                 	db	145
   299  001E12  51                 	db	81
   300  001E13  93                 	db	147
   301  001E14  53                 	db	83
   302  001E15  52                 	db	82
   303  001E16  92                 	db	146
   304  001E17  96                 	db	150
   305  001E18  56                 	db	86
   306  001E19  57                 	db	87
   307  001E1A  97                 	db	151
   308  001E1B  55                 	db	85
   309  001E1C  95                 	db	149
   310  001E1D  94                 	db	148
   311  001E1E  54                 	db	84
   312  001E1F  9C                 	db	156
   313  001E20  5C                 	db	92
   314  001E21  5D                 	db	93
   315  001E22  9D                 	db	157
   316  001E23  5F                 	db	95
   317  001E24  9F                 	db	159
   318  001E25  9E                 	db	158
   319  001E26  5E                 	db	94
   320  001E27  5A                 	db	90
   321  001E28  9A                 	db	154
   322  001E29  9B                 	db	155
   323  001E2A  5B                 	db	91
   324  001E2B  99                 	db	153
   325  001E2C  59                 	db	89
   326  001E2D  58                 	db	88
   327  001E2E  98                 	db	152
   328  001E2F  88                 	db	136
   329  001E30  48                 	db	72
   330  001E31  49                 	db	73
   331  001E32  89                 	db	137
   332  001E33  4B                 	db	75
   333  001E34  8B                 	db	139
   334  001E35  8A                 	db	138
   335  001E36  4A                 	db	74
   336  001E37  4E                 	db	78
   337  001E38  8E                 	db	142
   338  001E39  8F                 	db	143
   339  001E3A  4F                 	db	79
   340  001E3B  8D                 	db	141
   341  001E3C  4D                 	db	77
   342  001E3D  4C                 	db	76
   343  001E3E  8C                 	db	140
   344  001E3F  44                 	db	68
   345  001E40  84                 	db	132
   346  001E41  85                 	db	133
   347  001E42  45                 	db	69
   348  001E43  87                 	db	135
   349  001E44  47                 	db	71
   350  001E45  46                 	db	70
   351  001E46  86                 	db	134
   352  001E47  82                 	db	130
   353  001E48  42                 	db	66
   354  001E49  43                 	db	67
   355  001E4A  83                 	db	131
   356  001E4B  41                 	db	65
   357  001E4C  81                 	db	129
   358  001E4D  80                 	db	128
   359  001E4E  40                 	db	64
   360  001E4F                     __end_of_CRC_LO_TABLE:
   361                           	opt callstack 0
   362  001E4F                     _CRC_HI_TABLE:
   363                           	opt callstack 0
   364  001E4F  00                 	db	0
   365  001E50  C1                 	db	193
   366  001E51  81                 	db	129
   367  001E52  40                 	db	64
   368  001E53  01                 	db	1
   369  001E54  C0                 	db	192
   370  001E55  80                 	db	128
   371  001E56  41                 	db	65
   372  001E57  01                 	db	1
   373  001E58  C0                 	db	192
   374  001E59  80                 	db	128
   375  001E5A  41                 	db	65
   376  001E5B  00                 	db	0
   377  001E5C  C1                 	db	193
   378  001E5D  81                 	db	129
   379  001E5E  40                 	db	64
   380  001E5F  01                 	db	1
   381  001E60  C0                 	db	192
   382  001E61  80                 	db	128
   383  001E62  41                 	db	65
   384  001E63  00                 	db	0
   385  001E64  C1                 	db	193
   386  001E65  81                 	db	129
   387  001E66  40                 	db	64
   388  001E67  00                 	db	0
   389  001E68  C1                 	db	193
   390  001E69  81                 	db	129
   391  001E6A  40                 	db	64
   392  001E6B  01                 	db	1
   393  001E6C  C0                 	db	192
   394  001E6D  80                 	db	128
   395  001E6E  41                 	db	65
   396  001E6F  01                 	db	1
   397  001E70  C0                 	db	192
   398  001E71  80                 	db	128
   399  001E72  41                 	db	65
   400  001E73  00                 	db	0
   401  001E74  C1                 	db	193
   402  001E75  81                 	db	129
   403  001E76  40                 	db	64
   404  001E77  00                 	db	0
   405  001E78  C1                 	db	193
   406  001E79  81                 	db	129
   407  001E7A  40                 	db	64
   408  001E7B  01                 	db	1
   409  001E7C  C0                 	db	192
   410  001E7D  80                 	db	128
   411  001E7E  41                 	db	65
   412  001E7F  00                 	db	0
   413  001E80  C1                 	db	193
   414  001E81  81                 	db	129
   415  001E82  40                 	db	64
   416  001E83  01                 	db	1
   417  001E84  C0                 	db	192
   418  001E85  80                 	db	128
   419  001E86  41                 	db	65
   420  001E87  01                 	db	1
   421  001E88  C0                 	db	192
   422  001E89  80                 	db	128
   423  001E8A  41                 	db	65
   424  001E8B  00                 	db	0
   425  001E8C  C1                 	db	193
   426  001E8D  81                 	db	129
   427  001E8E  40                 	db	64
   428  001E8F  01                 	db	1
   429  001E90  C0                 	db	192
   430  001E91  80                 	db	128
   431  001E92  41                 	db	65
   432  001E93  00                 	db	0
   433  001E94  C1                 	db	193
   434  001E95  81                 	db	129
   435  001E96  40                 	db	64
   436  001E97  00                 	db	0
   437  001E98  C1                 	db	193
   438  001E99  81                 	db	129
   439  001E9A  40                 	db	64
   440  001E9B  01                 	db	1
   441  001E9C  C0                 	db	192
   442  001E9D  80                 	db	128
   443  001E9E  41                 	db	65
   444  001E9F  00                 	db	0
   445  001EA0  C1                 	db	193
   446  001EA1  81                 	db	129
   447  001EA2  40                 	db	64
   448  001EA3  01                 	db	1
   449  001EA4  C0                 	db	192
   450  001EA5  80                 	db	128
   451  001EA6  41                 	db	65
   452  001EA7  01                 	db	1
   453  001EA8  C0                 	db	192
   454  001EA9  80                 	db	128
   455  001EAA  41                 	db	65
   456  001EAB  00                 	db	0
   457  001EAC  C1                 	db	193
   458  001EAD  81                 	db	129
   459  001EAE  40                 	db	64
   460  001EAF  00                 	db	0
   461  001EB0  C1                 	db	193
   462  001EB1  81                 	db	129
   463  001EB2  40                 	db	64
   464  001EB3  01                 	db	1
   465  001EB4  C0                 	db	192
   466  001EB5  80                 	db	128
   467  001EB6  41                 	db	65
   468  001EB7  01                 	db	1
   469  001EB8  C0                 	db	192
   470  001EB9  80                 	db	128
   471  001EBA  41                 	db	65
   472  001EBB  00                 	db	0
   473  001EBC  C1                 	db	193
   474  001EBD  81                 	db	129
   475  001EBE  40                 	db	64
   476  001EBF  01                 	db	1
   477  001EC0  C0                 	db	192
   478  001EC1  80                 	db	128
   479  001EC2  41                 	db	65
   480  001EC3  00                 	db	0
   481  001EC4  C1                 	db	193
   482  001EC5  81                 	db	129
   483  001EC6  40                 	db	64
   484  001EC7  00                 	db	0
   485  001EC8  C1                 	db	193
   486  001EC9  81                 	db	129
   487  001ECA  40                 	db	64
   488  001ECB  01                 	db	1
   489  001ECC  C0                 	db	192
   490  001ECD  80                 	db	128
   491  001ECE  41                 	db	65
   492  001ECF  01                 	db	1
   493  001ED0  C0                 	db	192
   494  001ED1  80                 	db	128
   495  001ED2  41                 	db	65
   496  001ED3  00                 	db	0
   497  001ED4  C1                 	db	193
   498  001ED5  81                 	db	129
   499  001ED6  40                 	db	64
   500  001ED7  00                 	db	0
   501  001ED8  C1                 	db	193
   502  001ED9  81                 	db	129
   503  001EDA  40                 	db	64
   504  001EDB  01                 	db	1
   505  001EDC  C0                 	db	192
   506  001EDD  80                 	db	128
   507  001EDE  41                 	db	65
   508  001EDF  00                 	db	0
   509  001EE0  C1                 	db	193
   510  001EE1  81                 	db	129
   511  001EE2  40                 	db	64
   512  001EE3  01                 	db	1
   513  001EE4  C0                 	db	192
   514  001EE5  80                 	db	128
   515  001EE6  41                 	db	65
   516  001EE7  01                 	db	1
   517  001EE8  C0                 	db	192
   518  001EE9  80                 	db	128
   519  001EEA  41                 	db	65
   520  001EEB  00                 	db	0
   521  001EEC  C1                 	db	193
   522  001EED  81                 	db	129
   523  001EEE  40                 	db	64
   524  001EEF  00                 	db	0
   525  001EF0  C1                 	db	193
   526  001EF1  81                 	db	129
   527  001EF2  40                 	db	64
   528  001EF3  01                 	db	1
   529  001EF4  C0                 	db	192
   530  001EF5  80                 	db	128
   531  001EF6  41                 	db	65
   532  001EF7  01                 	db	1
   533  001EF8  C0                 	db	192
   534  001EF9  80                 	db	128
   535  001EFA  41                 	db	65
   536  001EFB  00                 	db	0
   537  001EFC  C1                 	db	193
   538  001EFD  81                 	db	129
   539  001EFE  40                 	db	64
   540  001EFF  01                 	db	1
   541  001F00  C0                 	db	192
   542  001F01  80                 	db	128
   543  001F02  41                 	db	65
   544  001F03  00                 	db	0
   545  001F04  C1                 	db	193
   546  001F05  81                 	db	129
   547  001F06  40                 	db	64
   548  001F07  00                 	db	0
   549  001F08  C1                 	db	193
   550  001F09  81                 	db	129
   551  001F0A  40                 	db	64
   552  001F0B  01                 	db	1
   553  001F0C  C0                 	db	192
   554  001F0D  80                 	db	128
   555  001F0E  41                 	db	65
   556  001F0F  00                 	db	0
   557  001F10  C1                 	db	193
   558  001F11  81                 	db	129
   559  001F12  40                 	db	64
   560  001F13  01                 	db	1
   561  001F14  C0                 	db	192
   562  001F15  80                 	db	128
   563  001F16  41                 	db	65
   564  001F17  01                 	db	1
   565  001F18  C0                 	db	192
   566  001F19  80                 	db	128
   567  001F1A  41                 	db	65
   568  001F1B  00                 	db	0
   569  001F1C  C1                 	db	193
   570  001F1D  81                 	db	129
   571  001F1E  40                 	db	64
   572  001F1F  01                 	db	1
   573  001F20  C0                 	db	192
   574  001F21  80                 	db	128
   575  001F22  41                 	db	65
   576  001F23  00                 	db	0
   577  001F24  C1                 	db	193
   578  001F25  81                 	db	129
   579  001F26  40                 	db	64
   580  001F27  00                 	db	0
   581  001F28  C1                 	db	193
   582  001F29  81                 	db	129
   583  001F2A  40                 	db	64
   584  001F2B  01                 	db	1
   585  001F2C  C0                 	db	192
   586  001F2D  80                 	db	128
   587  001F2E  41                 	db	65
   588  001F2F  01                 	db	1
   589  001F30  C0                 	db	192
   590  001F31  80                 	db	128
   591  001F32  41                 	db	65
   592  001F33  00                 	db	0
   593  001F34  C1                 	db	193
   594  001F35  81                 	db	129
   595  001F36  40                 	db	64
   596  001F37  00                 	db	0
   597  001F38  C1                 	db	193
   598  001F39  81                 	db	129
   599  001F3A  40                 	db	64
   600  001F3B  01                 	db	1
   601  001F3C  C0                 	db	192
   602  001F3D  80                 	db	128
   603  001F3E  41                 	db	65
   604  001F3F  00                 	db	0
   605  001F40  C1                 	db	193
   606  001F41  81                 	db	129
   607  001F42  40                 	db	64
   608  001F43  01                 	db	1
   609  001F44  C0                 	db	192
   610  001F45  80                 	db	128
   611  001F46  41                 	db	65
   612  001F47  01                 	db	1
   613  001F48  C0                 	db	192
   614  001F49  80                 	db	128
   615  001F4A  41                 	db	65
   616  001F4B  00                 	db	0
   617  001F4C  C1                 	db	193
   618  001F4D  81                 	db	129
   619  001F4E  40                 	db	64
   620  001F4F                     __end_of_CRC_HI_TABLE:
   621                           	opt callstack 0
   622  001F4F                     STR_1:
   623  001F4F  6A                 	db	106	;'j'
   624  001F50  75                 	db	117	;'u'
   625  001F51  6D                 	db	109	;'m'
   626  001F52  70                 	db	112	;'p'
   627  001F53  69                 	db	105	;'i'
   628  001F54  6E                 	db	110	;'n'
   629  001F55  67                 	db	103	;'g'
   630  001F56  2C                 	db	44
   631  001F57  72                 	db	114	;'r'
   632  001F58  65                 	db	101	;'e'
   633  001F59  6C                 	db	108	;'l'
   634  001F5A  61                 	db	97	;'a'
   635  001F5B  79                 	db	121	;'y'
   636  001F5C  20                 	db	32
   637  001F5D  63                 	db	99	;'c'
   638  001F5E  61                 	db	97	;'a'
   639  001F5F  6E                 	db	110	;'n'
   640  001F60  27                 	db	39
   641  001F61  74                 	db	116	;'t'
   642  001F62  20                 	db	32
   643  001F63  6F                 	db	111	;'o'
   644  001F64  70                 	db	112	;'p'
   645  001F65  65                 	db	101	;'e'
   646  001F66  6E                 	db	110	;'n'
   647  001F67  0A                 	db	10
   648  001F68  00                 	db	0
   649  001F69                     STR_5:
   650  001F69  6E                 	db	110	;'n'
   651  001F6A  65                 	db	101	;'e'
   652  001F6B  77                 	db	119	;'w'
   653  001F6C  20                 	db	32
   654  001F6D  64                 	db	100	;'d'
   655  001F6E  61                 	db	97	;'a'
   656  001F6F  74                 	db	116	;'t'
   657  001F70  61                 	db	97	;'a'
   658  001F71  2C                 	db	44
   659  001F72  20                 	db	32
   660  001F73  63                 	db	99	;'c'
   661  001F74  68                 	db	104	;'h'
   662  001F75  65                 	db	101	;'e'
   663  001F76  63                 	db	99	;'c'
   664  001F77  6B                 	db	107	;'k'
   665  001F78  20                 	db	32
   666  001F79  63                 	db	99	;'c'
   667  001F7A  72                 	db	114	;'r'
   668  001F7B  63                 	db	99	;'c'
   669  001F7C  0A                 	db	10
   670  001F7D  00                 	db	0
   671  001F7E                     STR_22:
   672  001F7E  6E                 	db	110	;'n'
   673  001F7F  65                 	db	101	;'e'
   674  001F80  77                 	db	119	;'w'
   675  001F81  20                 	db	32
   676  001F82  64                 	db	100	;'d'
   677  001F83  61                 	db	97	;'a'
   678  001F84  74                 	db	116	;'t'
   679  001F85  61                 	db	97	;'a'
   680  001F86  2C                 	db	44
   681  001F87  20                 	db	32
   682  001F88  66                 	db	102	;'f'
   683  001F89  6F                 	db	111	;'o'
   684  001F8A  72                 	db	114	;'r'
   685  001F8B  3A                 	db	58	;':'
   686  001F8C  00                 	db	0
   687  001F8D                     STR_3:
   688  001F8D  72                 	db	114	;'r'
   689  001F8E  65                 	db	101	;'e'
   690  001F8F  6C                 	db	108	;'l'
   691  001F90  61                 	db	97	;'a'
   692  001F91  79                 	db	121	;'y'
   693  001F92  20                 	db	32
   694  001F93  63                 	db	99	;'c'
   695  001F94  6C                 	db	108	;'l'
   696  001F95  6F                 	db	111	;'o'
   697  001F96  73                 	db	115	;'s'
   698  001F97  65                 	db	101	;'e'
   699  001F98  0A                 	db	10
   700  001F99  00                 	db	0
   701  001F9A                     STR_2:
   702  001F9A  72                 	db	114	;'r'
   703  001F9B  65                 	db	101	;'e'
   704  001F9C  6C                 	db	108	;'l'
   705  001F9D  61                 	db	97	;'a'
   706  001F9E  79                 	db	121	;'y'
   707  001F9F  20                 	db	32
   708  001FA0  6F                 	db	111	;'o'
   709  001FA1  70                 	db	112	;'p'
   710  001FA2  65                 	db	101	;'e'
   711  001FA3  6E                 	db	110	;'n'
   712  001FA4  0A                 	db	10
   713  001FA5  00                 	db	0
   714  001FA6                     STR_20:
   715  001FA6  20                 	db	32
   716  001FA7  69                 	db	105	;'i'
   717  001FA8  6C                 	db	108	;'l'
   718  001FA9  6C                 	db	108	;'l'
   719  001FAA  65                 	db	101	;'e'
   720  001FAB  67                 	db	103	;'g'
   721  001FAC  61                 	db	97	;'a'
   722  001FAD  6C                 	db	108	;'l'
   723  001FAE  0A                 	db	10
   724  001FAF  00                 	db	0
   725  001FB0                     STR_4:
   726  001FB0  6A                 	db	106	;'j'
   727  001FB1  75                 	db	117	;'u'
   728  001FB2  6D                 	db	109	;'m'
   729  001FB3  70                 	db	112	;'p'
   730  001FB4  69                 	db	105	;'i'
   731  001FB5  6E                 	db	110	;'n'
   732  001FB6  67                 	db	103	;'g'
   733  001FB7  0A                 	db	10
   734  001FB8  00                 	db	0
   735  001FB9                     STR_15:
   736  001FB9  63                 	db	99	;'c'
   737  001FBA  6F                 	db	111	;'o'
   738  001FBB  64                 	db	100	;'d'
   739  001FBC  65                 	db	101	;'e'
   740  001FBD  3A                 	db	58	;':'
   741  001FBE  31                 	db	49	;'1'
   742  001FBF  30                 	db	48	;'0'
   743  001FC0  00                 	db	0
   744  001FC1                     STR_7:
   745  001FC1  63                 	db	99	;'c'
   746  001FC2  6F                 	db	111	;'o'
   747  001FC3  64                 	db	100	;'d'
   748  001FC4  65                 	db	101	;'e'
   749  001FC5  3A                 	db	58	;':'
   750  001FC6  30                 	db	48	;'0'
   751  001FC7  33                 	db	51	;'3'
   752  001FC8  00                 	db	0
   753  001FC9                     STR_11:
   754  001FC9  63                 	db	99	;'c'
   755  001FCA  6F                 	db	111	;'o'
   756  001FCB  64                 	db	100	;'d'
   757  001FCC  65                 	db	101	;'e'
   758  001FCD  3A                 	db	58	;':'
   759  001FCE  30                 	db	48	;'0'
   760  001FCF  36                 	db	54	;'6'
   761  001FD0  00                 	db	0
   762  001FD1                     STR_6:
   763  001FD1  63                 	db	99	;'c'
   764  001FD2  72                 	db	114	;'r'
   765  001FD3  63                 	db	99	;'c'
   766  001FD4  3A                 	db	58	;':'
   767  001FD5  4F                 	db	79	;'O'
   768  001FD6  0A                 	db	10
   769  001FD7  00                 	db	0
   770  001FD8                     STR_21:
   771  001FD8  63                 	db	99	;'c'
   772  001FD9  72                 	db	114	;'r'
   773  001FDA  63                 	db	99	;'c'
   774  001FDB  3A                 	db	58	;':'
   775  001FDC  58                 	db	88	;'X'
   776  001FDD  0A                 	db	10
   777  001FDE  00                 	db	0
   778  001FDF                     STR_13:
   779  001FDF  20                 	db	32
   780  001FE0  64                 	db	100	;'d'
   781  001FE1  61                 	db	97	;'a'
   782  001FE2  74                 	db	116	;'t'
   783  001FE3  61                 	db	97	;'a'
   784  001FE4  3A                 	db	58	;':'
   785  001FE5  00                 	db	0
   786  001FE6                     STR_8:
   787  001FE6  20                 	db	32
   788  001FE7  61                 	db	97	;'a'
   789  001FE8  64                 	db	100	;'d'
   790  001FE9  64                 	db	100	;'d'
   791  001FEA  72                 	db	114	;'r'
   792  001FEB  3A                 	db	58	;':'
   793  001FEC  00                 	db	0
   794  001FED                     STR_19:
   795  001FED  63                 	db	99	;'c'
   796  001FEE  6F                 	db	111	;'o'
   797  001FEF  64                 	db	100	;'d'
   798  001FF0  65                 	db	101	;'e'
   799  001FF1  3A                 	db	58	;':'
   800  001FF2  00                 	db	0
   801  001FF3                     STR_9:
   802  001FF3  20                 	db	32
   803  001FF4  6C                 	db	108	;'l'
   804  001FF5  65                 	db	101	;'e'
   805  001FF6  6E                 	db	110	;'n'
   806  001FF7  3A                 	db	58	;':'
   807  001FF8  00                 	db	0
   808  001FF9                     STR_24:
   809  001FF9  72                 	db	114	;'r'
   810  001FFA  75                 	db	117	;'u'
   811  001FFB  6E                 	db	110	;'n'
   812  001FFC  0A                 	db	10
   813  001FFD  00                 	db	0
   814  0000                     
   815                           ; #config settings
   816  001FFE  00                 	db	0	; dummy byte at the end
   817  0000                     
   818                           	psect	nvCOMRAM
   819  00004D                     __pnvCOMRAM:
   820                           	opt callstack 0
   821  00004D                     _timer0ReloadVal:
   822                           	opt callstack 0
   823  00004D                     	ds	2
   824  00004F                     _TMR0_InterruptHandler:
   825                           	opt callstack 0
   826  00004F                     	ds	2
   827  000051                     _eusart2TxBufferRemaining:
   828                           	opt callstack 0
   829  000051                     	ds	1
   830  000052                     _eusart1TxBufferRemaining:
   831                           	opt callstack 0
   832  000052                     	ds	1
   833                           
   834                           	psect	nvBANK0
   835  0000F8                     __pnvBANK0:
   836                           	opt callstack 0
   837  0000F8                     _EUSART1_RxDefaultInterruptHandler:
   838                           	opt callstack 0
   839  0000F8                     	ds	2
   840  0000FA                     _EUSART1_TxDefaultInterruptHandler:
   841                           	opt callstack 0
   842  0000FA                     	ds	2
   843  0000FC                     _EUSART2_RxDefaultInterruptHandler:
   844                           	opt callstack 0
   845  0000FC                     	ds	2
   846  0000FE                     _EUSART2_TxDefaultInterruptHandler:
   847                           	opt callstack 0
   848  0000FE                     	ds	2
   849  0000                     _ANSELA	set	3896
   850  0000                     _ANSELB	set	3897
   851  0000                     _ANSELC	set	3898
   852  0000                     _LATCbits	set	3979
   853  0000                     _LATAbits	set	3977
   854  0000                     _RCREG2	set	3956
   855  0000                     _RCSTA2bits	set	3953
   856  0000                     _TXREG2	set	3955
   857  0000                     _TXSTA2bits	set	3954
   858  0000                     _SPBRGH2	set	3958
   859  0000                     _SPBRG2	set	3957
   860  0000                     _TXSTA2	set	3954
   861  0000                     _RCSTA2	set	3953
   862  0000                     _BAUDCON2	set	3952
   863  0000                     _RCREG1	set	4014
   864  0000                     _RCSTA1bits	set	4011
   865  0000                     _TXREG1	set	4013
   866  0000                     _TXSTA1bits	set	4012
   867  0000                     _SPBRGH1	set	4016
   868  0000                     _SPBRG1	set	4015
   869  0000                     _TXSTA1	set	4012
   870  0000                     _RCSTA1	set	4011
   871  0000                     _BAUDCON1	set	4024
   872  0000                     _OSCTUNE	set	3995
   873  0000                     _OSCCON2	set	4050
   874  0000                     _OSCCON	set	4051
   875  0000                     _WPUB	set	3937
   876  0000                     _TRISC	set	3988
   877  0000                     _TRISB	set	3987
   878  0000                     _TRISA	set	3986
   879  0000                     _LATC	set	3979
   880  0000                     _LATB	set	3978
   881  0000                     _LATA	set	3977
   882  0000                     _PIR3bits	set	4004
   883  0000                     _PIE3bits	set	4003
   884  0000                     _IPR3bits	set	4005
   885  0000                     _INTCON2bits	set	4081
   886  0000                     _IPR1bits	set	3999
   887  0000                     _RCONbits	set	4048
   888  0000                     _PIR1bits	set	3998
   889  0000                     _ADCON0bits	set	4034
   890  0000                     _PIE1bits	set	3997
   891  0000                     _ADRESH	set	4036
   892  0000                     _ADRESL	set	4035
   893  0000                     _ADCON2	set	4032
   894  0000                     _ADCON1	set	4033
   895  0000                     _ADCON0	set	4034
   896  0000                     _T0CON	set	4053
   897  0000                     _INTCONbits	set	4082
   898  0000                     _TMR0L	set	4054
   899  0000                     _TMR0H	set	4055
   900  0000                     _T0CONbits	set	4053
   901                           
   902                           	psect	cinit
   903  0011D6                     __pcinit:
   904                           	opt callstack 0
   905  0011D6                     start_initialization:
   906                           	opt callstack 0
   907  0011D6                     __initialization:
   908                           	opt callstack 0
   909                           
   910                           ; Clear objects allocated to BANK1 (240 bytes)
   911  0011D6  EE01  F000         	lfsr	0,__pbssBANK1
   912  0011DA  0EF0               	movlw	240
   913  0011DC                     clear_0:
   914  0011DC  6AEE               	clrf	postinc0,c
   915  0011DE  06E8               	decf	wreg,f,c
   916  0011E0  E1FD               	bnz	clear_0
   917                           
   918                           ; Clear objects allocated to BANK0 (140 bytes)
   919  0011E2  EE00  F060         	lfsr	0,__pbssBANK0
   920  0011E6  0E8C               	movlw	140
   921  0011E8                     clear_1:
   922  0011E8  6AEE               	clrf	postinc0,c
   923  0011EA  06E8               	decf	wreg,f,c
   924  0011EC  E1FD               	bnz	clear_1
   925                           
   926                           ; Clear objects allocated to COMRAM (26 bytes)
   927  0011EE  EE00  F033         	lfsr	0,__pbssCOMRAM
   928  0011F2  0E1A               	movlw	26
   929  0011F4                     clear_2:
   930  0011F4  6AEE               	clrf	postinc0,c
   931  0011F6  06E8               	decf	wreg,f,c
   932  0011F8  E1FD               	bnz	clear_2
   933  0011FA                     end_of_initialization:
   934                           	opt callstack 0
   935  0011FA                     __end_of__initialization:
   936                           	opt callstack 0
   937  0011FA  9053               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   938  0011FC  9253               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   939  0011FE  0E00               	movlw	low (__Lmediumconst shr (0+16))
   940  001200  6EF8               	movwf	tblptru,c
   941  001202  0100               	movlb	0
   942  001204  EFEA  F005         	goto	_main	;jump to C main() function
   943                           
   944                           	psect	bssCOMRAM
   945  000033                     __pbssCOMRAM:
   946                           	opt callstack 0
   947  000033                     ADC_run@sample_total:
   948                           	opt callstack 0
   949  000033                     	ds	4
   950  000037                     ADC_run@Vrms:
   951                           	opt callstack 0
   952  000037                     	ds	4
   953  00003B                     ADC_run@sample_count:
   954                           	opt callstack 0
   955  00003B                     	ds	2
   956  00003D                     ADC_run@adc_count:
   957                           	opt callstack 0
   958  00003D                     	ds	2
   959  00003F                     _timer:
   960                           	opt callstack 0
   961  00003F                     	ds	2
   962  000041                     crcGen@crcReg:
   963                           	opt callstack 0
   964  000041                     	ds	2
   965  000043                     _eusart2RxCount:
   966                           	opt callstack 0
   967  000043                     	ds	1
   968  000044                     _eusart2RxTail:
   969                           	opt callstack 0
   970  000044                     	ds	1
   971  000045                     _eusart2RxHead:
   972                           	opt callstack 0
   973  000045                     	ds	1
   974  000046                     _eusart2TxTail:
   975                           	opt callstack 0
   976  000046                     	ds	1
   977  000047                     _eusart2TxHead:
   978                           	opt callstack 0
   979  000047                     	ds	1
   980  000048                     _eusart1RxCount:
   981                           	opt callstack 0
   982  000048                     	ds	1
   983  000049                     _eusart1RxTail:
   984                           	opt callstack 0
   985  000049                     	ds	1
   986  00004A                     _eusart1RxHead:
   987                           	opt callstack 0
   988  00004A                     	ds	1
   989  00004B                     _eusart1TxTail:
   990                           	opt callstack 0
   991  00004B                     	ds	1
   992  00004C                     _eusart1TxHead:
   993                           	opt callstack 0
   994  00004C                     	ds	1
   995                           
   996                           	psect	bssBANK0
   997  000060                     __pbssBANK0:
   998                           	opt callstack 0
   999  000060                     _Modbus_Holding_Register:
  1000                           	opt callstack 0
  1001  000060                     	ds	132
  1002  0000E4                     _eusart2RxBuffer:
  1003                           	opt callstack 0
  1004  0000E4                     	ds	8
  1005                           
  1006                           	psect	bssBANK1
  1007  000100                     __pbssBANK1:
  1008                           	opt callstack 0
  1009  000100                     _eusart2TxBuffer:
  1010                           	opt callstack 0
  1011  000100                     	ds	64
  1012  000140                     _eusart1TxBuffer:
  1013                           	opt callstack 0
  1014  000140                     	ds	140
  1015  0001CC                     _eusart1RxBuffer:
  1016                           	opt callstack 0
  1017  0001CC                     	ds	36
  1018                           
  1019                           	psect	cstackBANK1
  1020  0001F0                     __pcstackBANK1:
  1021                           	opt callstack 0
  1022  0001F0                     uart_run@data:
  1023                           	opt callstack 0
  1024                           
  1025                           ; 2 bytes @ 0x0
  1026  0001F0                     	ds	2
  1027  0001F2                     uart_run@crc:
  1028                           	opt callstack 0
  1029                           
  1030                           ; 2 bytes @ 0x2
  1031  0001F2                     	ds	2
  1032  0001F4                     uart_run@addr:
  1033                           	opt callstack 0
  1034                           
  1035                           ; 2 bytes @ 0x4
  1036  0001F4                     	ds	2
  1037  0001F6                     uart_run@len:
  1038                           	opt callstack 0
  1039                           
  1040                           ; 2 bytes @ 0x6
  1041  0001F6                     	ds	2
  1042  0001F8                     uart_run@recv:
  1043                           	opt callstack 0
  1044                           
  1045                           ; 2 bytes @ 0x8
  1046  0001F8                     	ds	2
  1047  0001FA                     uart_run@i:
  1048                           	opt callstack 0
  1049                           
  1050                           ; 2 bytes @ 0xA
  1051  0001FA                     	ds	2
  1052  0001FC                     uart_run@tran:
  1053                           	opt callstack 0
  1054                           
  1055                           ; 2 bytes @ 0xC
  1056  0001FC                     	ds	2
  1057                           
  1058                           	psect	cstackBANK0
  1059  0000EC                     __pcstackBANK0:
  1060                           	opt callstack 0
  1061  0000EC                     _ADC_run$1496:
  1062                           	opt callstack 0
  1063                           
  1064                           ; 2 bytes @ 0x0
  1065  0000EC                     	ds	2
  1066  0000EE                     _ADC_run$1500:
  1067                           	opt callstack 0
  1068                           
  1069                           ; 2 bytes @ 0x2
  1070  0000EE                     	ds	2
  1071  0000F0                     ADC_run@Vnow:
  1072                           	opt callstack 0
  1073                           
  1074                           ; 4 bytes @ 0x4
  1075  0000F0                     	ds	4
  1076  0000F4                     ADC_run@adc_value:
  1077                           	opt callstack 0
  1078                           
  1079                           ; 2 bytes @ 0x8
  1080  0000F4                     	ds	2
  1081  0000F6                     main@state:
  1082                           	opt callstack 0
  1083                           
  1084                           ; 1 bytes @ 0xA
  1085  0000F6                     	ds	1
  1086  0000F7                     main@i:
  1087                           	opt callstack 0
  1088                           
  1089                           ; 1 bytes @ 0xB
  1090  0000F7                     	ds	1
  1091                           
  1092                           	psect	cstackCOMRAM
  1093  000001                     __pcstackCOMRAM:
  1094                           	opt callstack 0
  1095  000001                     ??_INTERRUPT_InterruptManagerHigh:
  1096  000001                     
  1097                           ; 1 bytes @ 0x0
  1098  000001                     	ds	4
  1099  000005                     ??_INTERRUPT_InterruptManagerLow:
  1100                           
  1101                           ; 1 bytes @ 0x4
  1102  000005                     	ds	7
  1103  00000C                     ??_ADC_SelectChannel:
  1104  00000C                     ?_ADC_GetConversionResult:
  1105                           	opt callstack 0
  1106  00000C                     ?_crcGen:
  1107                           	opt callstack 0
  1108  00000C                     ?___lwmod:
  1109                           	opt callstack 0
  1110  00000C                     ?___lmul:
  1111                           	opt callstack 0
  1112  00000C                     ?___lldiv:
  1113                           	opt callstack 0
  1114  00000C                     EUSART2_Write@txData:
  1115                           	opt callstack 0
  1116  00000C                     TMR0_SetInterruptHandler@InterruptHandler:
  1117                           	opt callstack 0
  1118  00000C                     EUSART1_SetTxInterruptHandler@interruptHandler:
  1119                           	opt callstack 0
  1120  00000C                     EUSART1_SetRxInterruptHandler@interruptHandler:
  1121                           	opt callstack 0
  1122  00000C                     EUSART2_SetTxInterruptHandler@interruptHandler:
  1123                           	opt callstack 0
  1124  00000C                     EUSART2_SetRxInterruptHandler@interruptHandler:
  1125                           	opt callstack 0
  1126  00000C                     crcGen@commandBuffer:
  1127                           	opt callstack 0
  1128  00000C                     ___lwmod@dividend:
  1129                           	opt callstack 0
  1130  00000C                     ___lmul@multiplier:
  1131                           	opt callstack 0
  1132  00000C                     ___lldiv@dividend:
  1133                           	opt callstack 0
  1134                           
  1135                           ; 4 bytes @ 0xB
  1136  00000C                     	ds	1
  1137  00000D                     ADC_SelectChannel@channel:
  1138                           	opt callstack 0
  1139  00000D                     string_tx_uart2@text:
  1140                           	opt callstack 0
  1141  00000D                     uint_tx_uart2@number:
  1142                           	opt callstack 0
  1143                           
  1144                           ; 4 bytes @ 0xC
  1145  00000D                     	ds	1
  1146  00000E                     ??_TMR0_Initialize:
  1147  00000E                     ??_ADC_GetConversionResult:
  1148  00000E                     crcGen@dataLen:
  1149                           	opt callstack 0
  1150  00000E                     ___lwmod@divisor:
  1151                           	opt callstack 0
  1152                           
  1153                           ; 2 bytes @ 0xD
  1154  00000E                     	ds	1
  1155  00000F                     ??_crcGen:
  1156  00000F                     ??_string_tx_uart2:
  1157                           
  1158                           ; 1 bytes @ 0xE
  1159  00000F                     	ds	1
  1160  000010                     ___lwmod@counter:
  1161                           	opt callstack 0
  1162  000010                     ___lmul@multiplicand:
  1163                           	opt callstack 0
  1164  000010                     ___lldiv@divisor:
  1165                           	opt callstack 0
  1166                           
  1167                           ; 4 bytes @ 0xF
  1168  000010                     	ds	1
  1169  000011                     string_tx_uart2@i:
  1170                           	opt callstack 0
  1171  000011                     uint_tx_uart2@len:
  1172                           	opt callstack 0
  1173                           
  1174                           ; 1 bytes @ 0x10
  1175  000011                     	ds	1
  1176  000012                     ??_uint_tx_uart2:
  1177  000012                     crcGen@memPtr1:
  1178                           	opt callstack 0
  1179                           
  1180                           ; 2 bytes @ 0x11
  1181  000012                     	ds	2
  1182  000014                     crcGen@index:
  1183                           	opt callstack 0
  1184  000014                     ___lmul@product:
  1185                           	opt callstack 0
  1186  000014                     ___lldiv@quotient:
  1187                           	opt callstack 0
  1188                           
  1189                           ; 4 bytes @ 0x13
  1190  000014                     	ds	4
  1191  000018                     ___lldiv@counter:
  1192                           	opt callstack 0
  1193                           
  1194                           ; 1 bytes @ 0x17
  1195  000018                     	ds	1
  1196  000019                     ?_u32_sqrt:
  1197                           	opt callstack 0
  1198  000019                     u32_sqrt@a:
  1199                           	opt callstack 0
  1200                           
  1201                           ; 4 bytes @ 0x18
  1202  000019                     	ds	1
  1203  00001A                     uint_tx_uart2@i:
  1204                           	opt callstack 0
  1205                           
  1206                           ; 1 bytes @ 0x19
  1207  00001A                     	ds	1
  1208  00001B                     ??_uart_run:
  1209                           
  1210                           ; 1 bytes @ 0x1A
  1211  00001B                     	ds	2
  1212  00001D                     ??_u32_sqrt:
  1213                           
  1214                           ; 1 bytes @ 0x1C
  1215  00001D                     	ds	8
  1216  000025                     u32_sqrt@pisor:
  1217                           	opt callstack 0
  1218                           
  1219                           ; 4 bytes @ 0x24
  1220  000025                     	ds	4
  1221  000029                     u32_sqrt@i:
  1222                           	opt callstack 0
  1223                           
  1224                           ; 2 bytes @ 0x28
  1225  000029                     	ds	2
  1226  00002B                     u32_sqrt@rem:
  1227                           	opt callstack 0
  1228                           
  1229                           ; 4 bytes @ 0x2A
  1230  00002B                     	ds	4
  1231  00002F                     u32_sqrt@root:
  1232                           	opt callstack 0
  1233                           
  1234                           ; 4 bytes @ 0x2E
  1235  00002F                     	ds	4
  1236  000033                     
  1237                           ; 1 bytes @ 0x32
  1238 ;;
  1239 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1240 ;;
  1241 ;; *************** function _main *****************
  1242 ;; Defined at:
  1243 ;;		line 453 in file "main.c"
  1244 ;; Parameters:    Size  Location     Type
  1245 ;;		None
  1246 ;; Auto vars:     Size  Location     Type
  1247 ;;  i               1   11[BANK0 ] unsigned char 
  1248 ;;  state           1   10[BANK0 ] char 
  1249 ;; Return value:  Size  Location     Type
  1250 ;;                  1    wreg      void 
  1251 ;; Registers used:
  1252 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1253 ;; Tracked objects:
  1254 ;;		On entry : 0/0
  1255 ;;		On exit  : 0/0
  1256 ;;		Unchanged: 0/0
  1257 ;; Data sizes:     COMRAM   BANK0   BANK1
  1258 ;;      Params:         0       0       0
  1259 ;;      Locals:         0       2       0
  1260 ;;      Temps:          0       0       0
  1261 ;;      Totals:         0       2       0
  1262 ;;Total ram usage:        2 bytes
  1263 ;; Hardware stack levels required when called:   10
  1264 ;; This function calls:
  1265 ;;		_ADC_SelectChannel
  1266 ;;		_ADC_run
  1267 ;;		_EUSART1_is_rx_ready
  1268 ;;		_EUSART1_is_tx_done
  1269 ;;		_SYSTEM_Initialize
  1270 ;;		_TMR0_SetInterruptHandler
  1271 ;;		_string_tx_uart2
  1272 ;;		_uart_run
  1273 ;; This function is called by:
  1274 ;;		Startup code after reset
  1275 ;; This function uses a non-reentrant model
  1276 ;;
  1277                           
  1278                           	psect	text0
  1279  000BD4                     __ptext0:
  1280                           	opt callstack 0
  1281  000BD4                     _main:
  1282                           	opt callstack 21
  1283                           
  1284                           ;main.c: 456: SYSTEM_Initialize();
  1285                           
  1286                           ;incstack = 0
  1287  000BD4  EC69  F009         	call	_SYSTEM_Initialize	;wreg free
  1288                           
  1289                           ;main.c: 457: ADC_SelectChannel(channel_AN0);
  1290  000BD8  0E00               	movlw	0
  1291  000BDA  EC84  F009         	call	_ADC_SelectChannel
  1292                           
  1293                           ;main.c: 458: TMR0_SetInterruptHandler(timer_8ms);
  1294  000BDE  0EAC               	movlw	low _timer_8ms
  1295  000BE0  6E0C               	movwf	TMR0_SetInterruptHandler@InterruptHandler^0,c
  1296  000BE2  0E13               	movlw	high _timer_8ms
  1297  000BE4  6E0D               	movwf	(TMR0_SetInterruptHandler@InterruptHandler+1)^0,c
  1298  000BE6  ECBD  F009         	call	_TMR0_SetInterruptHandler	;wreg free
  1299                           
  1300                           ;main.c: 460: uint8_t i;;main.c: 461: for(i=0;i<60;i++)
  1301  000BEA  0E00               	movlw	0
  1302  000BEC  0100               	movlb	0	; () banked
  1303  000BEE  6FF7               	movwf	main@i& (0+255),b
  1304  000BF0                     l3625:
  1305                           
  1306                           ; BSR set to: 0
  1307                           ;main.c: 462: Modbus_Holding_Register[i]=0;
  1308  000BF0  51F7               	movf	main@i& (0+255),w,b
  1309  000BF2  0D02               	mullw	2
  1310  000BF4  0E60               	movlw	low _Modbus_Holding_Register
  1311  000BF6  24F3               	addwf	243,w,c
  1312  000BF8  6ED9               	movwf	fsr2l,c
  1313  000BFA  0E00               	movlw	high _Modbus_Holding_Register
  1314  000BFC  20F4               	addwfc	prodh,w,c
  1315  000BFE  6EDA               	movwf	fsr2h,c
  1316  000C00  0E00               	movlw	0
  1317  000C02  6EDE               	movwf	postinc2,c
  1318  000C04  0E00               	movlw	0
  1319  000C06  6EDD               	movwf	postdec2,c
  1320                           
  1321                           ; BSR set to: 0
  1322  000C08  2BF7               	incf	main@i& (0+255),f,b
  1323                           
  1324                           ; BSR set to: 0
  1325  000C0A  0E3B               	movlw	59
  1326  000C0C  65F7               	cpfsgt	main@i& (0+255),b
  1327  000C0E  D7F0               	goto	l3625
  1328                           
  1329                           ; BSR set to: 0
  1330                           ;main.c: 463: timer=0;
  1331  000C10  0E00               	movlw	0
  1332  000C12  6E40               	movwf	(_timer+1)^0,c	;volatile
  1333  000C14  0E00               	movlw	0
  1334  000C16  6E3F               	movwf	_timer^0,c	;volatile
  1335                           
  1336                           ;main.c: 464: Modbus_Holding_Register[60]=0;
  1337  000C18  0E00               	movlw	0
  1338  000C1A  6FD9               	movwf	(_Modbus_Holding_Register+121)& (0+255),b	;volatile
  1339  000C1C  0E00               	movlw	0
  1340  000C1E  6FD8               	movwf	(_Modbus_Holding_Register+120)& (0+255),b	;volatile
  1341                           
  1342                           ;main.c: 465: Modbus_Holding_Register[61]=0;
  1343  000C20  0E00               	movlw	0
  1344  000C22  6FDB               	movwf	(_Modbus_Holding_Register+123)& (0+255),b	;volatile
  1345  000C24  0E00               	movlw	0
  1346  000C26  6FDA               	movwf	(_Modbus_Holding_Register+122)& (0+255),b	;volatile
  1347                           
  1348                           ;main.c: 466: Modbus_Holding_Register[62]=300;
  1349  000C28  0E01               	movlw	1
  1350  000C2A  6FDD               	movwf	(_Modbus_Holding_Register+125)& (0+255),b	;volatile
  1351  000C2C  0E2C               	movlw	44
  1352  000C2E  6FDC               	movwf	(_Modbus_Holding_Register+124)& (0+255),b	;volatile
  1353                           
  1354                           ;main.c: 467: Modbus_Holding_Register[63]=1;
  1355  000C30  0E00               	movlw	0
  1356  000C32  6FDF               	movwf	(_Modbus_Holding_Register+127)& (0+255),b	;volatile
  1357  000C34  0E01               	movlw	1
  1358  000C36  6FDE               	movwf	(_Modbus_Holding_Register+126)& (0+255),b	;volatile
  1359                           
  1360                           ;main.c: 468: Modbus_Holding_Register[64]=1;
  1361  000C38  0E00               	movlw	0
  1362  000C3A  6FE1               	movwf	(_Modbus_Holding_Register+129)& (0+255),b	;volatile
  1363  000C3C  0E01               	movlw	1
  1364  000C3E  6FE0               	movwf	(_Modbus_Holding_Register+128)& (0+255),b	;volatile
  1365                           
  1366                           ;main.c: 469: Modbus_Holding_Register[65]=0;
  1367  000C40  0E00               	movlw	0
  1368  000C42  6FE3               	movwf	(_Modbus_Holding_Register+131)& (0+255),b	;volatile
  1369  000C44  0E00               	movlw	0
  1370  000C46  6FE2               	movwf	(_Modbus_Holding_Register+130)& (0+255),b	;volatile
  1371                           
  1372                           ; BSR set to: 0
  1373                           ;main.c: 471: LATAbits.LATA1=0;
  1374  000C48  9289               	bcf	137,1,c	;volatile
  1375                           
  1376                           ; BSR set to: 0
  1377                           ;main.c: 472: LATCbits.LATC5=0;
  1378  000C4A  9A8B               	bcf	139,5,c	;volatile
  1379                           
  1380                           ; BSR set to: 0
  1381                           ;main.c: 475: (INTCONbits.GIEH = 1);
  1382  000C4C  8EF2               	bsf	242,7,c	;volatile
  1383                           
  1384                           ; BSR set to: 0
  1385                           ;main.c: 478: (INTCONbits.GIEL = 1);
  1386  000C4E  8CF2               	bsf	242,6,c	;volatile
  1387                           
  1388                           ; BSR set to: 0
  1389                           ;main.c: 487: (INTCONbits.PEIE = 1);
  1390  000C50  8CF2               	bsf	242,6,c	;volatile
  1391                           
  1392                           ; BSR set to: 0
  1393                           ;main.c: 492: int8_t state=-1;
  1394  000C52  69F6               	setf	main@state& (0+255),b
  1395  000C54  D051               	goto	l569
  1396  000C56                     l3645:
  1397                           
  1398                           ; BSR set to: 0
  1399                           ;main.c: 498: if(125<=timer)
  1400  000C56  5040               	movf	(_timer+1)^0,w,c	;volatile
  1401  000C58  E104               	bnz	u1980
  1402  000C5A  0E7D               	movlw	125
  1403  000C5C  5C3F               	subwf	_timer^0,w,c	;volatile
  1404  000C5E  A0D8               	btfss	status,0,c
  1405  000C60  D04B               	goto	l569
  1406  000C62                     u1980:
  1407                           
  1408                           ; BSR set to: 0
  1409                           ;main.c: 499: {;main.c: 500: string_tx_uart2("run\n");
  1410  000C62  0EF9               	movlw	low STR_24
  1411  000C64  6E0D               	movwf	string_tx_uart2@text^0,c
  1412  000C66  0E1F               	movlw	high STR_24
  1413  000C68  6E0E               	movwf	(string_tx_uart2@text+1)^0,c
  1414  000C6A  EC57  F008         	call	_string_tx_uart2	;wreg free
  1415                           
  1416                           ;main.c: 501: PIE1bits.RC1IE = 1;
  1417  000C6E  8A9D               	bsf	157,5,c	;volatile
  1418                           
  1419                           ;main.c: 502: timer=0;
  1420  000C70  0E00               	movlw	0
  1421  000C72  6E40               	movwf	(_timer+1)^0,c	;volatile
  1422  000C74  0E00               	movlw	0
  1423  000C76  6E3F               	movwf	_timer^0,c	;volatile
  1424                           
  1425                           ;main.c: 503: state=0;
  1426  000C78  0E00               	movlw	0
  1427  000C7A  D025               	goto	L3
  1428  000C7C                     l3655:
  1429                           
  1430                           ; BSR set to: 0
  1431                           ;main.c: 507: if(EUSART1_is_rx_ready())
  1432  000C7C  ECD9  F009         	call	_EUSART1_is_rx_ready	;wreg free
  1433  000C80  0900               	iorlw	0
  1434  000C82  B4D8               	btfsc	status,2,c
  1435  000C84  D006               	goto	l3659
  1436                           
  1437                           ;main.c: 508: {;main.c: 509: timer=0;
  1438  000C86  0E00               	movlw	0
  1439  000C88  6E40               	movwf	(_timer+1)^0,c	;volatile
  1440  000C8A  0E00               	movlw	0
  1441  000C8C  6E3F               	movwf	_timer^0,c	;volatile
  1442                           
  1443                           ;main.c: 510: state=1;
  1444  000C8E  0E01               	movlw	1
  1445  000C90  D01A               	goto	L3
  1446  000C92                     l3659:
  1447                           
  1448                           ;main.c: 512: };main.c: 513: ADC_run();
  1449  000C92  EC5A  F004         	call	_ADC_run	;wreg free
  1450                           
  1451                           ;main.c: 514: break;
  1452  000C96  D030               	goto	l569
  1453  000C98                     l3661:
  1454                           
  1455                           ; BSR set to: 0
  1456                           ;main.c: 516: if(34<=timer)
  1457  000C98  5040               	movf	(_timer+1)^0,w,c	;volatile
  1458  000C9A  E104               	bnz	u2000
  1459  000C9C  0E22               	movlw	34
  1460  000C9E  5C3F               	subwf	_timer^0,w,c	;volatile
  1461  000CA0  A0D8               	btfss	status,0,c
  1462  000CA2  D02A               	goto	l569
  1463  000CA4                     u2000:
  1464                           
  1465                           ; BSR set to: 0
  1466                           ;main.c: 517: {;main.c: 518: if(uart_run())
  1467  000CA4  EC4F  F000         	call	_uart_run	;wreg free
  1468  000CA8  0900               	iorlw	0
  1469  000CAA  B4D8               	btfsc	status,2,c
  1470  000CAC  D006               	goto	l577
  1471                           
  1472                           ;main.c: 519: {;main.c: 520: timer=0;
  1473  000CAE  0E00               	movlw	0
  1474  000CB0  6E40               	movwf	(_timer+1)^0,c	;volatile
  1475  000CB2  0E00               	movlw	0
  1476  000CB4  6E3F               	movwf	_timer^0,c	;volatile
  1477                           
  1478                           ;main.c: 521: state=2;
  1479  000CB6  0E02               	movlw	2
  1480  000CB8  D006               	goto	L3
  1481  000CBA                     l577:
  1482                           
  1483                           ;main.c: 523: else;main.c: 524: {;main.c: 525: PIE1bits.RC1IE = 1;
  1484  000CBA  8A9D               	bsf	157,5,c	;volatile
  1485                           
  1486                           ;main.c: 526: timer=0;
  1487  000CBC  0E00               	movlw	0
  1488  000CBE  6E40               	movwf	(_timer+1)^0,c	;volatile
  1489  000CC0  0E00               	movlw	0
  1490  000CC2  6E3F               	movwf	_timer^0,c	;volatile
  1491                           
  1492                           ;main.c: 527: state=3;
  1493  000CC4  0E03               	movlw	3
  1494  000CC6                     L3:
  1495  000CC6  0100               	movlb	0	; () banked
  1496  000CC8  D016               	goto	L4
  1497  000CCA                     l3669:
  1498                           
  1499                           ; BSR set to: 0
  1500                           ;main.c: 532: if(EUSART1_is_tx_done())
  1501  000CCA  ECB1  F009         	call	_EUSART1_is_tx_done	;wreg free
  1502  000CCE  0900               	iorlw	0
  1503  000CD0  B4D8               	btfsc	status,2,c
  1504  000CD2  D012               	goto	l569
  1505                           
  1506                           ;main.c: 533: {;main.c: 534: LATCbits.LATC5=0;
  1507  000CD4  9A8B               	bcf	139,5,c	;volatile
  1508  000CD6  D7F1               	goto	l577
  1509  000CD8                     l3675:
  1510                           
  1511                           ; BSR set to: 0
  1512                           ;main.c: 541: if(1<timer)
  1513  000CD8  5040               	movf	(_timer+1)^0,w,c	;volatile
  1514  000CDA  E104               	bnz	u2030
  1515  000CDC  0E02               	movlw	2
  1516  000CDE  5C3F               	subwf	_timer^0,w,c	;volatile
  1517  000CE0  A0D8               	btfss	status,0,c
  1518  000CE2  D00A               	goto	l569
  1519  000CE4                     u2030:
  1520                           
  1521                           ; BSR set to: 0
  1522                           ;main.c: 542: {;main.c: 543: eusart1RxHead = 0;
  1523  000CE4  0E00               	movlw	0
  1524  000CE6  6E4A               	movwf	_eusart1RxHead^0,c	;volatile
  1525                           
  1526                           ;main.c: 544: eusart1RxCount = 0;
  1527  000CE8  0E00               	movlw	0
  1528  000CEA  6E48               	movwf	_eusart1RxCount^0,c	;volatile
  1529                           
  1530                           ;main.c: 545: timer=0;
  1531  000CEC  0E00               	movlw	0
  1532  000CEE  6E40               	movwf	(_timer+1)^0,c	;volatile
  1533  000CF0  0E00               	movlw	0
  1534  000CF2  6E3F               	movwf	_timer^0,c	;volatile
  1535                           
  1536                           ;main.c: 546: state=0;
  1537  000CF4  0E00               	movlw	0
  1538  000CF6                     L4:
  1539  000CF6  6FF6               	movwf	main@state& (0+255),b
  1540  000CF8                     l569:
  1541  000CF8  0100               	movlb	0	; () banked
  1542  000CFA  51F6               	movf	main@state& (0+255),w,b
  1543                           
  1544                           ; Switch size 1, requested type "simple"
  1545                           ; Number of cases is 5, Range of values is 0 to 255
  1546                           ; switch strategies available:
  1547                           ; Name         Instructions Cycles
  1548                           ; simple_byte           16     9 (average)
  1549                           ;	Chosen strategy is simple_byte
  1550  000CFC  0A00               	xorlw	0	; case 0
  1551  000CFE  B4D8               	btfsc	status,2,c
  1552  000D00  D7BD               	goto	l3655
  1553  000D02  0A01               	xorlw	1	; case 1
  1554  000D04  B4D8               	btfsc	status,2,c
  1555  000D06  D7C8               	goto	l3661
  1556  000D08  0A03               	xorlw	3	; case 2
  1557  000D0A  B4D8               	btfsc	status,2,c
  1558  000D0C  D7DE               	goto	l3669
  1559  000D0E  0A01               	xorlw	1	; case 3
  1560  000D10  B4D8               	btfsc	status,2,c
  1561  000D12  D7E2               	goto	l3675
  1562  000D14  0AFC               	xorlw	252	; case 255
  1563  000D16  B4D8               	btfsc	status,2,c
  1564  000D18  D79E               	goto	l3645
  1565  000D1A  D7EE               	goto	l569
  1566  000D1C                     __end_of_main:
  1567                           	opt callstack 0
  1568                           
  1569 ;; *************** function _uart_run *****************
  1570 ;; Defined at:
  1571 ;;		line 289 in file "main.c"
  1572 ;; Parameters:    Size  Location     Type
  1573 ;;		None
  1574 ;; Auto vars:     Size  Location     Type
  1575 ;;  tran            2   12[BANK1 ] PTR struct modbus_485
  1576 ;;		 -> eusart1TxBuffer(140), 
  1577 ;;  i               2   10[BANK1 ] unsigned int 
  1578 ;;  recv            2    8[BANK1 ] PTR struct modbus_485
  1579 ;;		 -> eusart1RxBuffer(36), 
  1580 ;;  len             2    6[BANK1 ] unsigned int 
  1581 ;;  addr            2    4[BANK1 ] unsigned int 
  1582 ;;  crc             2    2[BANK1 ] unsigned int 
  1583 ;;  data            2    0[BANK1 ] unsigned int 
  1584 ;; Return value:  Size  Location     Type
  1585 ;;                  1    wreg      unsigned char 
  1586 ;; Registers used:
  1587 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1588 ;; Tracked objects:
  1589 ;;		On entry : 0/0
  1590 ;;		On exit  : 0/0
  1591 ;;		Unchanged: 0/0
  1592 ;; Data sizes:     COMRAM   BANK0   BANK1
  1593 ;;      Params:         0       0       0
  1594 ;;      Locals:         0       0      14
  1595 ;;      Temps:         14       0       0
  1596 ;;      Totals:        14       0      14
  1597 ;;Total ram usage:       28 bytes
  1598 ;; Hardware stack levels used:    1
  1599 ;; Hardware stack levels required when called:    9
  1600 ;; This function calls:
  1601 ;;		_EUSART2_Write
  1602 ;;		_check_register
  1603 ;;		_crcGen
  1604 ;;		_string_tx_uart2
  1605 ;;		_uint_tx_uart2
  1606 ;; This function is called by:
  1607 ;;		_main
  1608 ;; This function uses a non-reentrant model
  1609 ;;
  1610                           
  1611                           	psect	text1
  1612  00009E                     __ptext1:
  1613                           	opt callstack 0
  1614  00009E                     _uart_run:
  1615                           	opt callstack 21
  1616                           
  1617                           ;main.c: 291: uint16_t addr,len,data,crc,i;;main.c: 292: union modbus_485 *recv=(union m
      +                          odbus_485*)eusart1RxBuffer;
  1618                           
  1619                           ; BSR set to: 0
  1620                           ;incstack = 0
  1621  00009E  0ECC               	movlw	low _eusart1RxBuffer
  1622  0000A0  0101               	movlb	1	; () banked
  1623  0000A2  6FF8               	movwf	uart_run@recv& (0+255),b
  1624  0000A4  0E01               	movlw	high _eusart1RxBuffer
  1625  0000A6  6FF9               	movwf	(uart_run@recv+1)& (0+255),b
  1626                           
  1627                           ;main.c: 293: union modbus_485 *tran=(union modbus_485*)eusart1TxBuffer;
  1628  0000A8  0E40               	movlw	low _eusart1TxBuffer
  1629  0000AA  6FFC               	movwf	uart_run@tran& (0+255),b
  1630  0000AC  0E01               	movlw	high _eusart1TxBuffer
  1631  0000AE  6FFD               	movwf	(uart_run@tran+1)& (0+255),b
  1632                           
  1633                           ; BSR set to: 1
  1634                           ;main.c: 295: PIE1bits.RC1IE = 0;
  1635  0000B0  9A9D               	bcf	157,5,c	;volatile
  1636                           
  1637                           ; BSR set to: 1
  1638                           ;main.c: 296: PIE1bits.TX1IE = 0;
  1639  0000B2  989D               	bcf	157,4,c	;volatile
  1640                           
  1641                           ; BSR set to: 1
  1642                           ;main.c: 298: if(recv->CMD.DeviceAddress==0xff)
  1643  0000B4  C1F8  FFD9         	movff	uart_run@recv,fsr2l
  1644  0000B8  C1F9  FFDA         	movff	uart_run@recv+1,fsr2h
  1645  0000BC  28DE               	incf	postinc2,w,c
  1646  0000BE  A4D8               	btfss	status,2,c
  1647  0000C0  D3E1               	goto	l3607
  1648                           
  1649                           ; BSR set to: 1
  1650                           ;main.c: 299: {;main.c: 300: string_tx_uart2("new data, check crc\n");
  1651  0000C2  0E69               	movlw	low STR_5
  1652  0000C4  6E0D               	movwf	string_tx_uart2@text^0,c
  1653  0000C6  0E1F               	movlw	high STR_5
  1654  0000C8  6E0E               	movwf	(string_tx_uart2@text+1)^0,c
  1655  0000CA  EC57  F008         	call	_string_tx_uart2	;wreg free
  1656                           
  1657                           ;main.c: 301: for(i=0;i<eusart1RxCount;i++)
  1658  0000CE  0E00               	movlw	0
  1659  0000D0  0101               	movlb	1	; () banked
  1660  0000D2  6FFB               	movwf	(uart_run@i+1)& (0+255),b
  1661  0000D4  0E00               	movlw	0
  1662  0000D6  6FFA               	movwf	uart_run@i& (0+255),b
  1663  0000D8  D017               	goto	l3407
  1664  0000DA                     l3401:
  1665                           
  1666                           ; BSR set to: 1
  1667                           ;main.c: 302: {;main.c: 303: uint_tx_uart2(eusart1RxBuffer[i],2);
  1668  0000DA  0ECC               	movlw	low _eusart1RxBuffer
  1669  0000DC  25FA               	addwf	uart_run@i& (0+255),w,b
  1670  0000DE  6ED9               	movwf	fsr2l,c
  1671  0000E0  0E01               	movlw	high _eusart1RxBuffer
  1672  0000E2  21FB               	addwfc	(uart_run@i+1)& (0+255),w,b
  1673  0000E4  6EDA               	movwf	fsr2h,c
  1674  0000E6  50DF               	movf	indf2,w,c
  1675  0000E8  6E1B               	movwf	??_uart_run^0,c
  1676  0000EA  501B               	movf	??_uart_run^0,w,c
  1677  0000EC  6E0D               	movwf	uint_tx_uart2@number^0,c
  1678  0000EE  6A0E               	clrf	(uint_tx_uart2@number+1)^0,c
  1679  0000F0  6A0F               	clrf	(uint_tx_uart2@number+2)^0,c
  1680  0000F2  6A10               	clrf	(uint_tx_uart2@number+3)^0,c
  1681  0000F4  0E02               	movlw	2
  1682  0000F6  6E11               	movwf	uint_tx_uart2@len^0,c
  1683  0000F8  EC42  F005         	call	_uint_tx_uart2	;wreg free
  1684                           
  1685                           ;main.c: 304: EUSART2_Write(' ');
  1686  0000FC  0E20               	movlw	32
  1687  0000FE  ECB5  F008         	call	_EUSART2_Write
  1688  000102  0101               	movlb	1	; () banked
  1689  000104  4BFA               	infsnz	uart_run@i& (0+255),f,b
  1690  000106  2BFB               	incf	(uart_run@i+1)& (0+255),f,b
  1691  000108                     l3407:
  1692                           
  1693                           ; BSR set to: 1
  1694  000108  5048               	movf	_eusart1RxCount^0,w,c	;volatile
  1695  00010A  6E1B               	movwf	??_uart_run^0,c
  1696  00010C  6A1C               	clrf	(??_uart_run+1)^0,c
  1697  00010E  501B               	movf	??_uart_run^0,w,c
  1698  000110  5DFA               	subwf	uart_run@i& (0+255),w,b
  1699  000112  501C               	movf	(??_uart_run+1)^0,w,c
  1700  000114  59FB               	subwfb	(uart_run@i+1)& (0+255),w,b
  1701  000116  A0D8               	btfss	status,0,c
  1702  000118  D7E0               	goto	l3401
  1703                           
  1704                           ; BSR set to: 1
  1705                           ;main.c: 305: };main.c: 306: EUSART2_Write('\n');
  1706  00011A  0E0A               	movlw	10
  1707  00011C  ECB5  F008         	call	_EUSART2_Write
  1708                           
  1709                           ;main.c: 307: crc=crcGen(eusart1RxBuffer,eusart1RxCount-2);
  1710  000120  0ECC               	movlw	low _eusart1RxBuffer
  1711  000122  6E0C               	movwf	crcGen@commandBuffer^0,c
  1712  000124  0E01               	movlw	high _eusart1RxBuffer
  1713  000126  6E0D               	movwf	(crcGen@commandBuffer+1)^0,c
  1714  000128  5048               	movf	_eusart1RxCount^0,w,c	;volatile
  1715  00012A  0FFE               	addlw	254
  1716  00012C  6E0E               	movwf	crcGen@dataLen^0,c
  1717  00012E  EC8C  F007         	call	_crcGen	;wreg free
  1718  000132  C00C  F1F2         	movff	?_crcGen,uart_run@crc
  1719  000136  C00D  F1F3         	movff	?_crcGen+1,uart_run@crc+1
  1720                           
  1721                           ;main.c: 308: if(crc==(eusart1RxBuffer[eusart1RxCount-1]<<8)+eusart1RxBuffer[eusart1RxCo
      +                          unt-2])
  1722  00013A  0ECB               	movlw	low (_eusart1RxBuffer+65535)
  1723  00013C  2448               	addwf	_eusart1RxCount^0,w,c	;volatile
  1724  00013E  6ED9               	movwf	fsr2l,c
  1725  000140  6ADA               	clrf	fsr2h,c
  1726  000142  0E01               	movlw	high (_eusart1RxBuffer+65535)
  1727  000144  22DA               	addwfc	fsr2h,f,c
  1728  000146  50DF               	movf	indf2,w,c
  1729  000148  6E1B               	movwf	??_uart_run^0,c
  1730  00014A  501B               	movf	??_uart_run^0,w,c
  1731  00014C  6E1D               	movwf	(??_uart_run+2)^0,c
  1732  00014E  6A1C               	clrf	(??_uart_run+1)^0,c
  1733  000150  0ECA               	movlw	low (_eusart1RxBuffer+65534)
  1734  000152  2448               	addwf	_eusart1RxCount^0,w,c	;volatile
  1735  000154  6ED9               	movwf	fsr2l,c
  1736  000156  6ADA               	clrf	fsr2h,c
  1737  000158  0E01               	movlw	high (_eusart1RxBuffer+65534)
  1738  00015A  22DA               	addwfc	fsr2h,f,c
  1739  00015C  50DF               	movf	indf2,w,c
  1740  00015E  6E1E               	movwf	(??_uart_run+3)^0,c
  1741  000160  501E               	movf	(??_uart_run+3)^0,w,c
  1742  000162  261C               	addwf	(??_uart_run+1)^0,f,c
  1743  000164  0E00               	movlw	0
  1744  000166  221D               	addwfc	(??_uart_run+2)^0,f,c
  1745  000168  0101               	movlb	1	; () banked
  1746  00016A  51F2               	movf	uart_run@crc& (0+255),w,b
  1747  00016C  181C               	xorwf	(??_uart_run+1)^0,w,c
  1748  00016E  E103               	bnz	u1891
  1749  000170  51F3               	movf	(uart_run@crc+1)& (0+255),w,b
  1750  000172  181D               	xorwf	(??_uart_run+2)^0,w,c
  1751  000174  A4D8               	btfss	status,2,c
  1752  000176                     u1891:
  1753  000176  D37F               	goto	l3605
  1754                           
  1755                           ; BSR set to: 1
  1756                           ;main.c: 309: {;main.c: 310: string_tx_uart2("crc:O\n");
  1757  000178  0ED1               	movlw	low STR_6
  1758  00017A  6E0D               	movwf	string_tx_uart2@text^0,c
  1759  00017C  0E1F               	movlw	high STR_6
  1760  00017E  6E0E               	movwf	(string_tx_uart2@text+1)^0,c
  1761  000180  EC57  F008         	call	_string_tx_uart2	;wreg free
  1762                           
  1763                           ;main.c: 311: switch(recv->CMD.func)
  1764  000184  D360               	goto	l3593
  1765  000186                     l3417:
  1766                           
  1767                           ; BSR set to: 1
  1768                           ;main.c: 314: addr=(recv->CMD01_04.Address_Hi<<8)+recv->CMD01_04.Address_Lo;
  1769  000186  EE20 F003          	lfsr	2,3
  1770  00018A  51F8               	movf	uart_run@recv& (0+255),w,b
  1771  00018C  26D9               	addwf	fsr2l,f,c
  1772  00018E  51F9               	movf	(uart_run@recv+1)& (0+255),w,b
  1773  000190  22DA               	addwfc	fsr2h,f,c
  1774  000192  50DF               	movf	indf2,w,c
  1775  000194  6E1B               	movwf	??_uart_run^0,c
  1776  000196  EE20 F002          	lfsr	2,2
  1777  00019A  51F8               	movf	uart_run@recv& (0+255),w,b
  1778  00019C  26D9               	addwf	fsr2l,f,c
  1779  00019E  51F9               	movf	(uart_run@recv+1)& (0+255),w,b
  1780  0001A0  22DA               	addwfc	fsr2h,f,c
  1781  0001A2  50DF               	movf	indf2,w,c
  1782  0001A4  6E1C               	movwf	(??_uart_run+1)^0,c
  1783  0001A6  501C               	movf	(??_uart_run+1)^0,w,c
  1784  0001A8  6E1E               	movwf	(??_uart_run+3)^0,c
  1785  0001AA  6A1D               	clrf	(??_uart_run+2)^0,c
  1786  0001AC  501B               	movf	??_uart_run^0,w,c
  1787  0001AE  241D               	addwf	(??_uart_run+2)^0,w,c
  1788  0001B0  6FF4               	movwf	uart_run@addr& (0+255),b
  1789  0001B2  0E00               	movlw	0
  1790  0001B4  201E               	addwfc	(??_uart_run+3)^0,w,c
  1791  0001B6  6FF5               	movwf	(uart_run@addr+1)& (0+255),b
  1792                           
  1793                           ;main.c: 315: len=(recv->CMD01_04.reg_num_Hi<<8)+recv->CMD01_04.reg_num_Lo;
  1794  0001B8  EE20 F005          	lfsr	2,5
  1795  0001BC  51F8               	movf	uart_run@recv& (0+255),w,b
  1796  0001BE  26D9               	addwf	fsr2l,f,c
  1797  0001C0  51F9               	movf	(uart_run@recv+1)& (0+255),w,b
  1798  0001C2  22DA               	addwfc	fsr2h,f,c
  1799  0001C4  50DF               	movf	indf2,w,c
  1800  0001C6  6E1B               	movwf	??_uart_run^0,c
  1801  0001C8  EE20 F004          	lfsr	2,4
  1802  0001CC  51F8               	movf	uart_run@recv& (0+255),w,b
  1803  0001CE  26D9               	addwf	fsr2l,f,c
  1804  0001D0  51F9               	movf	(uart_run@recv+1)& (0+255),w,b
  1805  0001D2  22DA               	addwfc	fsr2h,f,c
  1806  0001D4  50DF               	movf	indf2,w,c
  1807  0001D6  6E1C               	movwf	(??_uart_run+1)^0,c
  1808  0001D8  501C               	movf	(??_uart_run+1)^0,w,c
  1809  0001DA  6E1E               	movwf	(??_uart_run+3)^0,c
  1810  0001DC  6A1D               	clrf	(??_uart_run+2)^0,c
  1811  0001DE  501B               	movf	??_uart_run^0,w,c
  1812  0001E0  241D               	addwf	(??_uart_run+2)^0,w,c
  1813  0001E2  6FF6               	movwf	uart_run@len& (0+255),b
  1814  0001E4  0E00               	movlw	0
  1815  0001E6  201E               	addwfc	(??_uart_run+3)^0,w,c
  1816  0001E8  6FF7               	movwf	(uart_run@len+1)& (0+255),b
  1817                           
  1818                           ; BSR set to: 1
  1819                           ;main.c: 316: string_tx_uart2("code:03");
  1820  0001EA  0EC1               	movlw	low STR_7
  1821  0001EC  6E0D               	movwf	string_tx_uart2@text^0,c
  1822  0001EE  0E1F               	movlw	high STR_7
  1823  0001F0  6E0E               	movwf	(string_tx_uart2@text+1)^0,c
  1824  0001F2  EC57  F008         	call	_string_tx_uart2	;wreg free
  1825                           
  1826                           ;main.c: 317: string_tx_uart2(" addr:");
  1827  0001F6  0EE6               	movlw	low STR_8
  1828  0001F8  6E0D               	movwf	string_tx_uart2@text^0,c
  1829  0001FA  0E1F               	movlw	high STR_8
  1830  0001FC  6E0E               	movwf	(string_tx_uart2@text+1)^0,c
  1831  0001FE  EC57  F008         	call	_string_tx_uart2	;wreg free
  1832                           
  1833                           ;main.c: 318: uint_tx_uart2(addr,4);
  1834  000202  C1F4  F00D         	movff	uart_run@addr,uint_tx_uart2@number
  1835  000206  C1F5  F00E         	movff	uart_run@addr+1,uint_tx_uart2@number+1
  1836  00020A  6A0F               	clrf	(uint_tx_uart2@number+2)^0,c
  1837  00020C  6A10               	clrf	(uint_tx_uart2@number+3)^0,c
  1838  00020E  0E04               	movlw	4
  1839  000210  6E11               	movwf	uint_tx_uart2@len^0,c
  1840  000212  EC42  F005         	call	_uint_tx_uart2	;wreg free
  1841                           
  1842                           ;main.c: 319: string_tx_uart2(" len:");
  1843  000216  0EF3               	movlw	low STR_9
  1844  000218  6E0D               	movwf	string_tx_uart2@text^0,c
  1845  00021A  0E1F               	movlw	high STR_9
  1846  00021C  6E0E               	movwf	(string_tx_uart2@text+1)^0,c
  1847  00021E  EC57  F008         	call	_string_tx_uart2	;wreg free
  1848                           
  1849                           ;main.c: 320: uint_tx_uart2(len,4);
  1850  000222  C1F6  F00D         	movff	uart_run@len,uint_tx_uart2@number
  1851  000226  C1F7  F00E         	movff	uart_run@len+1,uint_tx_uart2@number+1
  1852  00022A  6A0F               	clrf	(uint_tx_uart2@number+2)^0,c
  1853  00022C  6A10               	clrf	(uint_tx_uart2@number+3)^0,c
  1854  00022E  0E04               	movlw	4
  1855  000230  6E11               	movwf	uint_tx_uart2@len^0,c
  1856  000232  EC42  F005         	call	_uint_tx_uart2	;wreg free
  1857                           
  1858                           ;main.c: 321: string_tx_uart2("\n");
  1859  000236  0ED6               	movlw	low (STR_6+5)
  1860  000238  6E0D               	movwf	string_tx_uart2@text^0,c
  1861  00023A  0E1F               	movlw	high (STR_6+5)
  1862  00023C  6E0E               	movwf	(string_tx_uart2@text+1)^0,c
  1863  00023E  EC57  F008         	call	_string_tx_uart2	;wreg free
  1864                           
  1865                           ;main.c: 324: if(addr+len>66)
  1866  000242  0101               	movlb	1	; () banked
  1867  000244  51F6               	movf	uart_run@len& (0+255),w,b
  1868  000246  25F4               	addwf	uart_run@addr& (0+255),w,b
  1869  000248  6E1B               	movwf	??_uart_run^0,c
  1870  00024A  51F7               	movf	(uart_run@len+1)& (0+255),w,b
  1871  00024C  21F5               	addwfc	(uart_run@addr+1)& (0+255),w,b
  1872  00024E  6E1C               	movwf	(??_uart_run+1)^0,c
  1873  000250  501C               	movf	(??_uart_run+1)^0,w,c
  1874  000252  E104               	bnz	u1900
  1875  000254  0E43               	movlw	67
  1876  000256  5C1B               	subwf	??_uart_run^0,w,c
  1877  000258  A0D8               	btfss	status,0,c
  1878  00025A  D028               	goto	l3445
  1879  00025C                     u1900:
  1880                           
  1881                           ; BSR set to: 1
  1882                           ;main.c: 325: {;main.c: 326: tran->CMD.DeviceAddress=0xff;
  1883  00025C  C1FC  FFD9         	movff	uart_run@tran,fsr2l
  1884  000260  C1FD  FFDA         	movff	uart_run@tran+1,fsr2h
  1885  000264  0EFF               	movlw	255
  1886  000266  6EDF               	movwf	indf2,c
  1887                           
  1888                           ; BSR set to: 1
  1889                           ;main.c: 327: tran->CMD.func=0x83;
  1890  000268  EE20 F001          	lfsr	2,1
  1891  00026C  51FC               	movf	uart_run@tran& (0+255),w,b
  1892  00026E  26D9               	addwf	fsr2l,f,c
  1893  000270  51FD               	movf	(uart_run@tran+1)& (0+255),w,b
  1894  000272  22DA               	addwfc	fsr2h,f,c
  1895  000274  0E83               	movlw	131
  1896  000276  6EDF               	movwf	indf2,c
  1897                           
  1898                           ; BSR set to: 1
  1899                           ;main.c: 328: tran->CMD.buf[0]=0x02;
  1900  000278  EE20 F002          	lfsr	2,2
  1901  00027C  51FC               	movf	uart_run@tran& (0+255),w,b
  1902  00027E  26D9               	addwf	fsr2l,f,c
  1903  000280  51FD               	movf	(uart_run@tran+1)& (0+255),w,b
  1904  000282  22DA               	addwfc	fsr2h,f,c
  1905  000284  0E02               	movlw	2
  1906  000286  6EDF               	movwf	indf2,c
  1907                           
  1908                           ; BSR set to: 1
  1909                           ;main.c: 329: tran->CMD.buf[2]=0x2E;
  1910  000288  EE20 F004          	lfsr	2,4
  1911  00028C  51FC               	movf	uart_run@tran& (0+255),w,b
  1912  00028E  26D9               	addwf	fsr2l,f,c
  1913  000290  51FD               	movf	(uart_run@tran+1)& (0+255),w,b
  1914  000292  22DA               	addwfc	fsr2h,f,c
  1915  000294  0E2E               	movlw	46
  1916  000296  6EDF               	movwf	indf2,c
  1917                           
  1918                           ; BSR set to: 1
  1919                           ;main.c: 330: tran->CMD.buf[1]=0x71;
  1920  000298  EE20 F003          	lfsr	2,3
  1921  00029C  51FC               	movf	uart_run@tran& (0+255),w,b
  1922  00029E  26D9               	addwf	fsr2l,f,c
  1923  0002A0  51FD               	movf	(uart_run@tran+1)& (0+255),w,b
  1924  0002A2  22DA               	addwfc	fsr2h,f,c
  1925  0002A4  0E71               	movlw	113
  1926  0002A6                     L7:
  1927  0002A6  6EDF               	movwf	indf2,c
  1928  0002A8                     l3443:
  1929                           
  1930                           ; BSR set to: 1
  1931                           ;main.c: 331: eusart1TxBufferRemaining=sizeof(eusart1TxBuffer)-5;
  1932  0002A8  0E87               	movlw	135
  1933  0002AA  D170               	goto	L6
  1934  0002AC                     l3445:
  1935                           
  1936                           ; BSR set to: 1
  1937                           ;main.c: 333: };main.c: 335: tran->Reply01_04.DeviceAddress=0xff;
  1938  0002AC  C1FC  FFD9         	movff	uart_run@tran,fsr2l
  1939  0002B0  C1FD  FFDA         	movff	uart_run@tran+1,fsr2h
  1940  0002B4  0EFF               	movlw	255
  1941  0002B6  6EDF               	movwf	indf2,c
  1942                           
  1943                           ; BSR set to: 1
  1944                           ;main.c: 336: tran->Reply01_04.func=0x03;
  1945  0002B8  EE20 F001          	lfsr	2,1
  1946  0002BC  51FC               	movf	uart_run@tran& (0+255),w,b
  1947  0002BE  26D9               	addwf	fsr2l,f,c
  1948  0002C0  51FD               	movf	(uart_run@tran+1)& (0+255),w,b
  1949  0002C2  22DA               	addwfc	fsr2h,f,c
  1950  0002C4  0E03               	movlw	3
  1951  0002C6  6EDF               	movwf	indf2,c
  1952                           
  1953                           ; BSR set to: 1
  1954                           ;main.c: 337: tran->Reply01_04.ByteCount=len<<1;
  1955  0002C8  EE20 F002          	lfsr	2,2
  1956  0002CC  51FC               	movf	uart_run@tran& (0+255),w,b
  1957  0002CE  26D9               	addwf	fsr2l,f,c
  1958  0002D0  51FD               	movf	(uart_run@tran+1)& (0+255),w,b
  1959  0002D2  22DA               	addwfc	fsr2h,f,c
  1960  0002D4  51F6               	movf	uart_run@len& (0+255),w,b
  1961  0002D6  25F6               	addwf	uart_run@len& (0+255),w,b
  1962  0002D8  6EDF               	movwf	indf2,c
  1963                           
  1964                           ; BSR set to: 1
  1965                           ;main.c: 338: for(i=0;i<len;i++)
  1966  0002DA  0E00               	movlw	0
  1967  0002DC  6FFB               	movwf	(uart_run@i+1)& (0+255),b
  1968  0002DE  0E00               	movlw	0
  1969  0002E0  6FFA               	movwf	uart_run@i& (0+255),b
  1970  0002E2  D055               	goto	l3457
  1971  0002E4                     l3453:
  1972                           
  1973                           ; BSR set to: 1
  1974                           ;main.c: 339: {;main.c: 340: tran->Reply01_04.buf[i*2]=Modbus_Holding_Register[addr+i]>>
      +                          8;
  1975  0002E4  C1FA  F01B         	movff	uart_run@i,??_uart_run
  1976  0002E8  C1FB  F01C         	movff	uart_run@i+1,??_uart_run+1
  1977  0002EC  90D8               	bcf	status,0,c
  1978  0002EE  361B               	rlcf	??_uart_run^0,f,c
  1979  0002F0  361C               	rlcf	(??_uart_run+1)^0,f,c
  1980  0002F2  C1FC  F01D         	movff	uart_run@tran,??_uart_run+2
  1981  0002F6  C1FD  F01E         	movff	uart_run@tran+1,??_uart_run+3
  1982  0002FA  501B               	movf	??_uart_run^0,w,c
  1983  0002FC  261D               	addwf	(??_uart_run+2)^0,f,c
  1984  0002FE  501C               	movf	(??_uart_run+1)^0,w,c
  1985  000300  221E               	addwfc	(??_uart_run+3)^0,f,c
  1986  000302  0E03               	movlw	3
  1987  000304  241D               	addwf	(??_uart_run+2)^0,w,c
  1988  000306  6ED9               	movwf	fsr2l,c
  1989  000308  0E00               	movlw	0
  1990  00030A  201E               	addwfc	(??_uart_run+3)^0,w,c
  1991  00030C  6EDA               	movwf	fsr2h,c
  1992  00030E  51FA               	movf	uart_run@i& (0+255),w,b
  1993  000310  25F4               	addwf	uart_run@addr& (0+255),w,b
  1994  000312  6E1F               	movwf	(??_uart_run+4)^0,c
  1995  000314  51FB               	movf	(uart_run@i+1)& (0+255),w,b
  1996  000316  21F5               	addwfc	(uart_run@addr+1)& (0+255),w,b
  1997  000318  6E20               	movwf	(??_uart_run+5)^0,c
  1998  00031A  90D8               	bcf	status,0,c
  1999  00031C  361F               	rlcf	(??_uart_run+4)^0,f,c
  2000  00031E  3620               	rlcf	(??_uart_run+5)^0,f,c
  2001  000320  0E60               	movlw	low _Modbus_Holding_Register
  2002  000322  241F               	addwf	(??_uart_run+4)^0,w,c
  2003  000324  6EE1               	movwf	fsr1l,c
  2004  000326  0E00               	movlw	high _Modbus_Holding_Register
  2005  000328  2020               	addwfc	(??_uart_run+5)^0,w,c
  2006  00032A  6EE2               	movwf	fsr1h,c
  2007  00032C  CFE6 F021          	movff	postinc1,??_uart_run+6
  2008  000330  CFE5 F022          	movff	postdec1,??_uart_run+7
  2009  000334  C022  F021         	movff	??_uart_run+7,??_uart_run+6
  2010  000338  6A22               	clrf	(??_uart_run+7)^0,c
  2011  00033A  5021               	movf	(??_uart_run+6)^0,w,c
  2012  00033C  6EDF               	movwf	indf2,c
  2013                           
  2014                           ;main.c: 341: tran->Reply01_04.buf[i*2+1]=Modbus_Holding_Register[addr+i]&0xff;
  2015  00033E  51FA               	movf	uart_run@i& (0+255),w,b
  2016  000340  25F4               	addwf	uart_run@addr& (0+255),w,b
  2017  000342  6E1B               	movwf	??_uart_run^0,c
  2018  000344  51FB               	movf	(uart_run@i+1)& (0+255),w,b
  2019  000346  21F5               	addwfc	(uart_run@addr+1)& (0+255),w,b
  2020  000348  6E1C               	movwf	(??_uart_run+1)^0,c
  2021  00034A  90D8               	bcf	status,0,c
  2022  00034C  361B               	rlcf	??_uart_run^0,f,c
  2023  00034E  361C               	rlcf	(??_uart_run+1)^0,f,c
  2024  000350  0E60               	movlw	low _Modbus_Holding_Register
  2025  000352  241B               	addwf	??_uart_run^0,w,c
  2026  000354  6ED9               	movwf	fsr2l,c
  2027  000356  0E00               	movlw	high _Modbus_Holding_Register
  2028  000358  201C               	addwfc	(??_uart_run+1)^0,w,c
  2029  00035A  6EDA               	movwf	fsr2h,c
  2030  00035C  C1FA  F01D         	movff	uart_run@i,??_uart_run+2
  2031  000360  C1FB  F01E         	movff	uart_run@i+1,??_uart_run+3
  2032  000364  90D8               	bcf	status,0,c
  2033  000366  361D               	rlcf	(??_uart_run+2)^0,f,c
  2034  000368  361E               	rlcf	(??_uart_run+3)^0,f,c
  2035  00036A  C1FC  F01F         	movff	uart_run@tran,??_uart_run+4
  2036  00036E  C1FD  F020         	movff	uart_run@tran+1,??_uart_run+5
  2037  000372  501D               	movf	(??_uart_run+2)^0,w,c
  2038  000374  261F               	addwf	(??_uart_run+4)^0,f,c
  2039  000376  501E               	movf	(??_uart_run+3)^0,w,c
  2040  000378  2220               	addwfc	(??_uart_run+5)^0,f,c
  2041  00037A  0E04               	movlw	4
  2042  00037C  241F               	addwf	(??_uart_run+4)^0,w,c
  2043  00037E  6EE1               	movwf	fsr1l,c
  2044  000380  0E00               	movlw	0
  2045  000382  2020               	addwfc	(??_uart_run+5)^0,w,c
  2046  000384  6EE2               	movwf	fsr1h,c
  2047  000386  CFDF FFE7          	movff	indf2,indf1
  2048                           
  2049                           ; BSR set to: 1
  2050  00038A  4BFA               	infsnz	uart_run@i& (0+255),f,b
  2051  00038C  2BFB               	incf	(uart_run@i+1)& (0+255),f,b
  2052  00038E                     l3457:
  2053                           
  2054                           ; BSR set to: 1
  2055  00038E  51F6               	movf	uart_run@len& (0+255),w,b
  2056  000390  5DFA               	subwf	uart_run@i& (0+255),w,b
  2057  000392  51F7               	movf	(uart_run@len+1)& (0+255),w,b
  2058  000394  59FB               	subwfb	(uart_run@i+1)& (0+255),w,b
  2059  000396  A0D8               	btfss	status,0,c
  2060  000398  D7A5               	goto	l3453
  2061                           
  2062                           ; BSR set to: 1
  2063                           ;main.c: 342: };main.c: 344: crc=crcGen(eusart1TxBuffer,len*2+3);
  2064  00039A  0E40               	movlw	low _eusart1TxBuffer
  2065  00039C  6E0C               	movwf	crcGen@commandBuffer^0,c
  2066  00039E  0E01               	movlw	high _eusart1TxBuffer
  2067  0003A0  6E0D               	movwf	(crcGen@commandBuffer+1)^0,c
  2068  0003A2  51F6               	movf	uart_run@len& (0+255),w,b
  2069  0003A4  0D02               	mullw	2
  2070  0003A6  50F3               	movf	243,w,c
  2071  0003A8  0F03               	addlw	3
  2072  0003AA  6E0E               	movwf	crcGen@dataLen^0,c
  2073  0003AC  EC8C  F007         	call	_crcGen	;wreg free
  2074  0003B0  C00C  F1F2         	movff	?_crcGen,uart_run@crc
  2075  0003B4  C00D  F1F3         	movff	?_crcGen+1,uart_run@crc+1
  2076                           
  2077                           ;main.c: 345: tran->Reply01_04.buf[len*2+1]=crc>>8;
  2078  0003B8  C1F6  F01B         	movff	uart_run@len,??_uart_run
  2079  0003BC  C1F7  F01C         	movff	uart_run@len+1,??_uart_run+1
  2080  0003C0  90D8               	bcf	status,0,c
  2081  0003C2  361B               	rlcf	??_uart_run^0,f,c
  2082  0003C4  361C               	rlcf	(??_uart_run+1)^0,f,c
  2083  0003C6  C1FC  F01D         	movff	uart_run@tran,??_uart_run+2
  2084  0003CA  C1FD  F01E         	movff	uart_run@tran+1,??_uart_run+3
  2085  0003CE  501B               	movf	??_uart_run^0,w,c
  2086  0003D0  261D               	addwf	(??_uart_run+2)^0,f,c
  2087  0003D2  501C               	movf	(??_uart_run+1)^0,w,c
  2088  0003D4  221E               	addwfc	(??_uart_run+3)^0,f,c
  2089  0003D6  0E04               	movlw	4
  2090  0003D8  241D               	addwf	(??_uart_run+2)^0,w,c
  2091  0003DA  6ED9               	movwf	fsr2l,c
  2092  0003DC  0E00               	movlw	0
  2093  0003DE  201E               	addwfc	(??_uart_run+3)^0,w,c
  2094  0003E0  6EDA               	movwf	fsr2h,c
  2095  0003E2  0101               	movlb	1	; () banked
  2096  0003E4  51F3               	movf	(uart_run@crc+1)& (0+255),w,b
  2097  0003E6  6EDF               	movwf	indf2,c
  2098                           
  2099                           ; BSR set to: 1
  2100                           ;main.c: 346: tran->Reply01_04.buf[len*2]=crc&0xff;
  2101  0003E8  C1F6  F01B         	movff	uart_run@len,??_uart_run
  2102  0003EC  C1F7  F01C         	movff	uart_run@len+1,??_uart_run+1
  2103  0003F0  90D8               	bcf	status,0,c
  2104  0003F2  361B               	rlcf	??_uart_run^0,f,c
  2105  0003F4  361C               	rlcf	(??_uart_run+1)^0,f,c
  2106  0003F6  C1FC  F01D         	movff	uart_run@tran,??_uart_run+2
  2107  0003FA  C1FD  F01E         	movff	uart_run@tran+1,??_uart_run+3
  2108  0003FE  501B               	movf	??_uart_run^0,w,c
  2109  000400  261D               	addwf	(??_uart_run+2)^0,f,c
  2110  000402  501C               	movf	(??_uart_run+1)^0,w,c
  2111  000404  221E               	addwfc	(??_uart_run+3)^0,f,c
  2112  000406  0E03               	movlw	3
  2113  000408  241D               	addwf	(??_uart_run+2)^0,w,c
  2114  00040A  6ED9               	movwf	fsr2l,c
  2115  00040C  0E00               	movlw	0
  2116  00040E  201E               	addwfc	(??_uart_run+3)^0,w,c
  2117  000410  6EDA               	movwf	fsr2h,c
  2118  000412  C1F2  FFDF         	movff	uart_run@crc,indf2
  2119                           
  2120                           ; BSR set to: 1
  2121                           ;main.c: 348: eusart1TxBufferRemaining=sizeof(eusart1TxBuffer)-len*2-5;
  2122  000416  51F6               	movf	uart_run@len& (0+255),w,b
  2123  000418  0DFE               	mullw	-2
  2124  00041A  50F3               	movf	243,w,c
  2125  00041C  0F87               	addlw	135
  2126  00041E  D0B6               	goto	L6
  2127  000420                     l3467:
  2128                           
  2129                           ; BSR set to: 1
  2130                           ;main.c: 352: addr=(recv->Reply05_06.Address_Hi<<8)+recv->Reply05_06.Address_Lo;
  2131  000420  EE20 F003          	lfsr	2,3
  2132  000424  51F8               	movf	uart_run@recv& (0+255),w,b
  2133  000426  26D9               	addwf	fsr2l,f,c
  2134  000428  51F9               	movf	(uart_run@recv+1)& (0+255),w,b
  2135  00042A  22DA               	addwfc	fsr2h,f,c
  2136  00042C  50DF               	movf	indf2,w,c
  2137  00042E  6E1B               	movwf	??_uart_run^0,c
  2138  000430  EE20 F002          	lfsr	2,2
  2139  000434  51F8               	movf	uart_run@recv& (0+255),w,b
  2140  000436  26D9               	addwf	fsr2l,f,c
  2141  000438  51F9               	movf	(uart_run@recv+1)& (0+255),w,b
  2142  00043A  22DA               	addwfc	fsr2h,f,c
  2143  00043C  50DF               	movf	indf2,w,c
  2144  00043E  6E1C               	movwf	(??_uart_run+1)^0,c
  2145  000440  501C               	movf	(??_uart_run+1)^0,w,c
  2146  000442  6E1E               	movwf	(??_uart_run+3)^0,c
  2147  000444  6A1D               	clrf	(??_uart_run+2)^0,c
  2148  000446  501B               	movf	??_uart_run^0,w,c
  2149  000448  241D               	addwf	(??_uart_run+2)^0,w,c
  2150  00044A  6FF4               	movwf	uart_run@addr& (0+255),b
  2151  00044C  0E00               	movlw	0
  2152  00044E  201E               	addwfc	(??_uart_run+3)^0,w,c
  2153  000450  6FF5               	movwf	(uart_run@addr+1)& (0+255),b
  2154                           
  2155                           ;main.c: 353: data=(recv->Reply05_06.data_Hi<<8)+recv->Reply05_06.data_Lo;
  2156  000452  EE20 F005          	lfsr	2,5
  2157  000456  51F8               	movf	uart_run@recv& (0+255),w,b
  2158  000458  26D9               	addwf	fsr2l,f,c
  2159  00045A  51F9               	movf	(uart_run@recv+1)& (0+255),w,b
  2160  00045C  22DA               	addwfc	fsr2h,f,c
  2161  00045E  50DF               	movf	indf2,w,c
  2162  000460  6E1B               	movwf	??_uart_run^0,c
  2163  000462  EE20 F004          	lfsr	2,4
  2164  000466  51F8               	movf	uart_run@recv& (0+255),w,b
  2165  000468  26D9               	addwf	fsr2l,f,c
  2166  00046A  51F9               	movf	(uart_run@recv+1)& (0+255),w,b
  2167  00046C  22DA               	addwfc	fsr2h,f,c
  2168  00046E  50DF               	movf	indf2,w,c
  2169  000470  6E1C               	movwf	(??_uart_run+1)^0,c
  2170  000472  501C               	movf	(??_uart_run+1)^0,w,c
  2171  000474  6E1E               	movwf	(??_uart_run+3)^0,c
  2172  000476  6A1D               	clrf	(??_uart_run+2)^0,c
  2173  000478  501B               	movf	??_uart_run^0,w,c
  2174  00047A  241D               	addwf	(??_uart_run+2)^0,w,c
  2175  00047C  6FF0               	movwf	uart_run@data& (0+255),b
  2176  00047E  0E00               	movlw	0
  2177  000480  201E               	addwfc	(??_uart_run+3)^0,w,c
  2178  000482  6FF1               	movwf	(uart_run@data+1)& (0+255),b
  2179                           
  2180                           ; BSR set to: 1
  2181                           ;main.c: 354: string_tx_uart2("code:06");
  2182  000484  0EC9               	movlw	low STR_11
  2183  000486  6E0D               	movwf	string_tx_uart2@text^0,c
  2184  000488  0E1F               	movlw	high STR_11
  2185  00048A  6E0E               	movwf	(string_tx_uart2@text+1)^0,c
  2186  00048C  EC57  F008         	call	_string_tx_uart2	;wreg free
  2187                           
  2188                           ;main.c: 355: string_tx_uart2(" addr:");
  2189  000490  0EE6               	movlw	low STR_8
  2190  000492  6E0D               	movwf	string_tx_uart2@text^0,c
  2191  000494  0E1F               	movlw	high STR_8
  2192  000496  6E0E               	movwf	(string_tx_uart2@text+1)^0,c
  2193  000498  EC57  F008         	call	_string_tx_uart2	;wreg free
  2194                           
  2195                           ;main.c: 356: uint_tx_uart2(addr,4);
  2196  00049C  C1F4  F00D         	movff	uart_run@addr,uint_tx_uart2@number
  2197  0004A0  C1F5  F00E         	movff	uart_run@addr+1,uint_tx_uart2@number+1
  2198  0004A4  6A0F               	clrf	(uint_tx_uart2@number+2)^0,c
  2199  0004A6  6A10               	clrf	(uint_tx_uart2@number+3)^0,c
  2200  0004A8  0E04               	movlw	4
  2201  0004AA  6E11               	movwf	uint_tx_uart2@len^0,c
  2202  0004AC  EC42  F005         	call	_uint_tx_uart2	;wreg free
  2203                           
  2204                           ;main.c: 357: string_tx_uart2(" data:");
  2205  0004B0  0EDF               	movlw	low STR_13
  2206  0004B2  6E0D               	movwf	string_tx_uart2@text^0,c
  2207  0004B4  0E1F               	movlw	high STR_13
  2208  0004B6  6E0E               	movwf	(string_tx_uart2@text+1)^0,c
  2209  0004B8  EC57  F008         	call	_string_tx_uart2	;wreg free
  2210                           
  2211                           ;main.c: 358: uint_tx_uart2(data,4);
  2212  0004BC  C1F0  F00D         	movff	uart_run@data,uint_tx_uart2@number
  2213  0004C0  C1F1  F00E         	movff	uart_run@data+1,uint_tx_uart2@number+1
  2214  0004C4  6A0F               	clrf	(uint_tx_uart2@number+2)^0,c
  2215  0004C6  6A10               	clrf	(uint_tx_uart2@number+3)^0,c
  2216  0004C8  0E04               	movlw	4
  2217  0004CA  6E11               	movwf	uint_tx_uart2@len^0,c
  2218  0004CC  EC42  F005         	call	_uint_tx_uart2	;wreg free
  2219                           
  2220                           ;main.c: 359: string_tx_uart2("\n");
  2221  0004D0  0ED6               	movlw	low (STR_6+5)
  2222  0004D2  6E0D               	movwf	string_tx_uart2@text^0,c
  2223  0004D4  0E1F               	movlw	high (STR_6+5)
  2224  0004D6  6E0E               	movwf	(string_tx_uart2@text+1)^0,c
  2225  0004D8  EC57  F008         	call	_string_tx_uart2	;wreg free
  2226                           
  2227                           ;main.c: 361: if(addr>=66)
  2228  0004DC  0101               	movlb	1	; () banked
  2229  0004DE  51F5               	movf	(uart_run@addr+1)& (0+255),w,b
  2230  0004E0  E104               	bnz	u1920
  2231  0004E2  0E42               	movlw	66
  2232  0004E4  5DF4               	subwf	uart_run@addr& (0+255),w,b
  2233  0004E6  A0D8               	btfss	status,0,c
  2234  0004E8  D026               	goto	l3495
  2235  0004EA                     u1920:
  2236                           
  2237                           ; BSR set to: 1
  2238                           ;main.c: 362: {;main.c: 363: tran->CMD.DeviceAddress=0xff;
  2239  0004EA  C1FC  FFD9         	movff	uart_run@tran,fsr2l
  2240  0004EE  C1FD  FFDA         	movff	uart_run@tran+1,fsr2h
  2241  0004F2  0EFF               	movlw	255
  2242  0004F4  6EDF               	movwf	indf2,c
  2243                           
  2244                           ; BSR set to: 1
  2245                           ;main.c: 364: tran->CMD.func=0x86;
  2246  0004F6  EE20 F001          	lfsr	2,1
  2247  0004FA  51FC               	movf	uart_run@tran& (0+255),w,b
  2248  0004FC  26D9               	addwf	fsr2l,f,c
  2249  0004FE  51FD               	movf	(uart_run@tran+1)& (0+255),w,b
  2250  000500  22DA               	addwfc	fsr2h,f,c
  2251  000502  0E86               	movlw	134
  2252  000504  6EDF               	movwf	indf2,c
  2253                           
  2254                           ; BSR set to: 1
  2255                           ;main.c: 365: tran->CMD.buf[0]=0x02;
  2256  000506  EE20 F002          	lfsr	2,2
  2257  00050A  51FC               	movf	uart_run@tran& (0+255),w,b
  2258  00050C  26D9               	addwf	fsr2l,f,c
  2259  00050E  51FD               	movf	(uart_run@tran+1)& (0+255),w,b
  2260  000510  22DA               	addwfc	fsr2h,f,c
  2261  000512  0E02               	movlw	2
  2262  000514  6EDF               	movwf	indf2,c
  2263                           
  2264                           ; BSR set to: 1
  2265                           ;main.c: 366: tran->CMD.buf[2]=0x7E;
  2266  000516  EE20 F004          	lfsr	2,4
  2267  00051A  51FC               	movf	uart_run@tran& (0+255),w,b
  2268  00051C  26D9               	addwf	fsr2l,f,c
  2269  00051E  51FD               	movf	(uart_run@tran+1)& (0+255),w,b
  2270  000520  22DA               	addwfc	fsr2h,f,c
  2271  000522  0E7E               	movlw	126
  2272  000524  6EDF               	movwf	indf2,c
  2273                           
  2274                           ; BSR set to: 1
  2275                           ;main.c: 367: tran->CMD.buf[1]=0x72;
  2276  000526  EE20 F003          	lfsr	2,3
  2277  00052A  51FC               	movf	uart_run@tran& (0+255),w,b
  2278  00052C  26D9               	addwf	fsr2l,f,c
  2279  00052E  51FD               	movf	(uart_run@tran+1)& (0+255),w,b
  2280  000530  22DA               	addwfc	fsr2h,f,c
  2281  000532  0E72               	movlw	114
  2282  000534  D6B8               	goto	L7
  2283  000536                     l3495:
  2284                           
  2285                           ; BSR set to: 1
  2286                           ;main.c: 370: };main.c: 372: Modbus_Holding_Register[addr]=data;
  2287  000536  90D8               	bcf	status,0,c
  2288  000538  35F4               	rlcf	uart_run@addr& (0+255),w,b
  2289  00053A  6ED9               	movwf	fsr2l,c
  2290  00053C  35F5               	rlcf	(uart_run@addr+1)& (0+255),w,b
  2291  00053E  6EDA               	movwf	fsr2h,c
  2292  000540  0E60               	movlw	low _Modbus_Holding_Register
  2293  000542  26D9               	addwf	fsr2l,f,c
  2294  000544  0E00               	movlw	high _Modbus_Holding_Register
  2295  000546  22DA               	addwfc	fsr2h,f,c
  2296  000548  C1F0  FFDE         	movff	uart_run@data,postinc2
  2297  00054C  C1F1  FFDD         	movff	uart_run@data+1,postdec2
  2298                           
  2299                           ; BSR set to: 1
  2300                           ;main.c: 373: check_register();
  2301  000550  EC0C  F008         	call	_check_register	;wreg free
  2302                           
  2303                           ;main.c: 375: for(i=0;i<8;i++)
  2304  000554  0E00               	movlw	0
  2305  000556  0101               	movlb	1	; () banked
  2306  000558  6FFB               	movwf	(uart_run@i+1)& (0+255),b
  2307  00055A  0E00               	movlw	0
  2308  00055C  6FFA               	movwf	uart_run@i& (0+255),b
  2309  00055E                     l3505:
  2310                           
  2311                           ; BSR set to: 1
  2312                           ;main.c: 376: eusart1TxBuffer[i]=eusart1RxBuffer[i];
  2313  00055E  0ECC               	movlw	low _eusart1RxBuffer
  2314  000560  25FA               	addwf	uart_run@i& (0+255),w,b
  2315  000562  6ED9               	movwf	fsr2l,c
  2316  000564  0E01               	movlw	high _eusart1RxBuffer
  2317  000566  21FB               	addwfc	(uart_run@i+1)& (0+255),w,b
  2318  000568  6EDA               	movwf	fsr2h,c
  2319  00056A  0E40               	movlw	low _eusart1TxBuffer
  2320  00056C  25FA               	addwf	uart_run@i& (0+255),w,b
  2321  00056E  6EE1               	movwf	fsr1l,c
  2322  000570  0E01               	movlw	high _eusart1TxBuffer
  2323  000572  21FB               	addwfc	(uart_run@i+1)& (0+255),w,b
  2324  000574  6EE2               	movwf	fsr1h,c
  2325  000576  CFDF FFE7          	movff	indf2,indf1
  2326                           
  2327                           ; BSR set to: 1
  2328  00057A  4BFA               	infsnz	uart_run@i& (0+255),f,b
  2329  00057C  2BFB               	incf	(uart_run@i+1)& (0+255),f,b
  2330                           
  2331                           ; BSR set to: 1
  2332  00057E  51FB               	movf	(uart_run@i+1)& (0+255),w,b
  2333  000580  E104               	bnz	u1930
  2334  000582  0E08               	movlw	8
  2335  000584  5DFA               	subwf	uart_run@i& (0+255),w,b
  2336  000586  A0D8               	btfss	status,0,c
  2337  000588  D7EA               	goto	l3505
  2338  00058A                     u1930:
  2339                           
  2340                           ; BSR set to: 1
  2341                           ;main.c: 378: eusart1TxBufferRemaining=sizeof(eusart1TxBuffer)-8;
  2342  00058A  0E84               	movlw	132
  2343  00058C                     L6:
  2344  00058C  6E52               	movwf	_eusart1TxBufferRemaining^0,c	;volatile
  2345                           
  2346                           ;main.c: 379: break;
  2347  00058E  D16D               	goto	l540
  2348  000590                     l3513:
  2349                           
  2350                           ; BSR set to: 1
  2351                           ;main.c: 382: addr=(recv->CMD0F_10.Address_Hi<<8)+recv->CMD0F_10.Address_Lo;
  2352  000590  EE20 F003          	lfsr	2,3
  2353  000594  51F8               	movf	uart_run@recv& (0+255),w,b
  2354  000596  26D9               	addwf	fsr2l,f,c
  2355  000598  51F9               	movf	(uart_run@recv+1)& (0+255),w,b
  2356  00059A  22DA               	addwfc	fsr2h,f,c
  2357  00059C  50DF               	movf	indf2,w,c
  2358  00059E  6E1B               	movwf	??_uart_run^0,c
  2359  0005A0  EE20 F002          	lfsr	2,2
  2360  0005A4  51F8               	movf	uart_run@recv& (0+255),w,b
  2361  0005A6  26D9               	addwf	fsr2l,f,c
  2362  0005A8  51F9               	movf	(uart_run@recv+1)& (0+255),w,b
  2363  0005AA  22DA               	addwfc	fsr2h,f,c
  2364  0005AC  50DF               	movf	indf2,w,c
  2365  0005AE  6E1C               	movwf	(??_uart_run+1)^0,c
  2366  0005B0  501C               	movf	(??_uart_run+1)^0,w,c
  2367  0005B2  6E1E               	movwf	(??_uart_run+3)^0,c
  2368  0005B4  6A1D               	clrf	(??_uart_run+2)^0,c
  2369  0005B6  501B               	movf	??_uart_run^0,w,c
  2370  0005B8  241D               	addwf	(??_uart_run+2)^0,w,c
  2371  0005BA  6FF4               	movwf	uart_run@addr& (0+255),b
  2372  0005BC  0E00               	movlw	0
  2373  0005BE  201E               	addwfc	(??_uart_run+3)^0,w,c
  2374  0005C0  6FF5               	movwf	(uart_run@addr+1)& (0+255),b
  2375                           
  2376                           ;main.c: 383: len=recv->CMD0F_10.Byte_count>>1;
  2377  0005C2  EE20 F006          	lfsr	2,6
  2378  0005C6  51F8               	movf	uart_run@recv& (0+255),w,b
  2379  0005C8  26D9               	addwf	fsr2l,f,c
  2380  0005CA  51F9               	movf	(uart_run@recv+1)& (0+255),w,b
  2381  0005CC  22DA               	addwfc	fsr2h,f,c
  2382  0005CE  50DF               	movf	indf2,w,c
  2383  0005D0  6E1B               	movwf	??_uart_run^0,c
  2384  0005D2  90D8               	bcf	status,0,c
  2385  0005D4  321B               	rrcf	??_uart_run^0,f,c
  2386  0005D6  501B               	movf	??_uart_run^0,w,c
  2387  0005D8  6FF6               	movwf	uart_run@len& (0+255),b
  2388  0005DA  6BF7               	clrf	(uart_run@len+1)& (0+255),b
  2389                           
  2390                           ; BSR set to: 1
  2391                           ;main.c: 384: string_tx_uart2("code:10");
  2392  0005DC  0EB9               	movlw	low STR_15
  2393  0005DE  6E0D               	movwf	string_tx_uart2@text^0,c
  2394  0005E0  0E1F               	movlw	high STR_15
  2395  0005E2  6E0E               	movwf	(string_tx_uart2@text+1)^0,c
  2396  0005E4  EC57  F008         	call	_string_tx_uart2	;wreg free
  2397                           
  2398                           ;main.c: 385: string_tx_uart2(" addr:");
  2399  0005E8  0EE6               	movlw	low STR_8
  2400  0005EA  6E0D               	movwf	string_tx_uart2@text^0,c
  2401  0005EC  0E1F               	movlw	high STR_8
  2402  0005EE  6E0E               	movwf	(string_tx_uart2@text+1)^0,c
  2403  0005F0  EC57  F008         	call	_string_tx_uart2	;wreg free
  2404                           
  2405                           ;main.c: 386: uint_tx_uart2(addr,4);
  2406  0005F4  C1F4  F00D         	movff	uart_run@addr,uint_tx_uart2@number
  2407  0005F8  C1F5  F00E         	movff	uart_run@addr+1,uint_tx_uart2@number+1
  2408  0005FC  6A0F               	clrf	(uint_tx_uart2@number+2)^0,c
  2409  0005FE  6A10               	clrf	(uint_tx_uart2@number+3)^0,c
  2410  000600  0E04               	movlw	4
  2411  000602  6E11               	movwf	uint_tx_uart2@len^0,c
  2412  000604  EC42  F005         	call	_uint_tx_uart2	;wreg free
  2413                           
  2414                           ;main.c: 387: string_tx_uart2(" len:");
  2415  000608  0EF3               	movlw	low STR_9
  2416  00060A  6E0D               	movwf	string_tx_uart2@text^0,c
  2417  00060C  0E1F               	movlw	high STR_9
  2418  00060E  6E0E               	movwf	(string_tx_uart2@text+1)^0,c
  2419  000610  EC57  F008         	call	_string_tx_uart2	;wreg free
  2420                           
  2421                           ;main.c: 388: uint_tx_uart2(len,4);
  2422  000614  C1F6  F00D         	movff	uart_run@len,uint_tx_uart2@number
  2423  000618  C1F7  F00E         	movff	uart_run@len+1,uint_tx_uart2@number+1
  2424  00061C  6A0F               	clrf	(uint_tx_uart2@number+2)^0,c
  2425  00061E  6A10               	clrf	(uint_tx_uart2@number+3)^0,c
  2426  000620  0E04               	movlw	4
  2427  000622  6E11               	movwf	uint_tx_uart2@len^0,c
  2428  000624  EC42  F005         	call	_uint_tx_uart2	;wreg free
  2429                           
  2430                           ;main.c: 389: string_tx_uart2("\n");
  2431  000628  0ED6               	movlw	low (STR_6+5)
  2432  00062A  6E0D               	movwf	string_tx_uart2@text^0,c
  2433  00062C  0E1F               	movlw	high (STR_6+5)
  2434  00062E  6E0E               	movwf	(string_tx_uart2@text+1)^0,c
  2435  000630  EC57  F008         	call	_string_tx_uart2	;wreg free
  2436                           
  2437                           ;main.c: 391: if(addr+len>66)
  2438  000634  0101               	movlb	1	; () banked
  2439  000636  51F6               	movf	uart_run@len& (0+255),w,b
  2440  000638  25F4               	addwf	uart_run@addr& (0+255),w,b
  2441  00063A  6E1B               	movwf	??_uart_run^0,c
  2442  00063C  51F7               	movf	(uart_run@len+1)& (0+255),w,b
  2443  00063E  21F5               	addwfc	(uart_run@addr+1)& (0+255),w,b
  2444  000640  6E1C               	movwf	(??_uart_run+1)^0,c
  2445  000642  501C               	movf	(??_uart_run+1)^0,w,c
  2446  000644  E104               	bnz	u1940
  2447  000646  0E43               	movlw	67
  2448  000648  5C1B               	subwf	??_uart_run^0,w,c
  2449  00064A  A0D8               	btfss	status,0,c
  2450  00064C  D026               	goto	l3541
  2451  00064E                     u1940:
  2452                           
  2453                           ; BSR set to: 1
  2454                           ;main.c: 392: {;main.c: 393: tran->CMD.DeviceAddress=0xff;
  2455  00064E  C1FC  FFD9         	movff	uart_run@tran,fsr2l
  2456  000652  C1FD  FFDA         	movff	uart_run@tran+1,fsr2h
  2457  000656  0EFF               	movlw	255
  2458  000658  6EDF               	movwf	indf2,c
  2459                           
  2460                           ; BSR set to: 1
  2461                           ;main.c: 394: tran->CMD.func=0x90;
  2462  00065A  EE20 F001          	lfsr	2,1
  2463  00065E  51FC               	movf	uart_run@tran& (0+255),w,b
  2464  000660  26D9               	addwf	fsr2l,f,c
  2465  000662  51FD               	movf	(uart_run@tran+1)& (0+255),w,b
  2466  000664  22DA               	addwfc	fsr2h,f,c
  2467  000666  0E90               	movlw	144
  2468  000668  6EDF               	movwf	indf2,c
  2469                           
  2470                           ; BSR set to: 1
  2471                           ;main.c: 395: tran->CMD.buf[0]=0x02;
  2472  00066A  EE20 F002          	lfsr	2,2
  2473  00066E  51FC               	movf	uart_run@tran& (0+255),w,b
  2474  000670  26D9               	addwf	fsr2l,f,c
  2475  000672  51FD               	movf	(uart_run@tran+1)& (0+255),w,b
  2476  000674  22DA               	addwfc	fsr2h,f,c
  2477  000676  0E02               	movlw	2
  2478  000678  6EDF               	movwf	indf2,c
  2479                           
  2480                           ; BSR set to: 1
  2481                           ;main.c: 396: tran->CMD.buf[2]=0x1E;
  2482  00067A  EE20 F004          	lfsr	2,4
  2483  00067E  51FC               	movf	uart_run@tran& (0+255),w,b
  2484  000680  26D9               	addwf	fsr2l,f,c
  2485  000682  51FD               	movf	(uart_run@tran+1)& (0+255),w,b
  2486  000684  22DA               	addwfc	fsr2h,f,c
  2487  000686  0E1E               	movlw	30
  2488  000688  6EDF               	movwf	indf2,c
  2489                           
  2490                           ; BSR set to: 1
  2491                           ;main.c: 397: tran->CMD.buf[1]=0x7C;
  2492  00068A  EE20 F003          	lfsr	2,3
  2493  00068E  51FC               	movf	uart_run@tran& (0+255),w,b
  2494  000690  26D9               	addwf	fsr2l,f,c
  2495  000692  51FD               	movf	(uart_run@tran+1)& (0+255),w,b
  2496  000694  22DA               	addwfc	fsr2h,f,c
  2497  000696  0E7C               	movlw	124
  2498  000698  D606               	goto	L7
  2499  00069A                     l3541:
  2500                           
  2501                           ; BSR set to: 1
  2502                           ;main.c: 400: };main.c: 402: for(i=0;i<len;i++)
  2503  00069A  0E00               	movlw	0
  2504  00069C  6FFB               	movwf	(uart_run@i+1)& (0+255),b
  2505  00069E  0E00               	movlw	0
  2506  0006A0  6FFA               	movwf	uart_run@i& (0+255),b
  2507  0006A2  D04A               	goto	l3547
  2508  0006A4                     l3543:
  2509                           
  2510                           ; BSR set to: 1
  2511                           ;main.c: 403: Modbus_Holding_Register[addr+i]=(recv->CMD0F_10.buf[i*2]<<8)+recv->CMD0F_1
      +                          0.buf[i*2+1];
  2512  0006A4  C1FA  F01B         	movff	uart_run@i,??_uart_run
  2513  0006A8  C1FB  F01C         	movff	uart_run@i+1,??_uart_run+1
  2514  0006AC  90D8               	bcf	status,0,c
  2515  0006AE  361B               	rlcf	??_uart_run^0,f,c
  2516  0006B0  361C               	rlcf	(??_uart_run+1)^0,f,c
  2517  0006B2  C1F8  F01D         	movff	uart_run@recv,??_uart_run+2
  2518  0006B6  C1F9  F01E         	movff	uart_run@recv+1,??_uart_run+3
  2519  0006BA  501B               	movf	??_uart_run^0,w,c
  2520  0006BC  261D               	addwf	(??_uart_run+2)^0,f,c
  2521  0006BE  501C               	movf	(??_uart_run+1)^0,w,c
  2522  0006C0  221E               	addwfc	(??_uart_run+3)^0,f,c
  2523  0006C2  0E07               	movlw	7
  2524  0006C4  241D               	addwf	(??_uart_run+2)^0,w,c
  2525  0006C6  6ED9               	movwf	fsr2l,c
  2526  0006C8  0E00               	movlw	0
  2527  0006CA  201E               	addwfc	(??_uart_run+3)^0,w,c
  2528  0006CC  6EDA               	movwf	fsr2h,c
  2529  0006CE  50DF               	movf	indf2,w,c
  2530  0006D0  6E1F               	movwf	(??_uart_run+4)^0,c
  2531  0006D2  501F               	movf	(??_uart_run+4)^0,w,c
  2532  0006D4  6E21               	movwf	(??_uart_run+6)^0,c
  2533  0006D6  6A20               	clrf	(??_uart_run+5)^0,c
  2534  0006D8  C1FA  F022         	movff	uart_run@i,??_uart_run+7
  2535  0006DC  C1FB  F023         	movff	uart_run@i+1,??_uart_run+8
  2536  0006E0  90D8               	bcf	status,0,c
  2537  0006E2  3622               	rlcf	(??_uart_run+7)^0,f,c
  2538  0006E4  3623               	rlcf	(??_uart_run+8)^0,f,c
  2539  0006E6  C1F8  F024         	movff	uart_run@recv,??_uart_run+9
  2540  0006EA  C1F9  F025         	movff	uart_run@recv+1,??_uart_run+10
  2541  0006EE  5022               	movf	(??_uart_run+7)^0,w,c
  2542  0006F0  2624               	addwf	(??_uart_run+9)^0,f,c
  2543  0006F2  5023               	movf	(??_uart_run+8)^0,w,c
  2544  0006F4  2225               	addwfc	(??_uart_run+10)^0,f,c
  2545  0006F6  0E08               	movlw	8
  2546  0006F8  2424               	addwf	(??_uart_run+9)^0,w,c
  2547  0006FA  6ED9               	movwf	fsr2l,c
  2548  0006FC  0E00               	movlw	0
  2549  0006FE  2025               	addwfc	(??_uart_run+10)^0,w,c
  2550  000700  6EDA               	movwf	fsr2h,c
  2551  000702  50DF               	movf	indf2,w,c
  2552  000704  6E26               	movwf	(??_uart_run+11)^0,c
  2553  000706  5026               	movf	(??_uart_run+11)^0,w,c
  2554  000708  2620               	addwf	(??_uart_run+5)^0,f,c
  2555  00070A  0E00               	movlw	0
  2556  00070C  2221               	addwfc	(??_uart_run+6)^0,f,c
  2557  00070E  51FA               	movf	uart_run@i& (0+255),w,b
  2558  000710  25F4               	addwf	uart_run@addr& (0+255),w,b
  2559  000712  6E27               	movwf	(??_uart_run+12)^0,c
  2560  000714  51FB               	movf	(uart_run@i+1)& (0+255),w,b
  2561  000716  21F5               	addwfc	(uart_run@addr+1)& (0+255),w,b
  2562  000718  6E28               	movwf	(??_uart_run+13)^0,c
  2563  00071A  90D8               	bcf	status,0,c
  2564  00071C  3627               	rlcf	(??_uart_run+12)^0,f,c
  2565  00071E  3628               	rlcf	(??_uart_run+13)^0,f,c
  2566  000720  0E60               	movlw	low _Modbus_Holding_Register
  2567  000722  2427               	addwf	(??_uart_run+12)^0,w,c
  2568  000724  6ED9               	movwf	fsr2l,c
  2569  000726  0E00               	movlw	high _Modbus_Holding_Register
  2570  000728  2028               	addwfc	(??_uart_run+13)^0,w,c
  2571  00072A  6EDA               	movwf	fsr2h,c
  2572  00072C  C020  FFDE         	movff	??_uart_run+5,postinc2
  2573  000730  C021  FFDD         	movff	??_uart_run+6,postdec2
  2574                           
  2575                           ; BSR set to: 1
  2576  000734  4BFA               	infsnz	uart_run@i& (0+255),f,b
  2577  000736  2BFB               	incf	(uart_run@i+1)& (0+255),f,b
  2578  000738                     l3547:
  2579                           
  2580                           ; BSR set to: 1
  2581  000738  51F6               	movf	uart_run@len& (0+255),w,b
  2582  00073A  5DFA               	subwf	uart_run@i& (0+255),w,b
  2583  00073C  51F7               	movf	(uart_run@len+1)& (0+255),w,b
  2584  00073E  59FB               	subwfb	(uart_run@i+1)& (0+255),w,b
  2585  000740  A0D8               	btfss	status,0,c
  2586  000742  D7B0               	goto	l3543
  2587                           
  2588                           ; BSR set to: 1
  2589                           ;main.c: 404: check_register();
  2590  000744  EC0C  F008         	call	_check_register	;wreg free
  2591                           
  2592                           ;main.c: 406: for(i=0;i<6;i++)
  2593  000748  0E00               	movlw	0
  2594  00074A  0101               	movlb	1	; () banked
  2595  00074C  6FFB               	movwf	(uart_run@i+1)& (0+255),b
  2596  00074E  0E00               	movlw	0
  2597  000750  6FFA               	movwf	uart_run@i& (0+255),b
  2598  000752                     l3557:
  2599                           
  2600                           ; BSR set to: 1
  2601                           ;main.c: 407: eusart1TxBuffer[i]=eusart1RxBuffer[i];
  2602  000752  0ECC               	movlw	low _eusart1RxBuffer
  2603  000754  25FA               	addwf	uart_run@i& (0+255),w,b
  2604  000756  6ED9               	movwf	fsr2l,c
  2605  000758  0E01               	movlw	high _eusart1RxBuffer
  2606  00075A  21FB               	addwfc	(uart_run@i+1)& (0+255),w,b
  2607  00075C  6EDA               	movwf	fsr2h,c
  2608  00075E  0E40               	movlw	low _eusart1TxBuffer
  2609  000760  25FA               	addwf	uart_run@i& (0+255),w,b
  2610  000762  6EE1               	movwf	fsr1l,c
  2611  000764  0E01               	movlw	high _eusart1TxBuffer
  2612  000766  21FB               	addwfc	(uart_run@i+1)& (0+255),w,b
  2613  000768  6EE2               	movwf	fsr1h,c
  2614  00076A  CFDF FFE7          	movff	indf2,indf1
  2615                           
  2616                           ; BSR set to: 1
  2617  00076E  4BFA               	infsnz	uart_run@i& (0+255),f,b
  2618  000770  2BFB               	incf	(uart_run@i+1)& (0+255),f,b
  2619                           
  2620                           ; BSR set to: 1
  2621  000772  51FB               	movf	(uart_run@i+1)& (0+255),w,b
  2622  000774  E104               	bnz	u1960
  2623  000776  0E06               	movlw	6
  2624  000778  5DFA               	subwf	uart_run@i& (0+255),w,b
  2625  00077A  A0D8               	btfss	status,0,c
  2626  00077C  D7EA               	goto	l3557
  2627  00077E                     u1960:
  2628                           
  2629                           ; BSR set to: 1
  2630                           ;main.c: 409: crc=crcGen(eusart1TxBuffer,6);
  2631  00077E  0E40               	movlw	low _eusart1TxBuffer
  2632  000780  6E0C               	movwf	crcGen@commandBuffer^0,c
  2633  000782  0E01               	movlw	high _eusart1TxBuffer
  2634  000784  6E0D               	movwf	(crcGen@commandBuffer+1)^0,c
  2635  000786  0E06               	movlw	6
  2636  000788  6E0E               	movwf	crcGen@dataLen^0,c
  2637  00078A  EC8C  F007         	call	_crcGen	;wreg free
  2638  00078E  C00C  F1F2         	movff	?_crcGen,uart_run@crc
  2639  000792  C00D  F1F3         	movff	?_crcGen+1,uart_run@crc+1
  2640                           
  2641                           ;main.c: 410: eusart1TxBuffer[7]=crc>>8;
  2642  000796  0101               	movlb	1	; () banked
  2643  000798  51F3               	movf	(uart_run@crc+1)& (0+255),w,b
  2644  00079A  6F47               	movwf	(_eusart1TxBuffer+7)& (0+255),b	;volatile
  2645                           
  2646                           ; BSR set to: 1
  2647                           ;main.c: 411: eusart1TxBuffer[6]=crc&0xff;
  2648  00079C  C1F2  F146         	movff	uart_run@crc,_eusart1TxBuffer+6	;volatile
  2649  0007A0  D6F4               	goto	u1930
  2650  0007A2                     l3571:
  2651                           
  2652                           ; BSR set to: 1
  2653                           ;main.c: 417: string_tx_uart2("code:");
  2654  0007A2  0EED               	movlw	low STR_19
  2655  0007A4  6E0D               	movwf	string_tx_uart2@text^0,c
  2656  0007A6  0E1F               	movlw	high STR_19
  2657  0007A8  6E0E               	movwf	(string_tx_uart2@text+1)^0,c
  2658  0007AA  EC57  F008         	call	_string_tx_uart2	;wreg free
  2659                           
  2660                           ;main.c: 418: uint_tx_uart2(eusart1RxBuffer[1],2);
  2661  0007AE  0101               	movlb	1	; () banked
  2662  0007B0  51CD               	movf	(_eusart1RxBuffer+1)& (0+255),w,b	;volatile
  2663  0007B2  6E0D               	movwf	uint_tx_uart2@number^0,c
  2664  0007B4  6A0E               	clrf	(uint_tx_uart2@number+1)^0,c
  2665  0007B6  6A0F               	clrf	(uint_tx_uart2@number+2)^0,c
  2666  0007B8  6A10               	clrf	(uint_tx_uart2@number+3)^0,c
  2667  0007BA  0E02               	movlw	2
  2668  0007BC  6E11               	movwf	uint_tx_uart2@len^0,c
  2669  0007BE  EC42  F005         	call	_uint_tx_uart2	;wreg free
  2670                           
  2671                           ;main.c: 419: string_tx_uart2(" illegal\n");
  2672  0007C2  0EA6               	movlw	low STR_20
  2673  0007C4  6E0D               	movwf	string_tx_uart2@text^0,c
  2674  0007C6  0E1F               	movlw	high STR_20
  2675  0007C8  6E0E               	movwf	(string_tx_uart2@text+1)^0,c
  2676  0007CA  EC57  F008         	call	_string_tx_uart2	;wreg free
  2677                           
  2678                           ;main.c: 420: tran->CMD.DeviceAddress=0xff;
  2679  0007CE  C1FC  FFD9         	movff	uart_run@tran,fsr2l
  2680  0007D2  C1FD  FFDA         	movff	uart_run@tran+1,fsr2h
  2681  0007D6  0EFF               	movlw	255
  2682  0007D8  6EDF               	movwf	indf2,c
  2683                           
  2684                           ;main.c: 421: tran->CMD.func=recv->CMD.func|0x80;
  2685  0007DA  0101               	movlb	1	; () banked
  2686  0007DC  EE20 F001          	lfsr	2,1
  2687  0007E0  51FC               	movf	uart_run@tran& (0+255),w,b
  2688  0007E2  26D9               	addwf	fsr2l,f,c
  2689  0007E4  51FD               	movf	(uart_run@tran+1)& (0+255),w,b
  2690  0007E6  22DA               	addwfc	fsr2h,f,c
  2691  0007E8  EE10 F001          	lfsr	1,1
  2692  0007EC  51F8               	movf	uart_run@recv& (0+255),w,b
  2693  0007EE  26E1               	addwf	fsr1l,f,c
  2694  0007F0  51F9               	movf	(uart_run@recv+1)& (0+255),w,b
  2695  0007F2  22E2               	addwfc	fsr1h,f,c
  2696  0007F4  50E7               	movf	indf1,w,c
  2697  0007F6  0980               	iorlw	128
  2698  0007F8  6EDF               	movwf	indf2,c
  2699                           
  2700                           ; BSR set to: 1
  2701                           ;main.c: 422: tran->CMD.buf[0]=0x01;
  2702  0007FA  EE20 F002          	lfsr	2,2
  2703  0007FE  51FC               	movf	uart_run@tran& (0+255),w,b
  2704  000800  26D9               	addwf	fsr2l,f,c
  2705  000802  51FD               	movf	(uart_run@tran+1)& (0+255),w,b
  2706  000804  22DA               	addwfc	fsr2h,f,c
  2707  000806  0E01               	movlw	1
  2708  000808  6EDF               	movwf	indf2,c
  2709                           
  2710                           ; BSR set to: 1
  2711                           ;main.c: 424: crc=crcGen(eusart1TxBuffer,3);
  2712  00080A  0E40               	movlw	low _eusart1TxBuffer
  2713  00080C  6E0C               	movwf	crcGen@commandBuffer^0,c
  2714  00080E  0E01               	movlw	high _eusart1TxBuffer
  2715  000810  6E0D               	movwf	(crcGen@commandBuffer+1)^0,c
  2716  000812  0E03               	movlw	3
  2717  000814  6E0E               	movwf	crcGen@dataLen^0,c
  2718  000816  EC8C  F007         	call	_crcGen	;wreg free
  2719  00081A  C00C  F1F2         	movff	?_crcGen,uart_run@crc
  2720  00081E  C00D  F1F3         	movff	?_crcGen+1,uart_run@crc+1
  2721                           
  2722                           ;main.c: 425: tran->CMD.buf[2]=crc>>8;
  2723  000822  0101               	movlb	1	; () banked
  2724  000824  EE20 F004          	lfsr	2,4
  2725  000828  51FC               	movf	uart_run@tran& (0+255),w,b
  2726  00082A  26D9               	addwf	fsr2l,f,c
  2727  00082C  51FD               	movf	(uart_run@tran+1)& (0+255),w,b
  2728  00082E  22DA               	addwfc	fsr2h,f,c
  2729  000830  51F3               	movf	(uart_run@crc+1)& (0+255),w,b
  2730  000832  6EDF               	movwf	indf2,c
  2731                           
  2732                           ; BSR set to: 1
  2733                           ;main.c: 426: tran->CMD.buf[1]=crc&0xff;
  2734  000834  EE20 F003          	lfsr	2,3
  2735  000838  51FC               	movf	uart_run@tran& (0+255),w,b
  2736  00083A  26D9               	addwf	fsr2l,f,c
  2737  00083C  51FD               	movf	(uart_run@tran+1)& (0+255),w,b
  2738  00083E  22DA               	addwfc	fsr2h,f,c
  2739  000840  C1F2  FFDF         	movff	uart_run@crc,indf2
  2740  000844  D531               	goto	l3443
  2741  000846                     l3593:
  2742  000846  0101               	movlb	1	; () banked
  2743  000848  EE20 F001          	lfsr	2,1
  2744  00084C  51F8               	movf	uart_run@recv& (0+255),w,b
  2745  00084E  26D9               	addwf	fsr2l,f,c
  2746  000850  51F9               	movf	(uart_run@recv+1)& (0+255),w,b
  2747  000852  22DA               	addwfc	fsr2h,f,c
  2748  000854  50DF               	movf	indf2,w,c
  2749                           
  2750                           ; Switch size 1, requested type "simple"
  2751                           ; Number of cases is 3, Range of values is 3 to 16
  2752                           ; switch strategies available:
  2753                           ; Name         Instructions Cycles
  2754                           ; simple_byte           10     6 (average)
  2755                           ;	Chosen strategy is simple_byte
  2756  000856  0A03               	xorlw	3	; case 3
  2757  000858  B4D8               	btfsc	status,2,c
  2758  00085A  D495               	goto	l3417
  2759  00085C  0A05               	xorlw	5	; case 6
  2760  00085E  B4D8               	btfsc	status,2,c
  2761  000860  D5DF               	goto	l3467
  2762  000862  0A16               	xorlw	22	; case 16
  2763  000864  B4D8               	btfsc	status,2,c
  2764  000866  D694               	goto	l3513
  2765  000868  D79C               	goto	l3571
  2766  00086A                     l540:
  2767                           
  2768                           ; BSR set to: 1
  2769                           ;main.c: 431: LATCbits.LATC5=1;
  2770  00086A  8A8B               	bsf	139,5,c	;volatile
  2771                           
  2772                           ; BSR set to: 1
  2773                           ;main.c: 432: eusart1TxTail = 0;
  2774  00086C  0E00               	movlw	0
  2775  00086E  6E4B               	movwf	_eusart1TxTail^0,c	;volatile
  2776                           
  2777                           ; BSR set to: 1
  2778                           ;main.c: 433: PIE1bits.TX1IE = 1;
  2779  000870  889D               	bsf	157,4,c	;volatile
  2780                           
  2781                           ; BSR set to: 1
  2782                           ;main.c: 434: return 1;
  2783  000872  0E01               	movlw	1
  2784  000874  0012               	return	
  2785  000876                     l3605:
  2786                           
  2787                           ; BSR set to: 1
  2788                           ;main.c: 436: else;main.c: 437: {;main.c: 438: string_tx_uart2("crc:X\n");
  2789  000876  0ED8               	movlw	low STR_21
  2790  000878  6E0D               	movwf	string_tx_uart2@text^0,c
  2791  00087A  0E1F               	movlw	high STR_21
  2792  00087C  6E0E               	movwf	(string_tx_uart2@text+1)^0,c
  2793  00087E  EC57  F008         	call	_string_tx_uart2	;wreg free
  2794  000882  D016               	goto	l3613
  2795  000884                     l3607:
  2796                           
  2797                           ; BSR set to: 1
  2798                           ;main.c: 441: else;main.c: 442: {;main.c: 443: string_tx_uart2("new data, for:");
  2799  000884  0E7E               	movlw	low STR_22
  2800  000886  6E0D               	movwf	string_tx_uart2@text^0,c
  2801  000888  0E1F               	movlw	high STR_22
  2802  00088A  6E0E               	movwf	(string_tx_uart2@text+1)^0,c
  2803  00088C  EC57  F008         	call	_string_tx_uart2	;wreg free
  2804                           
  2805                           ;main.c: 444: uint_tx_uart2(eusart1RxBuffer[0],2);
  2806  000890  0101               	movlb	1	; () banked
  2807  000892  51CC               	movf	_eusart1RxBuffer& (0+255),w,b	;volatile
  2808  000894  6E0D               	movwf	uint_tx_uart2@number^0,c
  2809  000896  6A0E               	clrf	(uint_tx_uart2@number+1)^0,c
  2810  000898  6A0F               	clrf	(uint_tx_uart2@number+2)^0,c
  2811  00089A  6A10               	clrf	(uint_tx_uart2@number+3)^0,c
  2812  00089C  0E02               	movlw	2
  2813  00089E  6E11               	movwf	uint_tx_uart2@len^0,c
  2814  0008A0  EC42  F005         	call	_uint_tx_uart2	;wreg free
  2815                           
  2816                           ;main.c: 445: string_tx_uart2("\n");
  2817  0008A4  0ED6               	movlw	low (STR_6+5)
  2818  0008A6  6E0D               	movwf	string_tx_uart2@text^0,c
  2819  0008A8  0E1F               	movlw	high (STR_6+5)
  2820  0008AA  6E0E               	movwf	(string_tx_uart2@text+1)^0,c
  2821  0008AC  EC57  F008         	call	_string_tx_uart2	;wreg free
  2822  0008B0                     l3613:
  2823                           
  2824                           ;main.c: 446: };main.c: 447: return 0;
  2825  0008B0  0E00               	movlw	0
  2826  0008B2  0012               	return		;funcret
  2827  0008B4                     __end_of_uart_run:
  2828                           	opt callstack 0
  2829                           
  2830 ;; *************** function _uint_tx_uart2 *****************
  2831 ;; Defined at:
  2832 ;;		line 144 in file "main.c"
  2833 ;; Parameters:    Size  Location     Type
  2834 ;;  number          4   12[COMRAM] unsigned long 
  2835 ;;  len             1   16[COMRAM] unsigned char 
  2836 ;; Auto vars:     Size  Location     Type
  2837 ;;  i               1   25[COMRAM] unsigned char 
  2838 ;; Return value:  Size  Location     Type
  2839 ;;                  1    wreg      void 
  2840 ;; Registers used:
  2841 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2842 ;; Tracked objects:
  2843 ;;		On entry : 0/0
  2844 ;;		On exit  : 0/0
  2845 ;;		Unchanged: 0/0
  2846 ;; Data sizes:     COMRAM   BANK0   BANK1
  2847 ;;      Params:         5       0       0
  2848 ;;      Locals:         1       0       0
  2849 ;;      Temps:          8       0       0
  2850 ;;      Totals:        14       0       0
  2851 ;;Total ram usage:       14 bytes
  2852 ;; Hardware stack levels used:    1
  2853 ;; Hardware stack levels required when called:    7
  2854 ;; This function calls:
  2855 ;;		_EUSART2_Write
  2856 ;; This function is called by:
  2857 ;;		_uart_run
  2858 ;; This function uses a non-reentrant model
  2859 ;;
  2860                           
  2861                           	psect	text2
  2862  000A84                     __ptext2:
  2863                           	opt callstack 0
  2864  000A84                     _uint_tx_uart2:
  2865                           	opt callstack 22
  2866                           
  2867                           ;main.c: 146: uint8_t i;;main.c: 147: for(i=len;i>=1;i--)
  2868                           
  2869                           ;incstack = 0
  2870  000A84  C011  F01A         	movff	uint_tx_uart2@len,uint_tx_uart2@i
  2871  000A88                     l3169:
  2872  000A88  501A               	movf	uint_tx_uart2@i^0,w,c
  2873  000A8A  B4D8               	btfsc	status,2,c
  2874  000A8C  0012               	return	
  2875  000A8E  D040               	goto	l3207
  2876  000A90                     l3173:
  2877                           
  2878                           ;main.c: 152: EUSART2_Write('0');
  2879  000A90  0E30               	movlw	48
  2880  000A92  ECB5  F008         	call	_EUSART2_Write
  2881                           
  2882                           ;main.c: 153: break;
  2883  000A96  D09C               	goto	l3209
  2884  000A98                     l3175:
  2885                           
  2886                           ;main.c: 155: EUSART2_Write('1');
  2887  000A98  0E31               	movlw	49
  2888  000A9A  ECB5  F008         	call	_EUSART2_Write
  2889                           
  2890                           ;main.c: 156: break;
  2891  000A9E  D098               	goto	l3209
  2892  000AA0                     l3177:
  2893                           
  2894                           ;main.c: 158: EUSART2_Write('2');
  2895  000AA0  0E32               	movlw	50
  2896  000AA2  ECB5  F008         	call	_EUSART2_Write
  2897                           
  2898                           ;main.c: 159: break;
  2899  000AA6  D094               	goto	l3209
  2900  000AA8                     l3179:
  2901                           
  2902                           ;main.c: 161: EUSART2_Write('3');
  2903  000AA8  0E33               	movlw	51
  2904  000AAA  ECB5  F008         	call	_EUSART2_Write
  2905                           
  2906                           ;main.c: 162: break;
  2907  000AAE  D090               	goto	l3209
  2908  000AB0                     l3181:
  2909                           
  2910                           ;main.c: 164: EUSART2_Write('4');
  2911  000AB0  0E34               	movlw	52
  2912  000AB2  ECB5  F008         	call	_EUSART2_Write
  2913                           
  2914                           ;main.c: 165: break;
  2915  000AB6  D08C               	goto	l3209
  2916  000AB8                     l3183:
  2917                           
  2918                           ;main.c: 167: EUSART2_Write('5');
  2919  000AB8  0E35               	movlw	53
  2920  000ABA  ECB5  F008         	call	_EUSART2_Write
  2921                           
  2922                           ;main.c: 168: break;
  2923  000ABE  D088               	goto	l3209
  2924  000AC0                     l3185:
  2925                           
  2926                           ;main.c: 170: EUSART2_Write('6');
  2927  000AC0  0E36               	movlw	54
  2928  000AC2  ECB5  F008         	call	_EUSART2_Write
  2929                           
  2930                           ;main.c: 171: break;
  2931  000AC6  D084               	goto	l3209
  2932  000AC8                     l3187:
  2933                           
  2934                           ;main.c: 173: EUSART2_Write('7');
  2935  000AC8  0E37               	movlw	55
  2936  000ACA  ECB5  F008         	call	_EUSART2_Write
  2937                           
  2938                           ;main.c: 174: break;
  2939  000ACE  D080               	goto	l3209
  2940  000AD0                     l3189:
  2941                           
  2942                           ;main.c: 176: EUSART2_Write('8');
  2943  000AD0  0E38               	movlw	56
  2944  000AD2  ECB5  F008         	call	_EUSART2_Write
  2945                           
  2946                           ;main.c: 177: break;
  2947  000AD6  D07C               	goto	l3209
  2948  000AD8                     l3191:
  2949                           
  2950                           ;main.c: 179: EUSART2_Write('9');
  2951  000AD8  0E39               	movlw	57
  2952  000ADA  ECB5  F008         	call	_EUSART2_Write
  2953                           
  2954                           ;main.c: 180: break;
  2955  000ADE  D078               	goto	l3209
  2956  000AE0                     l3193:
  2957                           
  2958                           ;main.c: 182: EUSART2_Write('a');
  2959  000AE0  0E61               	movlw	97
  2960  000AE2  ECB5  F008         	call	_EUSART2_Write
  2961                           
  2962                           ;main.c: 183: break;
  2963  000AE6  D074               	goto	l3209
  2964  000AE8                     l3195:
  2965                           
  2966                           ;main.c: 185: EUSART2_Write('b');
  2967  000AE8  0E62               	movlw	98
  2968  000AEA  ECB5  F008         	call	_EUSART2_Write
  2969                           
  2970                           ;main.c: 186: break;
  2971  000AEE  D070               	goto	l3209
  2972  000AF0                     l3197:
  2973                           
  2974                           ;main.c: 188: EUSART2_Write('c');
  2975  000AF0  0E63               	movlw	99
  2976  000AF2  ECB5  F008         	call	_EUSART2_Write
  2977                           
  2978                           ;main.c: 189: break;
  2979  000AF6  D06C               	goto	l3209
  2980  000AF8                     l3199:
  2981                           
  2982                           ;main.c: 191: EUSART2_Write('d');
  2983  000AF8  0E64               	movlw	100
  2984  000AFA  ECB5  F008         	call	_EUSART2_Write
  2985                           
  2986                           ;main.c: 192: break;
  2987  000AFE  D068               	goto	l3209
  2988  000B00                     l3201:
  2989                           
  2990                           ;main.c: 194: EUSART2_Write('e');
  2991  000B00  0E65               	movlw	101
  2992  000B02  ECB5  F008         	call	_EUSART2_Write
  2993                           
  2994                           ;main.c: 195: break;
  2995  000B06  D064               	goto	l3209
  2996  000B08                     l3203:
  2997                           
  2998                           ;main.c: 197: EUSART2_Write('f');
  2999  000B08  0E66               	movlw	102
  3000  000B0A  ECB5  F008         	call	_EUSART2_Write
  3001                           
  3002                           ;main.c: 198: break;
  3003  000B0E  D060               	goto	l3209
  3004  000B10                     l3207:
  3005  000B10  501A               	movf	uint_tx_uart2@i^0,w,c
  3006  000B12  0D04               	mullw	4
  3007  000B14  50F3               	movf	243,w,c
  3008  000B16  0FFC               	addlw	252
  3009  000B18  C00D  F012         	movff	uint_tx_uart2@number,??_uint_tx_uart2
  3010  000B1C  C00E  F013         	movff	uint_tx_uart2@number+1,??_uint_tx_uart2+1
  3011  000B20  C00F  F014         	movff	uint_tx_uart2@number+2,??_uint_tx_uart2+2
  3012  000B24  C010  F015         	movff	uint_tx_uart2@number+3,??_uint_tx_uart2+3
  3013  000B28  2AE8               	incf	wreg,f,c
  3014  000B2A  D005               	goto	u1630
  3015  000B2C                     u1635:
  3016  000B2C  90D8               	bcf	status,0,c
  3017  000B2E  3215               	rrcf	(??_uint_tx_uart2+3)^0,f,c
  3018  000B30  3214               	rrcf	(??_uint_tx_uart2+2)^0,f,c
  3019  000B32  3213               	rrcf	(??_uint_tx_uart2+1)^0,f,c
  3020  000B34  3212               	rrcf	??_uint_tx_uart2^0,f,c
  3021  000B36                     u1630:
  3022  000B36  2EE8               	decfsz	wreg,f,c
  3023  000B38  D7F9               	goto	u1635
  3024  000B3A  0E0F               	movlw	15
  3025  000B3C  1412               	andwf	??_uint_tx_uart2^0,w,c
  3026  000B3E  6E16               	movwf	(??_uint_tx_uart2+4)^0,c
  3027  000B40  0E00               	movlw	0
  3028  000B42  1413               	andwf	(??_uint_tx_uart2+1)^0,w,c
  3029  000B44  6E17               	movwf	(??_uint_tx_uart2+5)^0,c
  3030  000B46  0E00               	movlw	0
  3031  000B48  1414               	andwf	(??_uint_tx_uart2+2)^0,w,c
  3032  000B4A  6E18               	movwf	(??_uint_tx_uart2+6)^0,c
  3033  000B4C  0E00               	movlw	0
  3034  000B4E  1415               	andwf	(??_uint_tx_uart2+3)^0,w,c
  3035  000B50  6E19               	movwf	(??_uint_tx_uart2+7)^0,c
  3036                           
  3037                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
  3038                           ; Switch size 1, requested type "simple"
  3039                           ; Number of cases is 1, Range of values is 0 to 0
  3040                           ; switch strategies available:
  3041                           ; Name         Instructions Cycles
  3042                           ; simple_byte            4     3 (average)
  3043                           ;	Chosen strategy is simple_byte
  3044  000B52  5019               	movf	(??_uint_tx_uart2+7)^0,w,c
  3045  000B54  0A00               	xorlw	0	; case 0
  3046  000B56  B4D8               	btfsc	status,2,c
  3047  000B58  D037               	goto	l3745
  3048  000B5A  D03A               	goto	l3209
  3049  000B5C                     l3743:
  3050                           
  3051                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3052                           ; Switch size 1, requested type "simple"
  3053                           ; Number of cases is 1, Range of values is 0 to 0
  3054                           ; switch strategies available:
  3055                           ; Name         Instructions Cycles
  3056                           ; simple_byte            4     3 (average)
  3057                           ;	Chosen strategy is simple_byte
  3058  000B5C  5017               	movf	(??_uint_tx_uart2+5)^0,w,c
  3059  000B5E  0A00               	xorlw	0	; case 0
  3060  000B60  A4D8               	btfss	status,2,c
  3061  000B62  D036               	goto	l3209
  3062                           
  3063                           ; Switch size 1, requested type "simple"
  3064                           ; Number of cases is 16, Range of values is 0 to 15
  3065                           ; switch strategies available:
  3066                           ; Name         Instructions Cycles
  3067                           ; simple_byte           49    25 (average)
  3068                           ;	Chosen strategy is simple_byte
  3069  000B64  5016               	movf	(??_uint_tx_uart2+4)^0,w,c
  3070  000B66  0A00               	xorlw	0	; case 0
  3071  000B68  B4D8               	btfsc	status,2,c
  3072  000B6A  D792               	goto	l3173
  3073  000B6C  0A01               	xorlw	1	; case 1
  3074  000B6E  B4D8               	btfsc	status,2,c
  3075  000B70  D793               	goto	l3175
  3076  000B72  0A03               	xorlw	3	; case 2
  3077  000B74  B4D8               	btfsc	status,2,c
  3078  000B76  D794               	goto	l3177
  3079  000B78  0A01               	xorlw	1	; case 3
  3080  000B7A  B4D8               	btfsc	status,2,c
  3081  000B7C  D795               	goto	l3179
  3082  000B7E  0A07               	xorlw	7	; case 4
  3083  000B80  B4D8               	btfsc	status,2,c
  3084  000B82  D796               	goto	l3181
  3085  000B84  0A01               	xorlw	1	; case 5
  3086  000B86  B4D8               	btfsc	status,2,c
  3087  000B88  D797               	goto	l3183
  3088  000B8A  0A03               	xorlw	3	; case 6
  3089  000B8C  B4D8               	btfsc	status,2,c
  3090  000B8E  D798               	goto	l3185
  3091  000B90  0A01               	xorlw	1	; case 7
  3092  000B92  B4D8               	btfsc	status,2,c
  3093  000B94  D799               	goto	l3187
  3094  000B96  0A0F               	xorlw	15	; case 8
  3095  000B98  B4D8               	btfsc	status,2,c
  3096  000B9A  D79A               	goto	l3189
  3097  000B9C  0A01               	xorlw	1	; case 9
  3098  000B9E  B4D8               	btfsc	status,2,c
  3099  000BA0  D79B               	goto	l3191
  3100  000BA2  0A03               	xorlw	3	; case 10
  3101  000BA4  B4D8               	btfsc	status,2,c
  3102  000BA6  D79C               	goto	l3193
  3103  000BA8  0A01               	xorlw	1	; case 11
  3104  000BAA  B4D8               	btfsc	status,2,c
  3105  000BAC  D79D               	goto	l3195
  3106  000BAE  0A07               	xorlw	7	; case 12
  3107  000BB0  B4D8               	btfsc	status,2,c
  3108  000BB2  D79E               	goto	l3197
  3109  000BB4  0A01               	xorlw	1	; case 13
  3110  000BB6  B4D8               	btfsc	status,2,c
  3111  000BB8  D79F               	goto	l3199
  3112  000BBA  0A03               	xorlw	3	; case 14
  3113  000BBC  B4D8               	btfsc	status,2,c
  3114  000BBE  D7A0               	goto	l3201
  3115  000BC0  0A01               	xorlw	1	; case 15
  3116  000BC2  B4D8               	btfsc	status,2,c
  3117  000BC4  D7A1               	goto	l3203
  3118  000BC6  D004               	goto	l3209
  3119  000BC8                     l3745:
  3120                           
  3121                           ; Switch size 1, requested type "simple"
  3122                           ; Number of cases is 1, Range of values is 0 to 0
  3123                           ; switch strategies available:
  3124                           ; Name         Instructions Cycles
  3125                           ; simple_byte            4     3 (average)
  3126                           ;	Chosen strategy is simple_byte
  3127  000BC8  5018               	movf	(??_uint_tx_uart2+6)^0,w,c
  3128  000BCA  0A00               	xorlw	0	; case 0
  3129  000BCC  B4D8               	btfsc	status,2,c
  3130  000BCE  D7C6               	goto	l3743
  3131  000BD0                     l3209:
  3132  000BD0  061A               	decf	uint_tx_uart2@i^0,f,c
  3133  000BD2  D75A               	goto	l3169
  3134  000BD4                     __end_of_uint_tx_uart2:
  3135                           	opt callstack 0
  3136                           
  3137 ;; *************** function _crcGen *****************
  3138 ;; Defined at:
  3139 ;;		line 40 in file "crc16.c"
  3140 ;; Parameters:    Size  Location     Type
  3141 ;;  commandBuffe    2   11[COMRAM] PTR unsigned char 
  3142 ;;		 -> eusart1RxBuffer(36), eusart1TxBuffer(140), 
  3143 ;;  dataLen         1   13[COMRAM] unsigned char 
  3144 ;; Auto vars:     Size  Location     Type
  3145 ;;  index           2   19[COMRAM] int 
  3146 ;;  memPtr1         2   17[COMRAM] PTR unsigned char 
  3147 ;;		 -> eusart1RxBuffer(36), eusart1TxBuffer(140), 
  3148 ;;  k               2    0        int 
  3149 ;; Return value:  Size  Location     Type
  3150 ;;                  2   11[COMRAM] unsigned int 
  3151 ;; Registers used:
  3152 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  3153 ;; Tracked objects:
  3154 ;;		On entry : 0/0
  3155 ;;		On exit  : 0/0
  3156 ;;		Unchanged: 0/0
  3157 ;; Data sizes:     COMRAM   BANK0   BANK1
  3158 ;;      Params:         3       0       0
  3159 ;;      Locals:         6       0       0
  3160 ;;      Temps:          1       0       0
  3161 ;;      Totals:        10       0       0
  3162 ;;Total ram usage:       10 bytes
  3163 ;; Hardware stack levels used:    1
  3164 ;; Hardware stack levels required when called:    6
  3165 ;; This function calls:
  3166 ;;		Nothing
  3167 ;; This function is called by:
  3168 ;;		_uart_run
  3169 ;; This function uses a non-reentrant model
  3170 ;;
  3171                           
  3172                           	psect	text3
  3173  000F18                     __ptext3:
  3174                           	opt callstack 0
  3175  000F18                     _crcGen:
  3176                           	opt callstack 23
  3177                           
  3178                           ;crc16.c: 53: crcReg.value = 0xFFFF;
  3179                           
  3180                           ;incstack = 0
  3181  000F18  6841               	setf	crcGen@crcReg^0,c
  3182  000F1A  6842               	setf	(crcGen@crcReg+1)^0,c
  3183                           
  3184                           ;crc16.c: 54: memPtr1 = commandBuffer;
  3185  000F1C  C00C  F012         	movff	crcGen@commandBuffer,crcGen@memPtr1
  3186  000F20  C00D  F013         	movff	crcGen@commandBuffer+1,crcGen@memPtr1+1
  3187                           
  3188                           ;crc16.c: 55: while(dataLen--)
  3189  000F24  D01F               	goto	l3165
  3190  000F26                     l3157:
  3191                           
  3192                           ;crc16.c: 56: {;crc16.c: 57: index = *(memPtr1++) ^ crcReg.L;
  3193  000F26  C012  FFD9         	movff	crcGen@memPtr1,fsr2l
  3194  000F2A  C013  FFDA         	movff	crcGen@memPtr1+1,fsr2h
  3195  000F2E  50DF               	movf	indf2,w,c
  3196  000F30  1841               	xorwf	crcGen@crcReg^0,w,c
  3197  000F32  6E0F               	movwf	??_crcGen^0,c
  3198  000F34  500F               	movf	??_crcGen^0,w,c
  3199  000F36  6E14               	movwf	crcGen@index^0,c
  3200  000F38  6A15               	clrf	(crcGen@index+1)^0,c
  3201  000F3A  4A12               	infsnz	crcGen@memPtr1^0,f,c
  3202  000F3C  2A13               	incf	(crcGen@memPtr1+1)^0,f,c
  3203                           
  3204                           ;crc16.c: 58: crcReg.L = CRC_HI_TABLE[index] ^ crcReg.H;
  3205  000F3E  0E4F               	movlw	low _CRC_HI_TABLE
  3206  000F40  2414               	addwf	crcGen@index^0,w,c
  3207  000F42  6EF6               	movwf	tblptrl,c
  3208  000F44  0E1E               	movlw	high _CRC_HI_TABLE
  3209  000F46  2015               	addwfc	(crcGen@index+1)^0,w,c
  3210  000F48  6EF7               	movwf	tblptrh,c
  3211  000F4A                     	if	0	;There are less than 3 active tblptr bytes
  3212  000F4A                     	endif
  3213  000F4A  0008               	tblrd		*
  3214  000F4C  50F5               	movf	tablat,w,c
  3215  000F4E  1842               	xorwf	(crcGen@crcReg+1)^0,w,c
  3216  000F50  6E41               	movwf	crcGen@crcReg^0,c
  3217                           
  3218                           ;crc16.c: 59: crcReg.H = CRC_LO_TABLE[index];
  3219  000F52  0E4F               	movlw	low _CRC_LO_TABLE
  3220  000F54  2414               	addwf	crcGen@index^0,w,c
  3221  000F56  6EF6               	movwf	tblptrl,c
  3222  000F58  0E1D               	movlw	high _CRC_LO_TABLE
  3223  000F5A  2015               	addwfc	(crcGen@index+1)^0,w,c
  3224  000F5C  6EF7               	movwf	tblptrh,c
  3225  000F5E                     	if	0	;There are less than 3 active tblptr bytes
  3226  000F5E                     	endif
  3227  000F5E  0008               	tblrd		*
  3228  000F60  CFF5 F042          	movff	tablat,crcGen@crcReg+1
  3229  000F64                     l3165:
  3230  000F64  060E               	decf	crcGen@dataLen^0,f,c
  3231  000F66  280E               	incf	crcGen@dataLen^0,w,c
  3232  000F68  A4D8               	btfss	status,2,c
  3233  000F6A  D7DD               	goto	l3157
  3234                           
  3235                           ;crc16.c: 60: };crc16.c: 61: return crcReg.value;
  3236  000F6C  C041  F00C         	movff	crcGen@crcReg,?_crcGen
  3237  000F70  C042  F00D         	movff	crcGen@crcReg+1,?_crcGen+1
  3238  000F74  0012               	return		;funcret
  3239  000F76                     __end_of_crcGen:
  3240                           	opt callstack 0
  3241                           
  3242 ;; *************** function _SYSTEM_Initialize *****************
  3243 ;; Defined at:
  3244 ;;		line 50 in file "mcc_generated_files/mcc.c"
  3245 ;; Parameters:    Size  Location     Type
  3246 ;;		None
  3247 ;; Auto vars:     Size  Location     Type
  3248 ;;		None
  3249 ;; Return value:  Size  Location     Type
  3250 ;;                  1    wreg      void 
  3251 ;; Registers used:
  3252 ;;		wreg, status,2, status,0, cstack
  3253 ;; Tracked objects:
  3254 ;;		On entry : 0/0
  3255 ;;		On exit  : 0/0
  3256 ;;		Unchanged: 0/0
  3257 ;; Data sizes:     COMRAM   BANK0   BANK1
  3258 ;;      Params:         0       0       0
  3259 ;;      Locals:         0       0       0
  3260 ;;      Temps:          0       0       0
  3261 ;;      Totals:         0       0       0
  3262 ;;Total ram usage:        0 bytes
  3263 ;; Hardware stack levels used:    1
  3264 ;; Hardware stack levels required when called:    8
  3265 ;; This function calls:
  3266 ;;		_ADC_Initialize
  3267 ;;		_EUSART1_Initialize
  3268 ;;		_EUSART2_Initialize
  3269 ;;		_INTERRUPT_Initialize
  3270 ;;		_OSCILLATOR_Initialize
  3271 ;;		_PIN_MANAGER_Initialize
  3272 ;;		_TMR0_Initialize
  3273 ;; This function is called by:
  3274 ;;		_main
  3275 ;; This function uses a non-reentrant model
  3276 ;;
  3277                           
  3278                           	psect	text4
  3279  0012D2                     __ptext4:
  3280                           	opt callstack 0
  3281  0012D2                     _SYSTEM_Initialize:
  3282                           	opt callstack 22
  3283                           
  3284                           ;mcc.c: 53: INTERRUPT_Initialize();
  3285                           
  3286                           ;incstack = 0
  3287  0012D2  EC9A  F009         	call	_INTERRUPT_Initialize	;wreg free
  3288                           
  3289                           ;mcc.c: 54: PIN_MANAGER_Initialize();
  3290  0012D6  EC04  F009         	call	_PIN_MANAGER_Initialize	;wreg free
  3291                           
  3292                           ;mcc.c: 55: OSCILLATOR_Initialize();
  3293  0012DA  ECAA  F009         	call	_OSCILLATOR_Initialize	;wreg free
  3294                           
  3295                           ;mcc.c: 56: ADC_Initialize();
  3296  0012DE  EC78  F009         	call	_ADC_Initialize	;wreg free
  3297                           
  3298                           ;mcc.c: 57: TMR0_Initialize();
  3299  0012E2  EC9A  F008         	call	_TMR0_Initialize	;wreg free
  3300                           
  3301                           ;mcc.c: 58: EUSART1_Initialize();
  3302  0012E6  EC32  F008         	call	_EUSART1_Initialize	;wreg free
  3303                           
  3304                           ;mcc.c: 59: EUSART2_Initialize();
  3305  0012EA  ECE6  F007         	call	_EUSART2_Initialize	;wreg free
  3306  0012EE  0012               	return		;funcret
  3307  0012F0                     __end_of_SYSTEM_Initialize:
  3308                           	opt callstack 0
  3309                           
  3310 ;; *************** function _TMR0_Initialize *****************
  3311 ;; Defined at:
  3312 ;;		line 67 in file "mcc_generated_files/tmr0.c"
  3313 ;; Parameters:    Size  Location     Type
  3314 ;;		None
  3315 ;; Auto vars:     Size  Location     Type
  3316 ;;		None
  3317 ;; Return value:  Size  Location     Type
  3318 ;;                  1    wreg      void 
  3319 ;; Registers used:
  3320 ;;		wreg, status,2, status,0, cstack
  3321 ;; Tracked objects:
  3322 ;;		On entry : 0/0
  3323 ;;		On exit  : 0/0
  3324 ;;		Unchanged: 0/0
  3325 ;; Data sizes:     COMRAM   BANK0   BANK1
  3326 ;;      Params:         0       0       0
  3327 ;;      Locals:         0       0       0
  3328 ;;      Temps:          2       0       0
  3329 ;;      Totals:         2       0       0
  3330 ;;Total ram usage:        2 bytes
  3331 ;; Hardware stack levels used:    1
  3332 ;; Hardware stack levels required when called:    7
  3333 ;; This function calls:
  3334 ;;		_TMR0_SetInterruptHandler
  3335 ;; This function is called by:
  3336 ;;		_SYSTEM_Initialize
  3337 ;; This function uses a non-reentrant model
  3338 ;;
  3339                           
  3340                           	psect	text5
  3341  001134                     __ptext5:
  3342                           	opt callstack 0
  3343  001134                     _TMR0_Initialize:
  3344                           	opt callstack 22
  3345                           
  3346                           ;tmr0.c: 72: T0CONbits.T08BIT = 0;
  3347                           
  3348                           ;incstack = 0
  3349  001134  9CD5               	bcf	213,6,c	;volatile
  3350                           
  3351                           ;tmr0.c: 75: TMR0H = 0xFE;
  3352  001136  0EFE               	movlw	254
  3353  001138  6ED7               	movwf	215,c	;volatile
  3354                           
  3355                           ;tmr0.c: 78: TMR0L = 0x0B;
  3356  00113A  0E0B               	movlw	11
  3357  00113C  6ED6               	movwf	214,c	;volatile
  3358                           
  3359                           ;tmr0.c: 82: timer0ReloadVal = (uint16_t)((TMR0H << 8) | TMR0L);
  3360  00113E  50D6               	movf	214,w,c	;volatile
  3361  001140  CFD7 F00E          	movff	4055,??_TMR0_Initialize	;volatile
  3362  001144  6A0F               	clrf	(??_TMR0_Initialize+1)^0,c
  3363  001146  C00E  F00F         	movff	??_TMR0_Initialize,??_TMR0_Initialize+1
  3364  00114A  6A0E               	clrf	??_TMR0_Initialize^0,c
  3365  00114C  100E               	iorwf	??_TMR0_Initialize^0,w,c
  3366  00114E  6E4D               	movwf	_timer0ReloadVal^0,c	;volatile
  3367  001150  500F               	movf	(??_TMR0_Initialize+1)^0,w,c
  3368  001152  6E4E               	movwf	(_timer0ReloadVal+1)^0,c	;volatile
  3369                           
  3370                           ;tmr0.c: 85: INTCONbits.TMR0IF = 0;
  3371  001154  94F2               	bcf	242,2,c	;volatile
  3372                           
  3373                           ;tmr0.c: 88: INTCONbits.TMR0IE = 1;
  3374  001156  8AF2               	bsf	242,5,c	;volatile
  3375                           
  3376                           ;tmr0.c: 91: TMR0_SetInterruptHandler(TMR0_DefaultInterruptHandler);
  3377  001158  0EBE               	movlw	low _TMR0_DefaultInterruptHandler
  3378  00115A  6E0C               	movwf	TMR0_SetInterruptHandler@InterruptHandler^0,c
  3379  00115C  0E13               	movlw	high _TMR0_DefaultInterruptHandler
  3380  00115E  6E0D               	movwf	(TMR0_SetInterruptHandler@InterruptHandler+1)^0,c
  3381  001160  ECBD  F009         	call	_TMR0_SetInterruptHandler	;wreg free
  3382                           
  3383                           ;tmr0.c: 94: T0CON = 0x92;
  3384  001164  0E92               	movlw	146
  3385  001166  6ED5               	movwf	213,c	;volatile
  3386  001168  0012               	return		;funcret
  3387  00116A                     __end_of_TMR0_Initialize:
  3388                           	opt callstack 0
  3389                           
  3390 ;; *************** function _TMR0_SetInterruptHandler *****************
  3391 ;; Defined at:
  3392 ;;		line 164 in file "mcc_generated_files/tmr0.c"
  3393 ;; Parameters:    Size  Location     Type
  3394 ;;  InterruptHan    2   11[COMRAM] PTR FTN()void 
  3395 ;;		 -> timer_8ms(1), TMR0_DefaultInterruptHandler(1), 
  3396 ;; Auto vars:     Size  Location     Type
  3397 ;;		None
  3398 ;; Return value:  Size  Location     Type
  3399 ;;                  1    wreg      void 
  3400 ;; Registers used:
  3401 ;;		wreg, status,2, status,0
  3402 ;; Tracked objects:
  3403 ;;		On entry : 0/0
  3404 ;;		On exit  : 0/0
  3405 ;;		Unchanged: 0/0
  3406 ;; Data sizes:     COMRAM   BANK0   BANK1
  3407 ;;      Params:         2       0       0
  3408 ;;      Locals:         0       0       0
  3409 ;;      Temps:          0       0       0
  3410 ;;      Totals:         2       0       0
  3411 ;;Total ram usage:        2 bytes
  3412 ;; Hardware stack levels used:    1
  3413 ;; Hardware stack levels required when called:    6
  3414 ;; This function calls:
  3415 ;;		Nothing
  3416 ;; This function is called by:
  3417 ;;		_TMR0_Initialize
  3418 ;;		_main
  3419 ;; This function uses a non-reentrant model
  3420 ;;
  3421                           
  3422                           	psect	text6
  3423  00137A                     __ptext6:
  3424                           	opt callstack 0
  3425  00137A                     _TMR0_SetInterruptHandler:
  3426                           	opt callstack 24
  3427                           
  3428                           ;tmr0.c: 165: TMR0_InterruptHandler = InterruptHandler;
  3429                           
  3430                           ;incstack = 0
  3431  00137A  C00C  F04F         	movff	TMR0_SetInterruptHandler@InterruptHandler,_TMR0_InterruptHandler
  3432  00137E  C00D  F050         	movff	TMR0_SetInterruptHandler@InterruptHandler+1,_TMR0_InterruptHandler+1
  3433  001382  0012               	return		;funcret
  3434  001384                     __end_of_TMR0_SetInterruptHandler:
  3435                           	opt callstack 0
  3436                           
  3437 ;; *************** function _PIN_MANAGER_Initialize *****************
  3438 ;; Defined at:
  3439 ;;		line 57 in file "mcc_generated_files/pin_manager.c"
  3440 ;; Parameters:    Size  Location     Type
  3441 ;;		None
  3442 ;; Auto vars:     Size  Location     Type
  3443 ;;		None
  3444 ;; Return value:  Size  Location     Type
  3445 ;;                  1    wreg      void 
  3446 ;; Registers used:
  3447 ;;		wreg, status,2
  3448 ;; Tracked objects:
  3449 ;;		On entry : 0/0
  3450 ;;		On exit  : 0/0
  3451 ;;		Unchanged: 0/0
  3452 ;; Data sizes:     COMRAM   BANK0   BANK1
  3453 ;;      Params:         0       0       0
  3454 ;;      Locals:         0       0       0
  3455 ;;      Temps:          0       0       0
  3456 ;;      Totals:         0       0       0
  3457 ;;Total ram usage:        0 bytes
  3458 ;; Hardware stack levels used:    1
  3459 ;; Hardware stack levels required when called:    6
  3460 ;; This function calls:
  3461 ;;		Nothing
  3462 ;; This function is called by:
  3463 ;;		_SYSTEM_Initialize
  3464 ;; This function uses a non-reentrant model
  3465 ;;
  3466                           
  3467                           	psect	text7
  3468  001208                     __ptext7:
  3469                           	opt callstack 0
  3470  001208                     _PIN_MANAGER_Initialize:
  3471                           	opt callstack 23
  3472                           
  3473                           ;pin_manager.c: 62: LATA = 0x00;
  3474                           
  3475                           ;incstack = 0
  3476  001208  0E00               	movlw	0
  3477  00120A  6E89               	movwf	137,c	;volatile
  3478                           
  3479                           ;pin_manager.c: 63: LATB = 0x00;
  3480  00120C  0E00               	movlw	0
  3481  00120E  6E8A               	movwf	138,c	;volatile
  3482                           
  3483                           ;pin_manager.c: 64: LATC = 0x00;
  3484  001210  0E00               	movlw	0
  3485  001212  6E8B               	movwf	139,c	;volatile
  3486                           
  3487                           ;pin_manager.c: 69: TRISA = 0xFD;
  3488  001214  0EFD               	movlw	253
  3489  001216  6E92               	movwf	146,c	;volatile
  3490                           
  3491                           ;pin_manager.c: 70: TRISB = 0xBF;
  3492  001218  0EBF               	movlw	191
  3493  00121A  6E93               	movwf	147,c	;volatile
  3494                           
  3495                           ;pin_manager.c: 71: TRISC = 0x9F;
  3496  00121C  0E9F               	movlw	159
  3497  00121E  6E94               	movwf	148,c	;volatile
  3498                           
  3499                           ;pin_manager.c: 76: ANSELC = 0x1C;
  3500  001220  0E1C               	movlw	28
  3501  001222  010F               	movlb	15	; () banked
  3502  001224  6F3A               	movwf	58,b	;volatile
  3503                           
  3504                           ;pin_manager.c: 77: ANSELB = 0x3F;
  3505  001226  0E3F               	movlw	63
  3506  001228  6F39               	movwf	57,b	;volatile
  3507                           
  3508                           ;pin_manager.c: 78: ANSELA = 0x2D;
  3509  00122A  0E2D               	movlw	45
  3510  00122C  6F38               	movwf	56,b	;volatile
  3511                           
  3512                           ;pin_manager.c: 83: WPUB = 0x00;
  3513  00122E  0E00               	movlw	0
  3514  001230  6E61               	movwf	97,c	;volatile
  3515                           
  3516                           ; BSR set to: 15
  3517                           ;pin_manager.c: 84: INTCON2bits.nRBPU = 1;
  3518  001232  8EF1               	bsf	241,7,c	;volatile
  3519                           
  3520                           ; BSR set to: 15
  3521  001234  0012               	return		;funcret
  3522  001236                     __end_of_PIN_MANAGER_Initialize:
  3523                           	opt callstack 0
  3524                           
  3525 ;; *************** function _OSCILLATOR_Initialize *****************
  3526 ;; Defined at:
  3527 ;;		line 62 in file "mcc_generated_files/mcc.c"
  3528 ;; Parameters:    Size  Location     Type
  3529 ;;		None
  3530 ;; Auto vars:     Size  Location     Type
  3531 ;;		None
  3532 ;; Return value:  Size  Location     Type
  3533 ;;                  1    wreg      void 
  3534 ;; Registers used:
  3535 ;;		wreg, status,2
  3536 ;; Tracked objects:
  3537 ;;		On entry : 0/0
  3538 ;;		On exit  : 0/0
  3539 ;;		Unchanged: 0/0
  3540 ;; Data sizes:     COMRAM   BANK0   BANK1
  3541 ;;      Params:         0       0       0
  3542 ;;      Locals:         0       0       0
  3543 ;;      Temps:          0       0       0
  3544 ;;      Totals:         0       0       0
  3545 ;;Total ram usage:        0 bytes
  3546 ;; Hardware stack levels used:    1
  3547 ;; Hardware stack levels required when called:    6
  3548 ;; This function calls:
  3549 ;;		Nothing
  3550 ;; This function is called by:
  3551 ;;		_SYSTEM_Initialize
  3552 ;; This function uses a non-reentrant model
  3553 ;;
  3554                           
  3555                           	psect	text8
  3556  001354                     __ptext8:
  3557                           	opt callstack 0
  3558  001354                     _OSCILLATOR_Initialize:
  3559                           	opt callstack 23
  3560                           
  3561                           ;mcc.c: 65: OSCCON = 0x40;
  3562                           
  3563                           ; BSR set to: 15
  3564                           ;incstack = 0
  3565  001354  0E40               	movlw	64
  3566  001356  6ED3               	movwf	211,c	;volatile
  3567                           
  3568                           ;mcc.c: 67: OSCCON2 = 0x04;
  3569  001358  0E04               	movlw	4
  3570  00135A  6ED2               	movwf	210,c	;volatile
  3571                           
  3572                           ;mcc.c: 69: OSCTUNE = 0x00;
  3573  00135C  0E00               	movlw	0
  3574  00135E  6E9B               	movwf	155,c	;volatile
  3575  001360  0012               	return		;funcret
  3576  001362                     __end_of_OSCILLATOR_Initialize:
  3577                           	opt callstack 0
  3578                           
  3579 ;; *************** function _INTERRUPT_Initialize *****************
  3580 ;; Defined at:
  3581 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
  3582 ;; Parameters:    Size  Location     Type
  3583 ;;		None
  3584 ;; Auto vars:     Size  Location     Type
  3585 ;;		None
  3586 ;; Return value:  Size  Location     Type
  3587 ;;                  1    wreg      void 
  3588 ;; Registers used:
  3589 ;;		None
  3590 ;; Tracked objects:
  3591 ;;		On entry : 0/0
  3592 ;;		On exit  : 0/0
  3593 ;;		Unchanged: 0/0
  3594 ;; Data sizes:     COMRAM   BANK0   BANK1
  3595 ;;      Params:         0       0       0
  3596 ;;      Locals:         0       0       0
  3597 ;;      Temps:          0       0       0
  3598 ;;      Totals:         0       0       0
  3599 ;;Total ram usage:        0 bytes
  3600 ;; Hardware stack levels used:    1
  3601 ;; Hardware stack levels required when called:    6
  3602 ;; This function calls:
  3603 ;;		Nothing
  3604 ;; This function is called by:
  3605 ;;		_SYSTEM_Initialize
  3606 ;; This function uses a non-reentrant model
  3607 ;;
  3608                           
  3609                           	psect	text9
  3610  001334                     __ptext9:
  3611                           	opt callstack 0
  3612  001334                     _INTERRUPT_Initialize:
  3613                           	opt callstack 23
  3614                           
  3615                           ;interrupt_manager.c: 55: RCONbits.IPEN = 1;
  3616                           
  3617                           ;incstack = 0
  3618  001334  8ED0               	bsf	208,7,c	;volatile
  3619                           
  3620                           ;interrupt_manager.c: 60: IPR1bits.RC1IP = 1;
  3621  001336  8A9F               	bsf	159,5,c	;volatile
  3622                           
  3623                           ;interrupt_manager.c: 63: IPR1bits.TX1IP = 1;
  3624  001338  889F               	bsf	159,4,c	;volatile
  3625                           
  3626                           ;interrupt_manager.c: 66: INTCON2bits.TMR0IP = 1;
  3627  00133A  84F1               	bsf	241,2,c	;volatile
  3628                           
  3629                           ;interrupt_manager.c: 70: IPR1bits.ADIP = 0;
  3630  00133C  9C9F               	bcf	159,6,c	;volatile
  3631                           
  3632                           ;interrupt_manager.c: 73: IPR3bits.RC2IP = 0;
  3633  00133E  9AA5               	bcf	165,5,c	;volatile
  3634                           
  3635                           ;interrupt_manager.c: 76: IPR3bits.TX2IP = 0;
  3636  001340  98A5               	bcf	165,4,c	;volatile
  3637  001342  0012               	return		;funcret
  3638  001344                     __end_of_INTERRUPT_Initialize:
  3639                           	opt callstack 0
  3640                           
  3641 ;; *************** function _EUSART2_Initialize *****************
  3642 ;; Defined at:
  3643 ;;		line 75 in file "mcc_generated_files/eusart2.c"
  3644 ;; Parameters:    Size  Location     Type
  3645 ;;		None
  3646 ;; Auto vars:     Size  Location     Type
  3647 ;;		None
  3648 ;; Return value:  Size  Location     Type
  3649 ;;                  1    wreg      void 
  3650 ;; Registers used:
  3651 ;;		wreg, status,2, status,0, cstack
  3652 ;; Tracked objects:
  3653 ;;		On entry : 0/0
  3654 ;;		On exit  : 0/0
  3655 ;;		Unchanged: 0/0
  3656 ;; Data sizes:     COMRAM   BANK0   BANK1
  3657 ;;      Params:         0       0       0
  3658 ;;      Locals:         0       0       0
  3659 ;;      Temps:          0       0       0
  3660 ;;      Totals:         0       0       0
  3661 ;;Total ram usage:        0 bytes
  3662 ;; Hardware stack levels used:    1
  3663 ;; Hardware stack levels required when called:    7
  3664 ;; This function calls:
  3665 ;;		_EUSART2_SetRxInterruptHandler
  3666 ;;		_EUSART2_SetTxInterruptHandler
  3667 ;; This function is called by:
  3668 ;;		_SYSTEM_Initialize
  3669 ;; This function uses a non-reentrant model
  3670 ;;
  3671                           
  3672                           	psect	text10
  3673  000FCC                     __ptext10:
  3674                           	opt callstack 0
  3675  000FCC                     _EUSART2_Initialize:
  3676                           	opt callstack 22
  3677                           
  3678                           ;eusart2.c: 78: PIE3bits.RC2IE = 0;
  3679                           
  3680                           ;incstack = 0
  3681  000FCC  9AA3               	bcf	163,5,c	;volatile
  3682                           
  3683                           ;eusart2.c: 79: EUSART2_SetRxInterruptHandler(EUSART2_Receive_ISR);
  3684  000FCE  0E8A               	movlw	low _EUSART2_Receive_ISR
  3685  000FD0  6E0C               	movwf	EUSART2_SetRxInterruptHandler@interruptHandler^0,c
  3686  000FD2  0E12               	movlw	high _EUSART2_Receive_ISR
  3687  000FD4  6E0D               	movwf	(EUSART2_SetRxInterruptHandler@interruptHandler+1)^0,c
  3688  000FD6  ECC7  F009         	call	_EUSART2_SetRxInterruptHandler	;wreg free
  3689                           
  3690                           ;eusart2.c: 80: PIE3bits.TX2IE = 0;
  3691  000FDA  98A3               	bcf	163,4,c	;volatile
  3692                           
  3693                           ;eusart2.c: 81: EUSART2_SetTxInterruptHandler(EUSART2_Transmit_ISR);
  3694  000FDC  0E36               	movlw	low _EUSART2_Transmit_ISR
  3695  000FDE  6E0C               	movwf	EUSART2_SetTxInterruptHandler@interruptHandler^0,c
  3696  000FE0  0E12               	movlw	high _EUSART2_Transmit_ISR
  3697  000FE2  6E0D               	movwf	(EUSART2_SetTxInterruptHandler@interruptHandler+1)^0,c
  3698  000FE4  ECC2  F009         	call	_EUSART2_SetTxInterruptHandler	;wreg free
  3699                           
  3700                           ;eusart2.c: 85: BAUDCON2 = 0x08;
  3701  000FE8  0E08               	movlw	8
  3702  000FEA  6E70               	movwf	112,c	;volatile
  3703                           
  3704                           ;eusart2.c: 88: RCSTA2 = 0x90;
  3705  000FEC  0E90               	movlw	144
  3706  000FEE  6E71               	movwf	113,c	;volatile
  3707                           
  3708                           ;eusart2.c: 91: TXSTA2 = 0x24;
  3709  000FF0  0E24               	movlw	36
  3710  000FF2  6E72               	movwf	114,c	;volatile
  3711                           
  3712                           ;eusart2.c: 94: SPBRG2 = 0x33;
  3713  000FF4  0E33               	movlw	51
  3714  000FF6  6E75               	movwf	117,c	;volatile
  3715                           
  3716                           ;eusart2.c: 97: SPBRGH2 = 0x00;
  3717  000FF8  0E00               	movlw	0
  3718  000FFA  6E76               	movwf	118,c	;volatile
  3719                           
  3720                           ;eusart2.c: 101: eusart2TxHead = 0;
  3721  000FFC  0E00               	movlw	0
  3722  000FFE  6E47               	movwf	_eusart2TxHead^0,c	;volatile
  3723                           
  3724                           ;eusart2.c: 102: eusart2TxTail = 0;
  3725  001000  0E00               	movlw	0
  3726  001002  6E46               	movwf	_eusart2TxTail^0,c	;volatile
  3727                           
  3728                           ;eusart2.c: 103: eusart2TxBufferRemaining = sizeof(eusart2TxBuffer);
  3729  001004  0E40               	movlw	64
  3730  001006  6E51               	movwf	_eusart2TxBufferRemaining^0,c	;volatile
  3731                           
  3732                           ;eusart2.c: 105: eusart2RxHead = 0;
  3733  001008  0E00               	movlw	0
  3734  00100A  6E45               	movwf	_eusart2RxHead^0,c	;volatile
  3735                           
  3736                           ;eusart2.c: 106: eusart2RxTail = 0;
  3737  00100C  0E00               	movlw	0
  3738  00100E  6E44               	movwf	_eusart2RxTail^0,c	;volatile
  3739                           
  3740                           ;eusart2.c: 107: eusart2RxCount = 0;
  3741  001010  0E00               	movlw	0
  3742  001012  6E43               	movwf	_eusart2RxCount^0,c	;volatile
  3743                           
  3744                           ;eusart2.c: 110: PIE3bits.RC2IE = 1;
  3745  001014  8AA3               	bsf	163,5,c	;volatile
  3746  001016  0012               	return		;funcret
  3747  001018                     __end_of_EUSART2_Initialize:
  3748                           	opt callstack 0
  3749                           
  3750 ;; *************** function _EUSART2_SetTxInterruptHandler *****************
  3751 ;; Defined at:
  3752 ;;		line 212 in file "mcc_generated_files/eusart2.c"
  3753 ;; Parameters:    Size  Location     Type
  3754 ;;  interruptHan    2   11[COMRAM] PTR FTN()void 
  3755 ;;		 -> EUSART2_Transmit_ISR(1), 
  3756 ;; Auto vars:     Size  Location     Type
  3757 ;;		None
  3758 ;; Return value:  Size  Location     Type
  3759 ;;                  1    wreg      void 
  3760 ;; Registers used:
  3761 ;;		wreg, status,2, status,0
  3762 ;; Tracked objects:
  3763 ;;		On entry : 0/0
  3764 ;;		On exit  : 0/0
  3765 ;;		Unchanged: 0/0
  3766 ;; Data sizes:     COMRAM   BANK0   BANK1
  3767 ;;      Params:         2       0       0
  3768 ;;      Locals:         0       0       0
  3769 ;;      Temps:          0       0       0
  3770 ;;      Totals:         2       0       0
  3771 ;;Total ram usage:        2 bytes
  3772 ;; Hardware stack levels used:    1
  3773 ;; Hardware stack levels required when called:    6
  3774 ;; This function calls:
  3775 ;;		Nothing
  3776 ;; This function is called by:
  3777 ;;		_EUSART2_Initialize
  3778 ;; This function uses a non-reentrant model
  3779 ;;
  3780                           
  3781                           	psect	text11
  3782  001384                     __ptext11:
  3783                           	opt callstack 0
  3784  001384                     _EUSART2_SetTxInterruptHandler:
  3785                           	opt callstack 22
  3786                           
  3787                           ;eusart2.c: 213: EUSART2_TxDefaultInterruptHandler = interruptHandler;
  3788                           
  3789                           ;incstack = 0
  3790  001384  C00C  F0FE         	movff	EUSART2_SetTxInterruptHandler@interruptHandler,_EUSART2_TxDefaultInterruptHandler
  3791  001388  C00D  F0FF         	movff	EUSART2_SetTxInterruptHandler@interruptHandler+1,_EUSART2_TxDefaultInterruptHandl
      +                          er+1
  3792  00138C  0012               	return		;funcret
  3793  00138E                     __end_of_EUSART2_SetTxInterruptHandler:
  3794                           	opt callstack 0
  3795                           
  3796 ;; *************** function _EUSART2_SetRxInterruptHandler *****************
  3797 ;; Defined at:
  3798 ;;		line 216 in file "mcc_generated_files/eusart2.c"
  3799 ;; Parameters:    Size  Location     Type
  3800 ;;  interruptHan    2   11[COMRAM] PTR FTN()void 
  3801 ;;		 -> EUSART2_Receive_ISR(1), 
  3802 ;; Auto vars:     Size  Location     Type
  3803 ;;		None
  3804 ;; Return value:  Size  Location     Type
  3805 ;;                  1    wreg      void 
  3806 ;; Registers used:
  3807 ;;		wreg, status,2, status,0
  3808 ;; Tracked objects:
  3809 ;;		On entry : 0/0
  3810 ;;		On exit  : 0/0
  3811 ;;		Unchanged: 0/0
  3812 ;; Data sizes:     COMRAM   BANK0   BANK1
  3813 ;;      Params:         2       0       0
  3814 ;;      Locals:         0       0       0
  3815 ;;      Temps:          0       0       0
  3816 ;;      Totals:         2       0       0
  3817 ;;Total ram usage:        2 bytes
  3818 ;; Hardware stack levels used:    1
  3819 ;; Hardware stack levels required when called:    6
  3820 ;; This function calls:
  3821 ;;		Nothing
  3822 ;; This function is called by:
  3823 ;;		_EUSART2_Initialize
  3824 ;; This function uses a non-reentrant model
  3825 ;;
  3826                           
  3827                           	psect	text12
  3828  00138E                     __ptext12:
  3829                           	opt callstack 0
  3830  00138E                     _EUSART2_SetRxInterruptHandler:
  3831                           	opt callstack 22
  3832                           
  3833                           ;eusart2.c: 217: EUSART2_RxDefaultInterruptHandler = interruptHandler;
  3834                           
  3835                           ;incstack = 0
  3836  00138E  C00C  F0FC         	movff	EUSART2_SetRxInterruptHandler@interruptHandler,_EUSART2_RxDefaultInterruptHandler
  3837  001392  C00D  F0FD         	movff	EUSART2_SetRxInterruptHandler@interruptHandler+1,_EUSART2_RxDefaultInterruptHandl
      +                          er+1
  3838  001396  0012               	return		;funcret
  3839  001398                     __end_of_EUSART2_SetRxInterruptHandler:
  3840                           	opt callstack 0
  3841                           
  3842 ;; *************** function _EUSART1_Initialize *****************
  3843 ;; Defined at:
  3844 ;;		line 76 in file "mcc_generated_files/eusart1.c"
  3845 ;; Parameters:    Size  Location     Type
  3846 ;;		None
  3847 ;; Auto vars:     Size  Location     Type
  3848 ;;		None
  3849 ;; Return value:  Size  Location     Type
  3850 ;;                  1    wreg      void 
  3851 ;; Registers used:
  3852 ;;		wreg, status,2, status,0, cstack
  3853 ;; Tracked objects:
  3854 ;;		On entry : 0/0
  3855 ;;		On exit  : 0/0
  3856 ;;		Unchanged: 0/0
  3857 ;; Data sizes:     COMRAM   BANK0   BANK1
  3858 ;;      Params:         0       0       0
  3859 ;;      Locals:         0       0       0
  3860 ;;      Temps:          0       0       0
  3861 ;;      Totals:         0       0       0
  3862 ;;Total ram usage:        0 bytes
  3863 ;; Hardware stack levels used:    1
  3864 ;; Hardware stack levels required when called:    7
  3865 ;; This function calls:
  3866 ;;		_EUSART1_SetRxInterruptHandler
  3867 ;;		_EUSART1_SetTxInterruptHandler
  3868 ;; This function is called by:
  3869 ;;		_SYSTEM_Initialize
  3870 ;; This function uses a non-reentrant model
  3871 ;;
  3872                           
  3873                           	psect	text13
  3874  001064                     __ptext13:
  3875                           	opt callstack 0
  3876  001064                     _EUSART1_Initialize:
  3877                           	opt callstack 22
  3878                           
  3879                           ;eusart1.c: 79: PIE1bits.RC1IE = 0;
  3880                           
  3881                           ;incstack = 0
  3882  001064  9A9D               	bcf	157,5,c	;volatile
  3883                           
  3884                           ;eusart1.c: 80: EUSART1_SetRxInterruptHandler(EUSART1_Receive_ISR);
  3885  001066  0EA0               	movlw	low _EUSART1_Receive_ISR
  3886  001068  6E0C               	movwf	EUSART1_SetRxInterruptHandler@interruptHandler^0,c
  3887  00106A  0E11               	movlw	high _EUSART1_Receive_ISR
  3888  00106C  6E0D               	movwf	(EUSART1_SetRxInterruptHandler@interruptHandler+1)^0,c
  3889  00106E  ECD1  F009         	call	_EUSART1_SetRxInterruptHandler	;wreg free
  3890                           
  3891                           ;eusart1.c: 81: PIE1bits.TX1IE = 0;
  3892  001072  989D               	bcf	157,4,c	;volatile
  3893                           
  3894                           ;eusart1.c: 82: EUSART1_SetTxInterruptHandler(EUSART1_Transmit_ISR);
  3895  001074  0E60               	movlw	low _EUSART1_Transmit_ISR
  3896  001076  6E0C               	movwf	EUSART1_SetTxInterruptHandler@interruptHandler^0,c
  3897  001078  0E12               	movlw	high _EUSART1_Transmit_ISR
  3898  00107A  6E0D               	movwf	(EUSART1_SetTxInterruptHandler@interruptHandler+1)^0,c
  3899  00107C  ECCC  F009         	call	_EUSART1_SetTxInterruptHandler	;wreg free
  3900                           
  3901                           ;eusart1.c: 86: BAUDCON1 = 0x08;
  3902  001080  0E08               	movlw	8
  3903  001082  6EB8               	movwf	184,c	;volatile
  3904                           
  3905                           ;eusart1.c: 89: RCSTA1 = 0x90;
  3906  001084  0E90               	movlw	144
  3907  001086  6EAB               	movwf	171,c	;volatile
  3908                           
  3909                           ;eusart1.c: 92: TXSTA1 = 0x24;
  3910  001088  0E24               	movlw	36
  3911  00108A  6EAC               	movwf	172,c	;volatile
  3912                           
  3913                           ;eusart1.c: 95: SPBRG1 = 0x33;
  3914  00108C  0E33               	movlw	51
  3915  00108E  6EAF               	movwf	175,c	;volatile
  3916                           
  3917                           ;eusart1.c: 98: SPBRGH1 = 0x00;
  3918  001090  0E00               	movlw	0
  3919  001092  6EB0               	movwf	176,c	;volatile
  3920                           
  3921                           ;eusart1.c: 102: eusart1TxHead = 0;
  3922  001094  0E00               	movlw	0
  3923  001096  6E4C               	movwf	_eusart1TxHead^0,c	;volatile
  3924                           
  3925                           ;eusart1.c: 103: eusart1TxTail = 0;
  3926  001098  0E00               	movlw	0
  3927  00109A  6E4B               	movwf	_eusart1TxTail^0,c	;volatile
  3928                           
  3929                           ;eusart1.c: 104: eusart1TxBufferRemaining = sizeof(eusart1TxBuffer);
  3930  00109C  0E8C               	movlw	140
  3931  00109E  6E52               	movwf	_eusart1TxBufferRemaining^0,c	;volatile
  3932                           
  3933                           ;eusart1.c: 106: eusart1RxHead = 0;
  3934  0010A0  0E00               	movlw	0
  3935  0010A2  6E4A               	movwf	_eusart1RxHead^0,c	;volatile
  3936                           
  3937                           ;eusart1.c: 107: eusart1RxTail = 0;
  3938  0010A4  0E00               	movlw	0
  3939  0010A6  6E49               	movwf	_eusart1RxTail^0,c	;volatile
  3940                           
  3941                           ;eusart1.c: 108: eusart1RxCount = 0;
  3942  0010A8  0E00               	movlw	0
  3943  0010AA  6E48               	movwf	_eusart1RxCount^0,c	;volatile
  3944  0010AC  0012               	return		;funcret
  3945  0010AE                     __end_of_EUSART1_Initialize:
  3946                           	opt callstack 0
  3947                           
  3948 ;; *************** function _EUSART1_SetTxInterruptHandler *****************
  3949 ;; Defined at:
  3950 ;;		line 218 in file "mcc_generated_files/eusart1.c"
  3951 ;; Parameters:    Size  Location     Type
  3952 ;;  interruptHan    2   11[COMRAM] PTR FTN()void 
  3953 ;;		 -> EUSART1_Transmit_ISR(1), 
  3954 ;; Auto vars:     Size  Location     Type
  3955 ;;		None
  3956 ;; Return value:  Size  Location     Type
  3957 ;;                  1    wreg      void 
  3958 ;; Registers used:
  3959 ;;		wreg, status,2, status,0
  3960 ;; Tracked objects:
  3961 ;;		On entry : 0/0
  3962 ;;		On exit  : 0/0
  3963 ;;		Unchanged: 0/0
  3964 ;; Data sizes:     COMRAM   BANK0   BANK1
  3965 ;;      Params:         2       0       0
  3966 ;;      Locals:         0       0       0
  3967 ;;      Temps:          0       0       0
  3968 ;;      Totals:         2       0       0
  3969 ;;Total ram usage:        2 bytes
  3970 ;; Hardware stack levels used:    1
  3971 ;; Hardware stack levels required when called:    6
  3972 ;; This function calls:
  3973 ;;		Nothing
  3974 ;; This function is called by:
  3975 ;;		_EUSART1_Initialize
  3976 ;; This function uses a non-reentrant model
  3977 ;;
  3978                           
  3979                           	psect	text14
  3980  001398                     __ptext14:
  3981                           	opt callstack 0
  3982  001398                     _EUSART1_SetTxInterruptHandler:
  3983                           	opt callstack 22
  3984                           
  3985                           ;eusart1.c: 219: EUSART1_TxDefaultInterruptHandler = interruptHandler;
  3986                           
  3987                           ;incstack = 0
  3988  001398  C00C  F0FA         	movff	EUSART1_SetTxInterruptHandler@interruptHandler,_EUSART1_TxDefaultInterruptHandler
  3989  00139C  C00D  F0FB         	movff	EUSART1_SetTxInterruptHandler@interruptHandler+1,_EUSART1_TxDefaultInterruptHandl
      +                          er+1
  3990  0013A0  0012               	return		;funcret
  3991  0013A2                     __end_of_EUSART1_SetTxInterruptHandler:
  3992                           	opt callstack 0
  3993                           
  3994 ;; *************** function _EUSART1_SetRxInterruptHandler *****************
  3995 ;; Defined at:
  3996 ;;		line 222 in file "mcc_generated_files/eusart1.c"
  3997 ;; Parameters:    Size  Location     Type
  3998 ;;  interruptHan    2   11[COMRAM] PTR FTN()void 
  3999 ;;		 -> EUSART1_Receive_ISR(1), 
  4000 ;; Auto vars:     Size  Location     Type
  4001 ;;		None
  4002 ;; Return value:  Size  Location     Type
  4003 ;;                  1    wreg      void 
  4004 ;; Registers used:
  4005 ;;		wreg, status,2, status,0
  4006 ;; Tracked objects:
  4007 ;;		On entry : 0/0
  4008 ;;		On exit  : 0/0
  4009 ;;		Unchanged: 0/0
  4010 ;; Data sizes:     COMRAM   BANK0   BANK1
  4011 ;;      Params:         2       0       0
  4012 ;;      Locals:         0       0       0
  4013 ;;      Temps:          0       0       0
  4014 ;;      Totals:         2       0       0
  4015 ;;Total ram usage:        2 bytes
  4016 ;; Hardware stack levels used:    1
  4017 ;; Hardware stack levels required when called:    6
  4018 ;; This function calls:
  4019 ;;		Nothing
  4020 ;; This function is called by:
  4021 ;;		_EUSART1_Initialize
  4022 ;; This function uses a non-reentrant model
  4023 ;;
  4024                           
  4025                           	psect	text15
  4026  0013A2                     __ptext15:
  4027                           	opt callstack 0
  4028  0013A2                     _EUSART1_SetRxInterruptHandler:
  4029                           	opt callstack 22
  4030                           
  4031                           ;eusart1.c: 223: EUSART1_RxDefaultInterruptHandler = interruptHandler;
  4032                           
  4033                           ;incstack = 0
  4034  0013A2  C00C  F0F8         	movff	EUSART1_SetRxInterruptHandler@interruptHandler,_EUSART1_RxDefaultInterruptHandler
  4035  0013A6  C00D  F0F9         	movff	EUSART1_SetRxInterruptHandler@interruptHandler+1,_EUSART1_RxDefaultInterruptHandl
      +                          er+1
  4036  0013AA  0012               	return		;funcret
  4037  0013AC                     __end_of_EUSART1_SetRxInterruptHandler:
  4038                           	opt callstack 0
  4039                           
  4040 ;; *************** function _ADC_Initialize *****************
  4041 ;; Defined at:
  4042 ;;		line 60 in file "mcc_generated_files/adc.c"
  4043 ;; Parameters:    Size  Location     Type
  4044 ;;		None
  4045 ;; Auto vars:     Size  Location     Type
  4046 ;;		None
  4047 ;; Return value:  Size  Location     Type
  4048 ;;                  1    wreg      void 
  4049 ;; Registers used:
  4050 ;;		wreg, status,2
  4051 ;; Tracked objects:
  4052 ;;		On entry : 0/0
  4053 ;;		On exit  : 0/0
  4054 ;;		Unchanged: 0/0
  4055 ;; Data sizes:     COMRAM   BANK0   BANK1
  4056 ;;      Params:         0       0       0
  4057 ;;      Locals:         0       0       0
  4058 ;;      Temps:          0       0       0
  4059 ;;      Totals:         0       0       0
  4060 ;;Total ram usage:        0 bytes
  4061 ;; Hardware stack levels used:    1
  4062 ;; Hardware stack levels required when called:    6
  4063 ;; This function calls:
  4064 ;;		Nothing
  4065 ;; This function is called by:
  4066 ;;		_SYSTEM_Initialize
  4067 ;; This function uses a non-reentrant model
  4068 ;;
  4069                           
  4070                           	psect	text16
  4071  0012F0                     __ptext16:
  4072                           	opt callstack 0
  4073  0012F0                     _ADC_Initialize:
  4074                           	opt callstack 23
  4075                           
  4076                           ;adc.c: 65: ADCON0 = 0x01;
  4077                           
  4078                           ;incstack = 0
  4079  0012F0  0E01               	movlw	1
  4080  0012F2  6EC2               	movwf	194,c	;volatile
  4081                           
  4082                           ;adc.c: 68: ADCON1 = 0x00;
  4083  0012F4  0E00               	movlw	0
  4084  0012F6  6EC1               	movwf	193,c	;volatile
  4085                           
  4086                           ;adc.c: 71: ADCON2 = 0x8C;
  4087  0012F8  0E8C               	movlw	140
  4088  0012FA  6EC0               	movwf	192,c	;volatile
  4089                           
  4090                           ;adc.c: 74: ADRESL = 0x00;
  4091  0012FC  0E00               	movlw	0
  4092  0012FE  6EC3               	movwf	195,c	;volatile
  4093                           
  4094                           ;adc.c: 77: ADRESH = 0x00;
  4095  001300  0E00               	movlw	0
  4096  001302  6EC4               	movwf	196,c	;volatile
  4097                           
  4098                           ;adc.c: 80: PIE1bits.ADIE = 1;
  4099  001304  8C9D               	bsf	157,6,c	;volatile
  4100  001306  0012               	return		;funcret
  4101  001308                     __end_of_ADC_Initialize:
  4102                           	opt callstack 0
  4103                           
  4104 ;; *************** function _EUSART1_is_tx_done *****************
  4105 ;; Defined at:
  4106 ;;		line 124 in file "mcc_generated_files/eusart1.c"
  4107 ;; Parameters:    Size  Location     Type
  4108 ;;		None
  4109 ;; Auto vars:     Size  Location     Type
  4110 ;;		None
  4111 ;; Return value:  Size  Location     Type
  4112 ;;                  1    wreg      unsigned char 
  4113 ;; Registers used:
  4114 ;;		wreg
  4115 ;; Tracked objects:
  4116 ;;		On entry : 0/0
  4117 ;;		On exit  : 0/0
  4118 ;;		Unchanged: 0/0
  4119 ;; Data sizes:     COMRAM   BANK0   BANK1
  4120 ;;      Params:         0       0       0
  4121 ;;      Locals:         0       0       0
  4122 ;;      Temps:          0       0       0
  4123 ;;      Totals:         0       0       0
  4124 ;;Total ram usage:        0 bytes
  4125 ;; Hardware stack levels used:    1
  4126 ;; Hardware stack levels required when called:    6
  4127 ;; This function calls:
  4128 ;;		Nothing
  4129 ;; This function is called by:
  4130 ;;		_main
  4131 ;; This function uses a non-reentrant model
  4132 ;;
  4133                           
  4134                           	psect	text17
  4135  001362                     __ptext17:
  4136                           	opt callstack 0
  4137  001362                     _EUSART1_is_tx_done:
  4138                           	opt callstack 24
  4139                           
  4140                           ;eusart1.c: 126: return TXSTA1bits.TRMT;
  4141                           
  4142                           ;incstack = 0
  4143  001362  A2AC               	btfss	172,1,c	;volatile
  4144  001364  D002               	goto	u1790
  4145  001366  0E01               	movlw	1
  4146  001368  0012               	return	
  4147  00136A                     u1790:
  4148  00136A  0E00               	movlw	0
  4149  00136C  0012               	return		;funcret
  4150  00136E                     __end_of_EUSART1_is_tx_done:
  4151                           	opt callstack 0
  4152                           
  4153 ;; *************** function _EUSART1_is_rx_ready *****************
  4154 ;; Defined at:
  4155 ;;		line 119 in file "mcc_generated_files/eusart1.c"
  4156 ;; Parameters:    Size  Location     Type
  4157 ;;		None
  4158 ;; Auto vars:     Size  Location     Type
  4159 ;;		None
  4160 ;; Return value:  Size  Location     Type
  4161 ;;                  1    wreg      unsigned char 
  4162 ;; Registers used:
  4163 ;;		wreg, status,2
  4164 ;; Tracked objects:
  4165 ;;		On entry : 0/0
  4166 ;;		On exit  : 0/0
  4167 ;;		Unchanged: 0/0
  4168 ;; Data sizes:     COMRAM   BANK0   BANK1
  4169 ;;      Params:         0       0       0
  4170 ;;      Locals:         0       0       0
  4171 ;;      Temps:          0       0       0
  4172 ;;      Totals:         0       0       0
  4173 ;;Total ram usage:        0 bytes
  4174 ;; Hardware stack levels used:    1
  4175 ;; Hardware stack levels required when called:    6
  4176 ;; This function calls:
  4177 ;;		Nothing
  4178 ;; This function is called by:
  4179 ;;		_main
  4180 ;; This function uses a non-reentrant model
  4181 ;;
  4182                           
  4183                           	psect	text18
  4184  0013B2                     __ptext18:
  4185                           	opt callstack 0
  4186  0013B2                     _EUSART1_is_rx_ready:
  4187                           	opt callstack 24
  4188                           
  4189                           ;eusart1.c: 121: return eusart1RxCount;
  4190                           
  4191                           ;incstack = 0
  4192  0013B2  5048               	movf	_eusart1RxCount^0,w,c	;volatile
  4193  0013B4  0012               	return		;funcret
  4194  0013B6                     __end_of_EUSART1_is_rx_ready:
  4195                           	opt callstack 0
  4196                           
  4197 ;; *************** function _ADC_run *****************
  4198 ;; Defined at:
  4199 ;;		line 243 in file "main.c"
  4200 ;; Parameters:    Size  Location     Type
  4201 ;;		None
  4202 ;; Auto vars:     Size  Location     Type
  4203 ;;  Vnow            4    4[BANK0 ] unsigned long 
  4204 ;;  adc_value       2    8[BANK0 ] unsigned int 
  4205 ;; Return value:  Size  Location     Type
  4206 ;;                  1    wreg      void 
  4207 ;; Registers used:
  4208 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4209 ;; Tracked objects:
  4210 ;;		On entry : 0/0
  4211 ;;		On exit  : 0/0
  4212 ;;		Unchanged: 0/0
  4213 ;; Data sizes:     COMRAM   BANK0   BANK1
  4214 ;;      Params:         0       0       0
  4215 ;;      Locals:         0      10       0
  4216 ;;      Temps:          0       0       0
  4217 ;;      Totals:         0      10       0
  4218 ;;Total ram usage:       10 bytes
  4219 ;; Hardware stack levels used:    1
  4220 ;; Hardware stack levels required when called:    9
  4221 ;; This function calls:
  4222 ;;		_ADC_GetConversionResult
  4223 ;;		_ADC_IsConversionDone
  4224 ;;		_ADC_StartConversion
  4225 ;;		___lldiv
  4226 ;;		___lmul
  4227 ;;		___lwmod
  4228 ;;		_check_register
  4229 ;;		_string_tx_uart2
  4230 ;;		_u32_sqrt
  4231 ;; This function is called by:
  4232 ;;		_main
  4233 ;; This function uses a non-reentrant model
  4234 ;;
  4235                           
  4236                           	psect	text19
  4237  0008B4                     __ptext19:
  4238                           	opt callstack 0
  4239  0008B4                     _ADC_run:
  4240                           	opt callstack 21
  4241                           
  4242                           ;main.c: 245: static uint32_t Vrms=0;;main.c: 246: static uint32_t sample_total=0;;main.
      +                          c: 247: static uint16_t adc_count=0;;main.c: 248: static uint16_t sample_count=0;;main.c
      +                          : 250: if(ADC_IsConversionDone())
  4243                           
  4244                           ;incstack = 0
  4245  0008B4  ECB7  F009         	call	_ADC_IsConversionDone	;wreg free
  4246  0008B8  0900               	iorlw	0
  4247  0008BA  B4D8               	btfsc	status,2,c
  4248  0008BC  D03D               	goto	l3355
  4249                           
  4250                           ;main.c: 251: {;main.c: 252: uint16_t adc_value=ADC_GetConversionResult();
  4251  0008BE  EC90  F009         	call	_ADC_GetConversionResult	;wreg free
  4252  0008C2  C00C  F0F4         	movff	?_ADC_GetConversionResult,ADC_run@adc_value
  4253  0008C6  C00D  F0F5         	movff	?_ADC_GetConversionResult+1,ADC_run@adc_value+1
  4254                           
  4255                           ;main.c: 253: ADC_StartConversion();
  4256  0008CA  ECDB  F009         	call	_ADC_StartConversion	;wreg free
  4257                           
  4258                           ;main.c: 255: uint32_t Vnow=(adc_value>=512)?adc_value-512:512-adc_value;
  4259  0008CE  0E02               	movlw	2
  4260  0008D0  0100               	movlb	0	; () banked
  4261  0008D2  5DF5               	subwf	(ADC_run@adc_value+1)& (0+255),w,b
  4262  0008D4  B0D8               	btfsc	status,0,c
  4263  0008D6  D008               	goto	l3347
  4264                           
  4265                           ; BSR set to: 0
  4266  0008D8  51F4               	movf	ADC_run@adc_value& (0+255),w,b
  4267  0008DA  0800               	sublw	0
  4268  0008DC  6FEC               	movwf	_ADC_run$1496& (0+255),b
  4269  0008DE  51F5               	movf	(ADC_run@adc_value+1)& (0+255),w,b
  4270  0008E0  A0D8               	btfss	status,0,c
  4271  0008E2  2AE8               	incf	wreg,f,c
  4272  0008E4  0802               	sublw	2
  4273  0008E6  D005               	goto	L8
  4274  0008E8                     l3347:
  4275                           
  4276                           ; BSR set to: 0
  4277  0008E8  0E00               	movlw	0
  4278  0008EA  25F4               	addwf	ADC_run@adc_value& (0+255),w,b
  4279  0008EC  6FEC               	movwf	_ADC_run$1496& (0+255),b
  4280  0008EE  0EFE               	movlw	254
  4281  0008F0  21F5               	addwfc	(ADC_run@adc_value+1)& (0+255),w,b
  4282  0008F2                     L8:
  4283  0008F2  6FED               	movwf	(_ADC_run$1496+1)& (0+255),b
  4284                           
  4285                           ; BSR set to: 0
  4286  0008F4  C0EC  F0F0         	movff	_ADC_run$1496,ADC_run@Vnow
  4287  0008F8  C0ED  F0F1         	movff	_ADC_run$1496+1,ADC_run@Vnow+1
  4288  0008FC  6BF2               	clrf	(ADC_run@Vnow+2)& (0+255),b
  4289  0008FE  6BF3               	clrf	(ADC_run@Vnow+3)& (0+255),b
  4290                           
  4291                           ; BSR set to: 0
  4292                           ;main.c: 256: Vrms+=Vnow*Vnow;
  4293  000900  C0F0  F00C         	movff	ADC_run@Vnow,___lmul@multiplier
  4294  000904  C0F1  F00D         	movff	ADC_run@Vnow+1,___lmul@multiplier+1
  4295  000908  C0F2  F00E         	movff	ADC_run@Vnow+2,___lmul@multiplier+2
  4296  00090C  C0F3  F00F         	movff	ADC_run@Vnow+3,___lmul@multiplier+3
  4297  000910  C0F0  F010         	movff	ADC_run@Vnow,___lmul@multiplicand
  4298  000914  C0F1  F011         	movff	ADC_run@Vnow+1,___lmul@multiplicand+1
  4299  000918  C0F2  F012         	movff	ADC_run@Vnow+2,___lmul@multiplicand+2
  4300  00091C  C0F3  F013         	movff	ADC_run@Vnow+3,___lmul@multiplicand+3
  4301  000920  ECBB  F007         	call	___lmul	;wreg free
  4302  000924  500C               	movf	?___lmul^0,w,c
  4303  000926  2637               	addwf	ADC_run@Vrms^0,f,c
  4304  000928  500D               	movf	(?___lmul+1)^0,w,c
  4305  00092A  2238               	addwfc	(ADC_run@Vrms+1)^0,f,c
  4306  00092C  500E               	movf	(?___lmul+2)^0,w,c
  4307  00092E  2239               	addwfc	(ADC_run@Vrms+2)^0,f,c
  4308  000930  500F               	movf	(?___lmul+3)^0,w,c
  4309  000932  223A               	addwfc	(ADC_run@Vrms+3)^0,f,c
  4310                           
  4311                           ;main.c: 257: adc_count++;
  4312  000934  4A3D               	infsnz	ADC_run@adc_count^0,f,c
  4313  000936  2A3E               	incf	(ADC_run@adc_count+1)^0,f,c
  4314  000938                     l3355:
  4315                           
  4316                           ;main.c: 258: };main.c: 260: if(125<=timer)
  4317  000938  5040               	movf	(_timer+1)^0,w,c	;volatile
  4318  00093A  E104               	bnz	u1820
  4319  00093C  0E7D               	movlw	125
  4320  00093E  5C3F               	subwf	_timer^0,w,c	;volatile
  4321  000940  A0D8               	btfss	status,0,c
  4322  000942  0012               	return	
  4323  000944                     u1820:
  4324                           
  4325                           ;main.c: 261: {;main.c: 262: timer=0;
  4326  000944  0E00               	movlw	0
  4327  000946  6E40               	movwf	(_timer+1)^0,c	;volatile
  4328  000948  0E00               	movlw	0
  4329  00094A  6E3F               	movwf	_timer^0,c	;volatile
  4330                           
  4331                           ;main.c: 263: Modbus_Holding_Register[61]=u32_sqrt(Vrms/adc_count);
  4332  00094C  C037  F00C         	movff	ADC_run@Vrms,___lldiv@dividend
  4333  000950  C038  F00D         	movff	ADC_run@Vrms+1,___lldiv@dividend+1
  4334  000954  C039  F00E         	movff	ADC_run@Vrms+2,___lldiv@dividend+2
  4335  000958  C03A  F00F         	movff	ADC_run@Vrms+3,___lldiv@dividend+3
  4336  00095C  C03D  F010         	movff	ADC_run@adc_count,___lldiv@divisor
  4337  000960  C03E  F011         	movff	ADC_run@adc_count+1,___lldiv@divisor+1
  4338  000964  6A12               	clrf	(___lldiv@divisor+2)^0,c
  4339  000966  6A13               	clrf	(___lldiv@divisor+3)^0,c
  4340  000968  EC18  F007         	call	___lldiv	;wreg free
  4341  00096C  C00C  F019         	movff	?___lldiv,u32_sqrt@a
  4342  000970  C00D  F01A         	movff	?___lldiv+1,u32_sqrt@a+1
  4343  000974  C00E  F01B         	movff	?___lldiv+2,u32_sqrt@a+2
  4344  000978  C00F  F01C         	movff	?___lldiv+3,u32_sqrt@a+3
  4345  00097C  EC8E  F006         	call	_u32_sqrt	;wreg free
  4346  000980  C019  F0DA         	movff	?_u32_sqrt,_Modbus_Holding_Register+122	;volatile
  4347  000984  C01A  F0DB         	movff	?_u32_sqrt+1,_Modbus_Holding_Register+123	;volatile
  4348                           
  4349                           ;main.c: 264: sample_total=Modbus_Holding_Register[61];
  4350  000988  C0DA  F033         	movff	_Modbus_Holding_Register+122,ADC_run@sample_total	;volatile
  4351  00098C  C0DB  F034         	movff	_Modbus_Holding_Register+123,ADC_run@sample_total+1	;volatile
  4352  000990  6A35               	clrf	(ADC_run@sample_total+2)^0,c
  4353  000992  6A36               	clrf	(ADC_run@sample_total+3)^0,c
  4354                           
  4355                           ;main.c: 265: if(Modbus_Holding_Register[61]>Modbus_Holding_Register[62])
  4356  000994  0100               	movlb	0	; () banked
  4357  000996  51DA               	movf	(_Modbus_Holding_Register+122)& (0+255),w,b	;volatile
  4358  000998  5DDC               	subwf	(_Modbus_Holding_Register+124)& (0+255),w,b	;volatile
  4359  00099A  51DB               	movf	(_Modbus_Holding_Register+123)& (0+255),w,b	;volatile
  4360  00099C  59DD               	subwfb	(_Modbus_Holding_Register+125)& (0+255),w,b	;volatile
  4361  00099E  B0D8               	btfsc	status,0,c
  4362  0009A0  D010               	goto	l521
  4363                           
  4364                           ; BSR set to: 0
  4365                           ;main.c: 266: {;main.c: 267: Modbus_Holding_Register[64]=0;
  4366  0009A2  0E00               	movlw	0
  4367  0009A4  6FE1               	movwf	(_Modbus_Holding_Register+129)& (0+255),b	;volatile
  4368  0009A6  0E00               	movlw	0
  4369  0009A8  6FE0               	movwf	(_Modbus_Holding_Register+128)& (0+255),b	;volatile
  4370                           
  4371                           ;main.c: 268: Modbus_Holding_Register[65]=1;
  4372  0009AA  0E00               	movlw	0
  4373  0009AC  6FE3               	movwf	(_Modbus_Holding_Register+131)& (0+255),b	;volatile
  4374  0009AE  0E01               	movlw	1
  4375  0009B0  6FE2               	movwf	(_Modbus_Holding_Register+130)& (0+255),b	;volatile
  4376                           
  4377                           ; BSR set to: 0
  4378                           ;main.c: 269: string_tx_uart2("jumping\n");
  4379  0009B2  0EB0               	movlw	low STR_4
  4380  0009B4  6E0D               	movwf	string_tx_uart2@text^0,c
  4381  0009B6  0E1F               	movlw	high STR_4
  4382  0009B8  6E0E               	movwf	(string_tx_uart2@text+1)^0,c
  4383  0009BA  EC57  F008         	call	_string_tx_uart2	;wreg free
  4384                           
  4385                           ;main.c: 270: check_register();
  4386  0009BE  EC0C  F008         	call	_check_register	;wreg free
  4387  0009C2                     l521:
  4388                           
  4389                           ;main.c: 271: };main.c: 272: Vrms=0;
  4390  0009C2  0E00               	movlw	0
  4391  0009C4  6E37               	movwf	ADC_run@Vrms^0,c
  4392  0009C6  0E00               	movlw	0
  4393  0009C8  6E38               	movwf	(ADC_run@Vrms+1)^0,c
  4394  0009CA  0E00               	movlw	0
  4395  0009CC  6E39               	movwf	(ADC_run@Vrms+2)^0,c
  4396  0009CE  0E00               	movlw	0
  4397  0009D0  6E3A               	movwf	(ADC_run@Vrms+3)^0,c
  4398                           
  4399                           ;main.c: 273: adc_count=0;
  4400  0009D2  0E00               	movlw	0
  4401  0009D4  6E3E               	movwf	(ADC_run@adc_count+1)^0,c
  4402  0009D6  0E00               	movlw	0
  4403  0009D8  6E3D               	movwf	ADC_run@adc_count^0,c
  4404                           
  4405                           ;main.c: 275: if(Modbus_Holding_Register[63])
  4406  0009DA  0100               	movlb	0	; () banked
  4407  0009DC  51DE               	movf	(_Modbus_Holding_Register+126)& (0+255),w,b	;volatile
  4408  0009DE  11DF               	iorwf	(_Modbus_Holding_Register+127)& (0+255),w,b	;volatile
  4409  0009E0  B4D8               	btfsc	status,2,c
  4410  0009E2  D04B               	goto	l3387
  4411                           
  4412                           ; BSR set to: 0
  4413                           ;main.c: 276: {;main.c: 277: sample_count++;
  4414  0009E4  4A3B               	infsnz	ADC_run@sample_count^0,f,c
  4415  0009E6  2A3C               	incf	(ADC_run@sample_count+1)^0,f,c
  4416                           
  4417                           ; BSR set to: 0
  4418                           ;main.c: 278: if(sample_count>=Modbus_Holding_Register[63])
  4419  0009E8  51DE               	movf	(_Modbus_Holding_Register+126)& (0+255),w,b	;volatile
  4420  0009EA  5C3B               	subwf	ADC_run@sample_count^0,w,c
  4421  0009EC  51DF               	movf	(_Modbus_Holding_Register+127)& (0+255),w,b	;volatile
  4422  0009EE  583C               	subwfb	(ADC_run@sample_count+1)^0,w,c
  4423  0009F0  A0D8               	btfss	status,0,c
  4424  0009F2  0012               	return	
  4425                           
  4426                           ; BSR set to: 0
  4427                           ;main.c: 279: {;main.c: 280: Modbus_Holding_Register[Modbus_Holding_Register[60]%60]=sam
      +                          ple_total/sample_count;
  4428  0009F4  C0D8  F00C         	movff	_Modbus_Holding_Register+120,___lwmod@dividend	;volatile
  4429  0009F8  C0D9  F00D         	movff	_Modbus_Holding_Register+121,___lwmod@dividend+1	;volatile
  4430  0009FC  0E00               	movlw	0
  4431  0009FE  6E0F               	movwf	(___lwmod@divisor+1)^0,c
  4432  000A00  0E3C               	movlw	60
  4433  000A02  6E0E               	movwf	___lwmod@divisor^0,c
  4434  000A04  EC79  F008         	call	___lwmod	;wreg free
  4435  000A08  90D8               	bcf	status,0,c
  4436  000A0A  360C               	rlcf	?___lwmod^0,f,c
  4437  000A0C  360D               	rlcf	(?___lwmod+1)^0,f,c
  4438  000A0E  0E60               	movlw	low _Modbus_Holding_Register
  4439  000A10  240C               	addwf	?___lwmod^0,w,c
  4440  000A12  6ED9               	movwf	fsr2l,c
  4441  000A14  0E00               	movlw	high _Modbus_Holding_Register
  4442  000A16  200D               	addwfc	(?___lwmod+1)^0,w,c
  4443  000A18  6EDA               	movwf	fsr2h,c
  4444  000A1A  C033  F00C         	movff	ADC_run@sample_total,___lldiv@dividend
  4445  000A1E  C034  F00D         	movff	ADC_run@sample_total+1,___lldiv@dividend+1
  4446  000A22  C035  F00E         	movff	ADC_run@sample_total+2,___lldiv@dividend+2
  4447  000A26  C036  F00F         	movff	ADC_run@sample_total+3,___lldiv@dividend+3
  4448  000A2A  C03B  F010         	movff	ADC_run@sample_count,___lldiv@divisor
  4449  000A2E  C03C  F011         	movff	ADC_run@sample_count+1,___lldiv@divisor+1
  4450  000A32  6A12               	clrf	(___lldiv@divisor+2)^0,c
  4451  000A34  6A13               	clrf	(___lldiv@divisor+3)^0,c
  4452  000A36  EC18  F007         	call	___lldiv	;wreg free
  4453  000A3A  C00C  FFDE         	movff	?___lldiv,postinc2
  4454  000A3E  C00D  FFDD         	movff	?___lldiv+1,postdec2
  4455                           
  4456                           ;main.c: 281: Modbus_Holding_Register[60]=(Modbus_Holding_Register[60]==59999)?0:Modbus_
      +                          Holding_Register[60]+1;
  4457  000A42  0E5F               	movlw	95
  4458  000A44  0100               	movlb	0	; () banked
  4459  000A46  19D8               	xorwf	(_Modbus_Holding_Register+120)& (0+255),w,b	;volatile
  4460  000A48  E104               	bnz	u1860
  4461  000A4A  0EEA               	movlw	234
  4462  000A4C  19D9               	xorwf	(_Modbus_Holding_Register+121)& (0+255),w,b	;volatile
  4463  000A4E  B4D8               	btfsc	status,2,c
  4464  000A50  D007               	goto	l3383
  4465  000A52                     u1860:
  4466                           
  4467                           ; BSR set to: 0
  4468  000A52  0E01               	movlw	1
  4469  000A54  25D8               	addwf	(_Modbus_Holding_Register+120)& (0+255),w,b	;volatile
  4470  000A56  6FEE               	movwf	_ADC_run$1500& (0+255),b
  4471  000A58  0E00               	movlw	0
  4472  000A5A  21D9               	addwfc	(_Modbus_Holding_Register+121)& (0+255),w,b	;volatile
  4473  000A5C  6FEF               	movwf	(_ADC_run$1500+1)& (0+255),b
  4474  000A5E  D004               	goto	l3385
  4475  000A60                     l3383:
  4476                           
  4477                           ; BSR set to: 0
  4478  000A60  0E00               	movlw	0
  4479  000A62  6FEF               	movwf	(_ADC_run$1500+1)& (0+255),b
  4480  000A64  0E00               	movlw	0
  4481  000A66  6FEE               	movwf	_ADC_run$1500& (0+255),b
  4482  000A68                     l3385:
  4483                           
  4484                           ; BSR set to: 0
  4485  000A68  C0EE  F0D8         	movff	_ADC_run$1500,_Modbus_Holding_Register+120	;volatile
  4486  000A6C  C0EF  F0D9         	movff	_ADC_run$1500+1,_Modbus_Holding_Register+121	;volatile
  4487                           
  4488                           ;main.c: 282: sample_count=0;
  4489  000A70  0E00               	movlw	0
  4490  000A72  6E3C               	movwf	(ADC_run@sample_count+1)^0,c
  4491  000A74  0E00               	movlw	0
  4492  000A76  6E3B               	movwf	ADC_run@sample_count^0,c
  4493  000A78  0012               	return	
  4494  000A7A                     l3387:
  4495                           
  4496                           ; BSR set to: 0
  4497                           ;main.c: 285: else;main.c: 286: sample_count=0;
  4498  000A7A  0E00               	movlw	0
  4499  000A7C  6E3C               	movwf	(ADC_run@sample_count+1)^0,c
  4500  000A7E  0E00               	movlw	0
  4501  000A80  6E3B               	movwf	ADC_run@sample_count^0,c
  4502  000A82  0012               	return		;funcret
  4503  000A84                     __end_of_ADC_run:
  4504                           	opt callstack 0
  4505                           
  4506 ;; *************** function _u32_sqrt *****************
  4507 ;; Defined at:
  4508 ;;		line 202 in file "main.c"
  4509 ;; Parameters:    Size  Location     Type
  4510 ;;  a               4   24[COMRAM] unsigned long 
  4511 ;; Auto vars:     Size  Location     Type
  4512 ;;  i               2   40[COMRAM] int 
  4513 ;;  root            4   46[COMRAM] unsigned long 
  4514 ;;  rem             4   42[COMRAM] unsigned long 
  4515 ;;  pisor           4   36[COMRAM] unsigned long 
  4516 ;; Return value:  Size  Location     Type
  4517 ;;                  2   24[COMRAM] unsigned short 
  4518 ;; Registers used:
  4519 ;;		wreg, status,2, status,0
  4520 ;; Tracked objects:
  4521 ;;		On entry : 0/0
  4522 ;;		On exit  : 0/0
  4523 ;;		Unchanged: 0/0
  4524 ;; Data sizes:     COMRAM   BANK0   BANK1
  4525 ;;      Params:         4       0       0
  4526 ;;      Locals:        14       0       0
  4527 ;;      Temps:          8       0       0
  4528 ;;      Totals:        26       0       0
  4529 ;;Total ram usage:       26 bytes
  4530 ;; Hardware stack levels used:    1
  4531 ;; Hardware stack levels required when called:    6
  4532 ;; This function calls:
  4533 ;;		Nothing
  4534 ;; This function is called by:
  4535 ;;		_ADC_run
  4536 ;; This function uses a non-reentrant model
  4537 ;;
  4538                           
  4539                           	psect	text20
  4540  000D1C                     __ptext20:
  4541                           	opt callstack 0
  4542  000D1C                     _u32_sqrt:
  4543                           	opt callstack 23
  4544                           
  4545                           ;main.c: 204: unsigned long rem = 0;
  4546                           
  4547                           ;incstack = 0
  4548  000D1C  0E00               	movlw	0
  4549  000D1E  6E2B               	movwf	u32_sqrt@rem^0,c
  4550  000D20  0E00               	movlw	0
  4551  000D22  6E2C               	movwf	(u32_sqrt@rem+1)^0,c
  4552  000D24  0E00               	movlw	0
  4553  000D26  6E2D               	movwf	(u32_sqrt@rem+2)^0,c
  4554  000D28  0E00               	movlw	0
  4555  000D2A  6E2E               	movwf	(u32_sqrt@rem+3)^0,c
  4556                           
  4557                           ;main.c: 205: unsigned long root = 0;
  4558  000D2C  0E00               	movlw	0
  4559  000D2E  6E2F               	movwf	u32_sqrt@root^0,c
  4560  000D30  0E00               	movlw	0
  4561  000D32  6E30               	movwf	(u32_sqrt@root+1)^0,c
  4562  000D34  0E00               	movlw	0
  4563  000D36  6E31               	movwf	(u32_sqrt@root+2)^0,c
  4564  000D38  0E00               	movlw	0
  4565  000D3A  6E32               	movwf	(u32_sqrt@root+3)^0,c
  4566                           
  4567                           ;main.c: 207: for(int i=0; i<16; i++)
  4568  000D3C  0E00               	movlw	0
  4569  000D3E  6E2A               	movwf	(u32_sqrt@i+1)^0,c
  4570  000D40  0E00               	movlw	0
  4571  000D42  6E29               	movwf	u32_sqrt@i^0,c
  4572  000D44                     l3231:
  4573                           
  4574                           ;main.c: 208: {;main.c: 209: root <<= 1;
  4575  000D44  90D8               	bcf	status,0,c
  4576  000D46  362F               	rlcf	u32_sqrt@root^0,f,c
  4577  000D48  3630               	rlcf	(u32_sqrt@root+1)^0,f,c
  4578  000D4A  3631               	rlcf	(u32_sqrt@root+2)^0,f,c
  4579  000D4C  3632               	rlcf	(u32_sqrt@root+3)^0,f,c
  4580                           
  4581                           ;main.c: 210: rem = ((rem << 2) + (a >> 30));
  4582  000D4E  C019  F01D         	movff	u32_sqrt@a,??_u32_sqrt
  4583  000D52  C01A  F01E         	movff	u32_sqrt@a+1,??_u32_sqrt+1
  4584  000D56  C01B  F01F         	movff	u32_sqrt@a+2,??_u32_sqrt+2
  4585  000D5A  C01C  F020         	movff	u32_sqrt@a+3,??_u32_sqrt+3
  4586  000D5E  0E1F               	movlw	31
  4587  000D60  D005               	goto	u1640
  4588  000D62                     u1645:
  4589  000D62  90D8               	bcf	status,0,c
  4590  000D64  3220               	rrcf	(??_u32_sqrt+3)^0,f,c
  4591  000D66  321F               	rrcf	(??_u32_sqrt+2)^0,f,c
  4592  000D68  321E               	rrcf	(??_u32_sqrt+1)^0,f,c
  4593  000D6A  321D               	rrcf	??_u32_sqrt^0,f,c
  4594  000D6C                     u1640:
  4595  000D6C  2EE8               	decfsz	wreg,f,c
  4596  000D6E  D7F9               	goto	u1645
  4597  000D70  C02B  F021         	movff	u32_sqrt@rem,??_u32_sqrt+4
  4598  000D74  C02C  F022         	movff	u32_sqrt@rem+1,??_u32_sqrt+5
  4599  000D78  C02D  F023         	movff	u32_sqrt@rem+2,??_u32_sqrt+6
  4600  000D7C  C02E  F024         	movff	u32_sqrt@rem+3,??_u32_sqrt+7
  4601  000D80  0E02               	movlw	2
  4602  000D82                     u1655:
  4603  000D82  90D8               	bcf	status,0,c
  4604  000D84  3621               	rlcf	(??_u32_sqrt+4)^0,f,c
  4605  000D86  3622               	rlcf	(??_u32_sqrt+5)^0,f,c
  4606  000D88  3623               	rlcf	(??_u32_sqrt+6)^0,f,c
  4607  000D8A  3624               	rlcf	(??_u32_sqrt+7)^0,f,c
  4608  000D8C  2EE8               	decfsz	wreg,f,c
  4609  000D8E  D7F9               	goto	u1655
  4610  000D90  501D               	movf	??_u32_sqrt^0,w,c
  4611  000D92  2421               	addwf	(??_u32_sqrt+4)^0,w,c
  4612  000D94  6E2B               	movwf	u32_sqrt@rem^0,c
  4613  000D96  501E               	movf	(??_u32_sqrt+1)^0,w,c
  4614  000D98  2022               	addwfc	(??_u32_sqrt+5)^0,w,c
  4615  000D9A  6E2C               	movwf	(u32_sqrt@rem+1)^0,c
  4616  000D9C  501F               	movf	(??_u32_sqrt+2)^0,w,c
  4617  000D9E  2023               	addwfc	(??_u32_sqrt+6)^0,w,c
  4618  000DA0  6E2D               	movwf	(u32_sqrt@rem+2)^0,c
  4619  000DA2  5020               	movf	(??_u32_sqrt+3)^0,w,c
  4620  000DA4  2024               	addwfc	(??_u32_sqrt+7)^0,w,c
  4621  000DA6  6E2E               	movwf	(u32_sqrt@rem+3)^0,c
  4622                           
  4623                           ;main.c: 211: a <<= 2;
  4624  000DA8  0E02               	movlw	2
  4625  000DAA                     u1665:
  4626  000DAA  90D8               	bcf	status,0,c
  4627  000DAC  3619               	rlcf	u32_sqrt@a^0,f,c
  4628  000DAE  361A               	rlcf	(u32_sqrt@a+1)^0,f,c
  4629  000DB0  361B               	rlcf	(u32_sqrt@a+2)^0,f,c
  4630  000DB2  361C               	rlcf	(u32_sqrt@a+3)^0,f,c
  4631  000DB4  2EE8               	decfsz	wreg,f,c
  4632  000DB6  D7F9               	goto	u1665
  4633                           
  4634                           ;main.c: 212: pisor = (root<<1) + 1;
  4635  000DB8  90D8               	bcf	status,0,c
  4636  000DBA  342F               	rlcf	u32_sqrt@root^0,w,c
  4637  000DBC  6E1D               	movwf	??_u32_sqrt^0,c
  4638  000DBE  3430               	rlcf	(u32_sqrt@root+1)^0,w,c
  4639  000DC0  6E1E               	movwf	(??_u32_sqrt+1)^0,c
  4640  000DC2  3431               	rlcf	(u32_sqrt@root+2)^0,w,c
  4641  000DC4  6E1F               	movwf	(??_u32_sqrt+2)^0,c
  4642  000DC6  3432               	rlcf	(u32_sqrt@root+3)^0,w,c
  4643  000DC8  6E20               	movwf	(??_u32_sqrt+3)^0,c
  4644  000DCA  0E01               	movlw	1
  4645  000DCC  241D               	addwf	??_u32_sqrt^0,w,c
  4646  000DCE  6E25               	movwf	u32_sqrt@pisor^0,c
  4647  000DD0  0E00               	movlw	0
  4648  000DD2  201E               	addwfc	(??_u32_sqrt+1)^0,w,c
  4649  000DD4  6E26               	movwf	(u32_sqrt@pisor+1)^0,c
  4650  000DD6  0E00               	movlw	0
  4651  000DD8  201F               	addwfc	(??_u32_sqrt+2)^0,w,c
  4652  000DDA  6E27               	movwf	(u32_sqrt@pisor+2)^0,c
  4653  000DDC  0E00               	movlw	0
  4654  000DDE  2020               	addwfc	(??_u32_sqrt+3)^0,w,c
  4655  000DE0  6E28               	movwf	(u32_sqrt@pisor+3)^0,c
  4656                           
  4657                           ;main.c: 213: if(pisor <= rem)
  4658  000DE2  5025               	movf	u32_sqrt@pisor^0,w,c
  4659  000DE4  5C2B               	subwf	u32_sqrt@rem^0,w,c
  4660  000DE6  5026               	movf	(u32_sqrt@pisor+1)^0,w,c
  4661  000DE8  582C               	subwfb	(u32_sqrt@rem+1)^0,w,c
  4662  000DEA  5027               	movf	(u32_sqrt@pisor+2)^0,w,c
  4663  000DEC  582D               	subwfb	(u32_sqrt@rem+2)^0,w,c
  4664  000DEE  5028               	movf	(u32_sqrt@pisor+3)^0,w,c
  4665  000DF0  582E               	subwfb	(u32_sqrt@rem+3)^0,w,c
  4666  000DF2  A0D8               	btfss	status,0,c
  4667  000DF4  D00E               	goto	l3243
  4668                           
  4669                           ;main.c: 214: {;main.c: 215: rem -= pisor;
  4670  000DF6  5025               	movf	u32_sqrt@pisor^0,w,c
  4671  000DF8  5E2B               	subwf	u32_sqrt@rem^0,f,c
  4672  000DFA  5026               	movf	(u32_sqrt@pisor+1)^0,w,c
  4673  000DFC  5A2C               	subwfb	(u32_sqrt@rem+1)^0,f,c
  4674  000DFE  5027               	movf	(u32_sqrt@pisor+2)^0,w,c
  4675  000E00  5A2D               	subwfb	(u32_sqrt@rem+2)^0,f,c
  4676  000E02  5028               	movf	(u32_sqrt@pisor+3)^0,w,c
  4677  000E04  5A2E               	subwfb	(u32_sqrt@rem+3)^0,f,c
  4678                           
  4679                           ;main.c: 216: root++;
  4680  000E06  0E01               	movlw	1
  4681  000E08  262F               	addwf	u32_sqrt@root^0,f,c
  4682  000E0A  0E00               	movlw	0
  4683  000E0C  2230               	addwfc	(u32_sqrt@root+1)^0,f,c
  4684  000E0E  2231               	addwfc	(u32_sqrt@root+2)^0,f,c
  4685  000E10  2232               	addwfc	(u32_sqrt@root+3)^0,f,c
  4686  000E12                     l3243:
  4687  000E12  4A29               	infsnz	u32_sqrt@i^0,f,c
  4688  000E14  2A2A               	incf	(u32_sqrt@i+1)^0,f,c
  4689  000E16  BE2A               	btfsc	(u32_sqrt@i+1)^0,7,c
  4690  000E18  D795               	goto	l3231
  4691  000E1A  502A               	movf	(u32_sqrt@i+1)^0,w,c
  4692  000E1C  E104               	bnz	u1680
  4693  000E1E  0E10               	movlw	16
  4694  000E20  5C29               	subwf	u32_sqrt@i^0,w,c
  4695  000E22  A0D8               	btfss	status,0,c
  4696  000E24  D78F               	goto	l3231
  4697  000E26                     u1680:
  4698                           
  4699                           ;main.c: 217: };main.c: 218: };main.c: 219: return (uint16_t)(root);
  4700  000E26  C02F  F019         	movff	u32_sqrt@root,?_u32_sqrt
  4701  000E2A  C030  F01A         	movff	u32_sqrt@root+1,?_u32_sqrt+1
  4702  000E2E  0012               	return		;funcret
  4703  000E30                     __end_of_u32_sqrt:
  4704                           	opt callstack 0
  4705                           
  4706 ;; *************** function _check_register *****************
  4707 ;; Defined at:
  4708 ;;		line 221 in file "main.c"
  4709 ;; Parameters:    Size  Location     Type
  4710 ;;		None
  4711 ;; Auto vars:     Size  Location     Type
  4712 ;;		None
  4713 ;; Return value:  Size  Location     Type
  4714 ;;                  1    wreg      void 
  4715 ;; Registers used:
  4716 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4717 ;; Tracked objects:
  4718 ;;		On entry : 0/0
  4719 ;;		On exit  : 0/0
  4720 ;;		Unchanged: 0/0
  4721 ;; Data sizes:     COMRAM   BANK0   BANK1
  4722 ;;      Params:         0       0       0
  4723 ;;      Locals:         0       0       0
  4724 ;;      Temps:          0       0       0
  4725 ;;      Totals:         0       0       0
  4726 ;;Total ram usage:        0 bytes
  4727 ;; Hardware stack levels used:    1
  4728 ;; Hardware stack levels required when called:    8
  4729 ;; This function calls:
  4730 ;;		_string_tx_uart2
  4731 ;; This function is called by:
  4732 ;;		_ADC_run
  4733 ;;		_uart_run
  4734 ;; This function uses a non-reentrant model
  4735 ;;
  4736                           
  4737                           	psect	text21
  4738  001018                     __ptext21:
  4739                           	opt callstack 0
  4740  001018                     _check_register:
  4741                           	opt callstack 21
  4742                           
  4743                           ;main.c: 223: if(Modbus_Holding_Register[64])
  4744                           
  4745                           ;incstack = 0
  4746  001018  0100               	movlb	0	; () banked
  4747  00101A  51E0               	movf	(_Modbus_Holding_Register+128)& (0+255),w,b	;volatile
  4748  00101C  11E1               	iorwf	(_Modbus_Holding_Register+129)& (0+255),w,b	;volatile
  4749  00101E  B4D8               	btfsc	status,2,c
  4750  001020  D019               	goto	l3261
  4751                           
  4752                           ; BSR set to: 0
  4753                           ;main.c: 224: {;main.c: 225: if(Modbus_Holding_Register[65])
  4754  001022  51E2               	movf	(_Modbus_Holding_Register+130)& (0+255),w,b	;volatile
  4755  001024  11E3               	iorwf	(_Modbus_Holding_Register+131)& (0+255),w,b	;volatile
  4756  001026  B4D8               	btfsc	status,2,c
  4757  001028  D00D               	goto	l3257
  4758                           
  4759                           ; BSR set to: 0
  4760                           ;main.c: 226: {;main.c: 227: string_tx_uart2("jumping,relay can't open\n");
  4761  00102A  0E4F               	movlw	low STR_1
  4762  00102C  6E0D               	movwf	string_tx_uart2@text^0,c
  4763  00102E  0E1F               	movlw	high STR_1
  4764  001030  6E0E               	movwf	(string_tx_uart2@text+1)^0,c
  4765  001032  EC57  F008         	call	_string_tx_uart2	;wreg free
  4766                           
  4767                           ;main.c: 228: Modbus_Holding_Register[64]=0;
  4768  001036  0E00               	movlw	0
  4769  001038  0100               	movlb	0	; () banked
  4770  00103A  6FE1               	movwf	(_Modbus_Holding_Register+129)& (0+255),b	;volatile
  4771  00103C  0E00               	movlw	0
  4772  00103E  6FE0               	movwf	(_Modbus_Holding_Register+128)& (0+255),b	;volatile
  4773                           
  4774                           ; BSR set to: 0
  4775                           ;main.c: 229: LATAbits.LATA1=1;
  4776  001040  8289               	bsf	137,1,c	;volatile
  4777                           
  4778                           ;main.c: 230: }
  4779  001042  0012               	return	
  4780  001044                     l3257:
  4781                           
  4782                           ; BSR set to: 0
  4783                           ;main.c: 231: else;main.c: 232: {;main.c: 233: string_tx_uart2("relay open\n");
  4784  001044  0E9A               	movlw	low STR_2
  4785  001046  6E0D               	movwf	string_tx_uart2@text^0,c
  4786  001048  0E1F               	movlw	high STR_2
  4787  00104A  6E0E               	movwf	(string_tx_uart2@text+1)^0,c
  4788  00104C  EC57  F008         	call	_string_tx_uart2	;wreg free
  4789                           
  4790                           ;main.c: 234: LATAbits.LATA1=0;
  4791  001050  9289               	bcf	137,1,c	;volatile
  4792  001052  0012               	return	
  4793  001054                     l3261:
  4794                           
  4795                           ; BSR set to: 0
  4796                           ;main.c: 237: else;main.c: 238: {;main.c: 239: string_tx_uart2("relay close\n");
  4797  001054  0E8D               	movlw	low STR_3
  4798  001056  6E0D               	movwf	string_tx_uart2@text^0,c
  4799  001058  0E1F               	movlw	high STR_3
  4800  00105A  6E0E               	movwf	(string_tx_uart2@text+1)^0,c
  4801  00105C  EC57  F008         	call	_string_tx_uart2	;wreg free
  4802                           
  4803                           ;main.c: 240: LATAbits.LATA1=1;
  4804  001060  8289               	bsf	137,1,c	;volatile
  4805  001062  0012               	return		;funcret
  4806  001064                     __end_of_check_register:
  4807                           	opt callstack 0
  4808                           
  4809 ;; *************** function _string_tx_uart2 *****************
  4810 ;; Defined at:
  4811 ;;		line 135 in file "main.c"
  4812 ;; Parameters:    Size  Location     Type
  4813 ;;  text            2   12[COMRAM] PTR unsigned char 
  4814 ;;		 -> STR_24(5), STR_23(2), STR_22(15), STR_21(7), 
  4815 ;;		 -> STR_20(10), STR_19(6), STR_18(2), STR_17(6), 
  4816 ;;		 -> STR_16(7), STR_15(8), STR_14(2), STR_13(7), 
  4817 ;;		 -> STR_12(7), STR_11(8), STR_10(2), STR_9(6), 
  4818 ;;		 -> STR_8(7), STR_7(8), STR_6(7), STR_5(21), 
  4819 ;;		 -> STR_4(9), STR_3(13), STR_2(12), STR_1(26), 
  4820 ;; Auto vars:     Size  Location     Type
  4821 ;;  i               1   16[COMRAM] unsigned char 
  4822 ;; Return value:  Size  Location     Type
  4823 ;;                  1    wreg      void 
  4824 ;; Registers used:
  4825 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4826 ;; Tracked objects:
  4827 ;;		On entry : 0/0
  4828 ;;		On exit  : 0/0
  4829 ;;		Unchanged: 0/0
  4830 ;; Data sizes:     COMRAM   BANK0   BANK1
  4831 ;;      Params:         2       0       0
  4832 ;;      Locals:         1       0       0
  4833 ;;      Temps:          2       0       0
  4834 ;;      Totals:         5       0       0
  4835 ;;Total ram usage:        5 bytes
  4836 ;; Hardware stack levels used:    1
  4837 ;; Hardware stack levels required when called:    7
  4838 ;; This function calls:
  4839 ;;		_EUSART2_Write
  4840 ;; This function is called by:
  4841 ;;		_check_register
  4842 ;;		_ADC_run
  4843 ;;		_uart_run
  4844 ;;		_main
  4845 ;; This function uses a non-reentrant model
  4846 ;;
  4847                           
  4848                           	psect	text22
  4849  0010AE                     __ptext22:
  4850                           	opt callstack 0
  4851  0010AE                     _string_tx_uart2:
  4852                           	opt callstack 22
  4853                           
  4854                           ;main.c: 137: uint8_t i;;main.c: 138: for(i=0;text[i]!=0;i++)
  4855                           
  4856                           ;incstack = 0
  4857  0010AE  0E00               	movlw	0
  4858  0010B0  6E11               	movwf	string_tx_uart2@i^0,c
  4859  0010B2  D00F               	goto	l3057
  4860  0010B4                     l3053:
  4861                           
  4862                           ;main.c: 139: {;main.c: 140: EUSART2_Write(text[i]);
  4863  0010B4  5011               	movf	string_tx_uart2@i^0,w,c
  4864  0010B6  240D               	addwf	string_tx_uart2@text^0,w,c
  4865  0010B8  6E0F               	movwf	??_string_tx_uart2^0,c
  4866  0010BA  0E00               	movlw	0
  4867  0010BC  200E               	addwfc	(string_tx_uart2@text+1)^0,w,c
  4868  0010BE  6E10               	movwf	(??_string_tx_uart2+1)^0,c
  4869  0010C0  C00F  FFF6         	movff	??_string_tx_uart2,tblptrl
  4870  0010C4  C010  FFF7         	movff	??_string_tx_uart2+1,tblptrh
  4871  0010C8                     	if	0	;tblptru may be non-zero
  4872  0010C8                     	endif
  4873  0010C8                     	if	0	;tblptru may be non-zero
  4874  0010C8                     	endif
  4875  0010C8  0008               	tblrd		*
  4876  0010CA  50F5               	movf	tablat,w,c
  4877  0010CC  ECB5  F008         	call	_EUSART2_Write
  4878  0010D0  2A11               	incf	string_tx_uart2@i^0,f,c
  4879  0010D2                     l3057:
  4880  0010D2  5011               	movf	string_tx_uart2@i^0,w,c
  4881  0010D4  240D               	addwf	string_tx_uart2@text^0,w,c
  4882  0010D6  6E0F               	movwf	??_string_tx_uart2^0,c
  4883  0010D8  0E00               	movlw	0
  4884  0010DA  200E               	addwfc	(string_tx_uart2@text+1)^0,w,c
  4885  0010DC  6E10               	movwf	(??_string_tx_uart2+1)^0,c
  4886  0010DE  C00F  FFF6         	movff	??_string_tx_uart2,tblptrl
  4887  0010E2  C010  FFF7         	movff	??_string_tx_uart2+1,tblptrh
  4888  0010E6                     	if	0	;tblptru may be non-zero
  4889  0010E6                     	endif
  4890  0010E6                     	if	0	;tblptru may be non-zero
  4891  0010E6                     	endif
  4892  0010E6  0008               	tblrd		*
  4893  0010E8  50F5               	movf	tablat,w,c
  4894  0010EA  0900               	iorlw	0
  4895  0010EC  B4D8               	btfsc	status,2,c
  4896  0010EE  0012               	return	
  4897  0010F0  D7E1               	goto	l3053
  4898  0010F2                     __end_of_string_tx_uart2:
  4899                           	opt callstack 0
  4900                           
  4901 ;; *************** function _EUSART2_Write *****************
  4902 ;; Defined at:
  4903 ;;		line 148 in file "mcc_generated_files/eusart2.c"
  4904 ;; Parameters:    Size  Location     Type
  4905 ;;  txData          1    wreg     unsigned char 
  4906 ;; Auto vars:     Size  Location     Type
  4907 ;;  txData          1   11[COMRAM] unsigned char 
  4908 ;; Return value:  Size  Location     Type
  4909 ;;                  1    wreg      void 
  4910 ;; Registers used:
  4911 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4912 ;; Tracked objects:
  4913 ;;		On entry : 0/0
  4914 ;;		On exit  : 0/0
  4915 ;;		Unchanged: 0/0
  4916 ;; Data sizes:     COMRAM   BANK0   BANK1
  4917 ;;      Params:         0       0       0
  4918 ;;      Locals:         1       0       0
  4919 ;;      Temps:          0       0       0
  4920 ;;      Totals:         1       0       0
  4921 ;;Total ram usage:        1 bytes
  4922 ;; Hardware stack levels used:    1
  4923 ;; Hardware stack levels required when called:    6
  4924 ;; This function calls:
  4925 ;;		Nothing
  4926 ;; This function is called by:
  4927 ;;		_string_tx_uart2
  4928 ;;		_uint_tx_uart2
  4929 ;;		_uart_run
  4930 ;; This function uses a non-reentrant model
  4931 ;;
  4932                           
  4933                           	psect	text23
  4934  00116A                     __ptext23:
  4935                           	opt callstack 0
  4936  00116A                     _EUSART2_Write:
  4937                           	opt callstack 22
  4938                           
  4939                           ;incstack = 0
  4940                           ;EUSART2_Write@txData stored from wreg
  4941  00116A  6E0C               	movwf	EUSART2_Write@txData^0,c
  4942                           
  4943                           ;eusart2.c: 150: if(0 == eusart2TxBufferRemaining)
  4944  00116C  5051               	movf	_eusart2TxBufferRemaining^0,w,c	;volatile
  4945  00116E  B4D8               	btfsc	status,2,c
  4946  001170  0012               	return	
  4947                           
  4948                           ;eusart2.c: 153: };eusart2.c: 155: if(0 == PIE3bits.TX2IE)
  4949  001172  B8A3               	btfsc	163,4,c	;volatile
  4950  001174  D003               	goto	l379
  4951                           
  4952                           ;eusart2.c: 156: {;eusart2.c: 157: TXREG2 = txData;
  4953  001176  C00C  FF73         	movff	EUSART2_Write@txData,3955	;volatile
  4954                           
  4955                           ;eusart2.c: 158: }
  4956  00117A  D010               	goto	l3039
  4957  00117C                     l379:
  4958                           
  4959                           ;eusart2.c: 159: else;eusart2.c: 160: {;eusart2.c: 161: PIE3bits.TX2IE = 0;
  4960  00117C  98A3               	bcf	163,4,c	;volatile
  4961                           
  4962                           ;eusart2.c: 162: eusart2TxBuffer[eusart2TxHead++] = txData;
  4963  00117E  0E00               	movlw	low _eusart2TxBuffer
  4964  001180  2447               	addwf	_eusart2TxHead^0,w,c	;volatile
  4965  001182  6ED9               	movwf	fsr2l,c
  4966  001184  6ADA               	clrf	fsr2h,c
  4967  001186  0E01               	movlw	high _eusart2TxBuffer
  4968  001188  22DA               	addwfc	fsr2h,f,c
  4969  00118A  C00C  FFDF         	movff	EUSART2_Write@txData,indf2
  4970  00118E  2A47               	incf	_eusart2TxHead^0,f,c	;volatile
  4971                           
  4972                           ;eusart2.c: 163: if(sizeof(eusart2TxBuffer) <= eusart2TxHead)
  4973  001190  0E3F               	movlw	63
  4974  001192  6447               	cpfsgt	_eusart2TxHead^0,c	;volatile
  4975  001194  D002               	goto	l3037
  4976                           
  4977                           ;eusart2.c: 164: {;eusart2.c: 165: eusart2TxHead = 0;
  4978  001196  0E00               	movlw	0
  4979  001198  6E47               	movwf	_eusart2TxHead^0,c	;volatile
  4980  00119A                     l3037:
  4981                           
  4982                           ;eusart2.c: 166: };eusart2.c: 167: eusart2TxBufferRemaining--;
  4983  00119A  0651               	decf	_eusart2TxBufferRemaining^0,f,c	;volatile
  4984  00119C                     l3039:
  4985                           
  4986                           ;eusart2.c: 168: };eusart2.c: 169: PIE3bits.TX2IE = 1;
  4987  00119C  88A3               	bsf	163,4,c	;volatile
  4988  00119E  0012               	return		;funcret
  4989  0011A0                     __end_of_EUSART2_Write:
  4990                           	opt callstack 0
  4991                           
  4992 ;; *************** function ___lwmod *****************
  4993 ;; Defined at:
  4994 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\lwmod.c"
  4995 ;; Parameters:    Size  Location     Type
  4996 ;;  dividend        2   11[COMRAM] unsigned int 
  4997 ;;  divisor         2   13[COMRAM] unsigned int 
  4998 ;; Auto vars:     Size  Location     Type
  4999 ;;  counter         1   15[COMRAM] unsigned char 
  5000 ;; Return value:  Size  Location     Type
  5001 ;;                  2   11[COMRAM] unsigned int 
  5002 ;; Registers used:
  5003 ;;		wreg, status,2, status,0
  5004 ;; Tracked objects:
  5005 ;;		On entry : 0/0
  5006 ;;		On exit  : 0/0
  5007 ;;		Unchanged: 0/0
  5008 ;; Data sizes:     COMRAM   BANK0   BANK1
  5009 ;;      Params:         4       0       0
  5010 ;;      Locals:         1       0       0
  5011 ;;      Temps:          0       0       0
  5012 ;;      Totals:         5       0       0
  5013 ;;Total ram usage:        5 bytes
  5014 ;; Hardware stack levels used:    1
  5015 ;; Hardware stack levels required when called:    6
  5016 ;; This function calls:
  5017 ;;		Nothing
  5018 ;; This function is called by:
  5019 ;;		_ADC_run
  5020 ;; This function uses a non-reentrant model
  5021 ;;
  5022                           
  5023                           	psect	text24
  5024  0010F2                     __ptext24:
  5025                           	opt callstack 0
  5026  0010F2                     ___lwmod:
  5027                           	opt callstack 23
  5028                           
  5029                           ;incstack = 0
  5030  0010F2  500E               	movf	___lwmod@divisor^0,w,c
  5031  0010F4  100F               	iorwf	(___lwmod@divisor+1)^0,w,c
  5032  0010F6  B4D8               	btfsc	status,2,c
  5033  0010F8  D018               	goto	l1077
  5034  0010FA  0E01               	movlw	1
  5035  0010FC  6E10               	movwf	___lwmod@counter^0,c
  5036  0010FE  D004               	goto	l3303
  5037  001100                     l3301:
  5038  001100  90D8               	bcf	status,0,c
  5039  001102  360E               	rlcf	___lwmod@divisor^0,f,c
  5040  001104  360F               	rlcf	(___lwmod@divisor+1)^0,f,c
  5041  001106  2A10               	incf	___lwmod@counter^0,f,c
  5042  001108                     l3303:
  5043  001108  AE0F               	btfss	(___lwmod@divisor+1)^0,7,c
  5044  00110A  D7FA               	goto	l3301
  5045  00110C                     u1770:
  5046  00110C  500E               	movf	___lwmod@divisor^0,w,c
  5047  00110E  5C0C               	subwf	___lwmod@dividend^0,w,c
  5048  001110  500F               	movf	(___lwmod@divisor+1)^0,w,c
  5049  001112  580D               	subwfb	(___lwmod@dividend+1)^0,w,c
  5050  001114  A0D8               	btfss	status,0,c
  5051  001116  D004               	goto	l3309
  5052  001118  500E               	movf	___lwmod@divisor^0,w,c
  5053  00111A  5E0C               	subwf	___lwmod@dividend^0,f,c
  5054  00111C  500F               	movf	(___lwmod@divisor+1)^0,w,c
  5055  00111E  5A0D               	subwfb	(___lwmod@dividend+1)^0,f,c
  5056  001120                     l3309:
  5057  001120  90D8               	bcf	status,0,c
  5058  001122  320F               	rrcf	(___lwmod@divisor+1)^0,f,c
  5059  001124  320E               	rrcf	___lwmod@divisor^0,f,c
  5060  001126  2E10               	decfsz	___lwmod@counter^0,f,c
  5061  001128  D7F1               	goto	u1770
  5062  00112A                     l1077:
  5063  00112A  C00C  F00C         	movff	___lwmod@dividend,?___lwmod
  5064  00112E  C00D  F00D         	movff	___lwmod@dividend+1,?___lwmod+1
  5065  001132  0012               	return		;funcret
  5066  001134                     __end_of___lwmod:
  5067                           	opt callstack 0
  5068                           
  5069 ;; *************** function ___lmul *****************
  5070 ;; Defined at:
  5071 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul32.c"
  5072 ;; Parameters:    Size  Location     Type
  5073 ;;  multiplier      4   11[COMRAM] unsigned long 
  5074 ;;  multiplicand    4   15[COMRAM] unsigned long 
  5075 ;; Auto vars:     Size  Location     Type
  5076 ;;  product         4   19[COMRAM] unsigned long 
  5077 ;; Return value:  Size  Location     Type
  5078 ;;                  4   11[COMRAM] unsigned long 
  5079 ;; Registers used:
  5080 ;;		wreg, status,2, status,0
  5081 ;; Tracked objects:
  5082 ;;		On entry : 0/0
  5083 ;;		On exit  : 0/0
  5084 ;;		Unchanged: 0/0
  5085 ;; Data sizes:     COMRAM   BANK0   BANK1
  5086 ;;      Params:         8       0       0
  5087 ;;      Locals:         4       0       0
  5088 ;;      Temps:          0       0       0
  5089 ;;      Totals:        12       0       0
  5090 ;;Total ram usage:       12 bytes
  5091 ;; Hardware stack levels used:    1
  5092 ;; Hardware stack levels required when called:    6
  5093 ;; This function calls:
  5094 ;;		Nothing
  5095 ;; This function is called by:
  5096 ;;		_ADC_run
  5097 ;; This function uses a non-reentrant model
  5098 ;;
  5099                           
  5100                           	psect	text25
  5101  000F76                     __ptext25:
  5102                           	opt callstack 0
  5103  000F76                     ___lmul:
  5104                           	opt callstack 23
  5105                           
  5106                           ;incstack = 0
  5107  000F76  0E00               	movlw	0
  5108  000F78  6E14               	movwf	___lmul@product^0,c
  5109  000F7A  0E00               	movlw	0
  5110  000F7C  6E15               	movwf	(___lmul@product+1)^0,c
  5111  000F7E  0E00               	movlw	0
  5112  000F80  6E16               	movwf	(___lmul@product+2)^0,c
  5113  000F82  0E00               	movlw	0
  5114  000F84  6E17               	movwf	(___lmul@product+3)^0,c
  5115  000F86                     l3267:
  5116  000F86  A00C               	btfss	___lmul@multiplier^0,0,c
  5117  000F88  D008               	goto	l3271
  5118  000F8A  5010               	movf	___lmul@multiplicand^0,w,c
  5119  000F8C  2614               	addwf	___lmul@product^0,f,c
  5120  000F8E  5011               	movf	(___lmul@multiplicand+1)^0,w,c
  5121  000F90  2215               	addwfc	(___lmul@product+1)^0,f,c
  5122  000F92  5012               	movf	(___lmul@multiplicand+2)^0,w,c
  5123  000F94  2216               	addwfc	(___lmul@product+2)^0,f,c
  5124  000F96  5013               	movf	(___lmul@multiplicand+3)^0,w,c
  5125  000F98  2217               	addwfc	(___lmul@product+3)^0,f,c
  5126  000F9A                     l3271:
  5127  000F9A  90D8               	bcf	status,0,c
  5128  000F9C  3610               	rlcf	___lmul@multiplicand^0,f,c
  5129  000F9E  3611               	rlcf	(___lmul@multiplicand+1)^0,f,c
  5130  000FA0  3612               	rlcf	(___lmul@multiplicand+2)^0,f,c
  5131  000FA2  3613               	rlcf	(___lmul@multiplicand+3)^0,f,c
  5132  000FA4  90D8               	bcf	status,0,c
  5133  000FA6  320F               	rrcf	(___lmul@multiplier+3)^0,f,c
  5134  000FA8  320E               	rrcf	(___lmul@multiplier+2)^0,f,c
  5135  000FAA  320D               	rrcf	(___lmul@multiplier+1)^0,f,c
  5136  000FAC  320C               	rrcf	___lmul@multiplier^0,f,c
  5137  000FAE  500C               	movf	___lmul@multiplier^0,w,c
  5138  000FB0  100D               	iorwf	(___lmul@multiplier+1)^0,w,c
  5139  000FB2  100E               	iorwf	(___lmul@multiplier+2)^0,w,c
  5140  000FB4  100F               	iorwf	(___lmul@multiplier+3)^0,w,c
  5141  000FB6  A4D8               	btfss	status,2,c
  5142  000FB8  D7E6               	goto	l3267
  5143  000FBA  C014  F00C         	movff	___lmul@product,?___lmul
  5144  000FBE  C015  F00D         	movff	___lmul@product+1,?___lmul+1
  5145  000FC2  C016  F00E         	movff	___lmul@product+2,?___lmul+2
  5146  000FC6  C017  F00F         	movff	___lmul@product+3,?___lmul+3
  5147  000FCA  0012               	return		;funcret
  5148  000FCC                     __end_of___lmul:
  5149                           	opt callstack 0
  5150                           
  5151 ;; *************** function ___lldiv *****************
  5152 ;; Defined at:
  5153 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\__lldiv.c"
  5154 ;; Parameters:    Size  Location     Type
  5155 ;;  dividend        4   11[COMRAM] unsigned long 
  5156 ;;  divisor         4   15[COMRAM] unsigned long 
  5157 ;; Auto vars:     Size  Location     Type
  5158 ;;  quotient        4   19[COMRAM] unsigned long 
  5159 ;;  counter         1   23[COMRAM] unsigned char 
  5160 ;; Return value:  Size  Location     Type
  5161 ;;                  4   11[COMRAM] unsigned long 
  5162 ;; Registers used:
  5163 ;;		wreg, status,2, status,0
  5164 ;; Tracked objects:
  5165 ;;		On entry : 0/0
  5166 ;;		On exit  : 0/0
  5167 ;;		Unchanged: 0/0
  5168 ;; Data sizes:     COMRAM   BANK0   BANK1
  5169 ;;      Params:         8       0       0
  5170 ;;      Locals:         5       0       0
  5171 ;;      Temps:          0       0       0
  5172 ;;      Totals:        13       0       0
  5173 ;;Total ram usage:       13 bytes
  5174 ;; Hardware stack levels used:    1
  5175 ;; Hardware stack levels required when called:    6
  5176 ;; This function calls:
  5177 ;;		Nothing
  5178 ;; This function is called by:
  5179 ;;		_ADC_run
  5180 ;; This function uses a non-reentrant model
  5181 ;;
  5182                           
  5183                           	psect	text26
  5184  000E30                     __ptext26:
  5185                           	opt callstack 0
  5186  000E30                     ___lldiv:
  5187                           	opt callstack 23
  5188                           
  5189                           ;incstack = 0
  5190  000E30  0E00               	movlw	0
  5191  000E32  6E14               	movwf	___lldiv@quotient^0,c
  5192  000E34  0E00               	movlw	0
  5193  000E36  6E15               	movwf	(___lldiv@quotient+1)^0,c
  5194  000E38  0E00               	movlw	0
  5195  000E3A  6E16               	movwf	(___lldiv@quotient+2)^0,c
  5196  000E3C  0E00               	movlw	0
  5197  000E3E  6E17               	movwf	(___lldiv@quotient+3)^0,c
  5198  000E40  5010               	movf	___lldiv@divisor^0,w,c
  5199  000E42  1011               	iorwf	(___lldiv@divisor+1)^0,w,c
  5200  000E44  1012               	iorwf	(___lldiv@divisor+2)^0,w,c
  5201  000E46  1013               	iorwf	(___lldiv@divisor+3)^0,w,c
  5202  000E48  B4D8               	btfsc	status,2,c
  5203  000E4A  D02A               	goto	l615
  5204  000E4C  0E01               	movlw	1
  5205  000E4E  6E18               	movwf	___lldiv@counter^0,c
  5206  000E50  D006               	goto	l3283
  5207  000E52                     l3281:
  5208  000E52  90D8               	bcf	status,0,c
  5209  000E54  3610               	rlcf	___lldiv@divisor^0,f,c
  5210  000E56  3611               	rlcf	(___lldiv@divisor+1)^0,f,c
  5211  000E58  3612               	rlcf	(___lldiv@divisor+2)^0,f,c
  5212  000E5A  3613               	rlcf	(___lldiv@divisor+3)^0,f,c
  5213  000E5C  2A18               	incf	___lldiv@counter^0,f,c
  5214  000E5E                     l3283:
  5215  000E5E  AE13               	btfss	(___lldiv@divisor+3)^0,7,c
  5216  000E60  D7F8               	goto	l3281
  5217  000E62                     u1740:
  5218  000E62  90D8               	bcf	status,0,c
  5219  000E64  3614               	rlcf	___lldiv@quotient^0,f,c
  5220  000E66  3615               	rlcf	(___lldiv@quotient+1)^0,f,c
  5221  000E68  3616               	rlcf	(___lldiv@quotient+2)^0,f,c
  5222  000E6A  3617               	rlcf	(___lldiv@quotient+3)^0,f,c
  5223  000E6C  5010               	movf	___lldiv@divisor^0,w,c
  5224  000E6E  5C0C               	subwf	___lldiv@dividend^0,w,c
  5225  000E70  5011               	movf	(___lldiv@divisor+1)^0,w,c
  5226  000E72  580D               	subwfb	(___lldiv@dividend+1)^0,w,c
  5227  000E74  5012               	movf	(___lldiv@divisor+2)^0,w,c
  5228  000E76  580E               	subwfb	(___lldiv@dividend+2)^0,w,c
  5229  000E78  5013               	movf	(___lldiv@divisor+3)^0,w,c
  5230  000E7A  580F               	subwfb	(___lldiv@dividend+3)^0,w,c
  5231  000E7C  A0D8               	btfss	status,0,c
  5232  000E7E  D009               	goto	l3293
  5233  000E80  5010               	movf	___lldiv@divisor^0,w,c
  5234  000E82  5E0C               	subwf	___lldiv@dividend^0,f,c
  5235  000E84  5011               	movf	(___lldiv@divisor+1)^0,w,c
  5236  000E86  5A0D               	subwfb	(___lldiv@dividend+1)^0,f,c
  5237  000E88  5012               	movf	(___lldiv@divisor+2)^0,w,c
  5238  000E8A  5A0E               	subwfb	(___lldiv@dividend+2)^0,f,c
  5239  000E8C  5013               	movf	(___lldiv@divisor+3)^0,w,c
  5240  000E8E  5A0F               	subwfb	(___lldiv@dividend+3)^0,f,c
  5241  000E90  8014               	bsf	___lldiv@quotient^0,0,c
  5242  000E92                     l3293:
  5243  000E92  90D8               	bcf	status,0,c
  5244  000E94  3213               	rrcf	(___lldiv@divisor+3)^0,f,c
  5245  000E96  3212               	rrcf	(___lldiv@divisor+2)^0,f,c
  5246  000E98  3211               	rrcf	(___lldiv@divisor+1)^0,f,c
  5247  000E9A  3210               	rrcf	___lldiv@divisor^0,f,c
  5248  000E9C  2E18               	decfsz	___lldiv@counter^0,f,c
  5249  000E9E  D7E1               	goto	u1740
  5250  000EA0                     l615:
  5251  000EA0  C014  F00C         	movff	___lldiv@quotient,?___lldiv
  5252  000EA4  C015  F00D         	movff	___lldiv@quotient+1,?___lldiv+1
  5253  000EA8  C016  F00E         	movff	___lldiv@quotient+2,?___lldiv+2
  5254  000EAC  C017  F00F         	movff	___lldiv@quotient+3,?___lldiv+3
  5255  000EB0  0012               	return		;funcret
  5256  000EB2                     __end_of___lldiv:
  5257                           	opt callstack 0
  5258                           
  5259 ;; *************** function _ADC_StartConversion *****************
  5260 ;; Defined at:
  5261 ;;		line 91 in file "mcc_generated_files/adc.c"
  5262 ;; Parameters:    Size  Location     Type
  5263 ;;		None
  5264 ;; Auto vars:     Size  Location     Type
  5265 ;;		None
  5266 ;; Return value:  Size  Location     Type
  5267 ;;                  1    wreg      void 
  5268 ;; Registers used:
  5269 ;;		None
  5270 ;; Tracked objects:
  5271 ;;		On entry : 0/0
  5272 ;;		On exit  : 0/0
  5273 ;;		Unchanged: 0/0
  5274 ;; Data sizes:     COMRAM   BANK0   BANK1
  5275 ;;      Params:         0       0       0
  5276 ;;      Locals:         0       0       0
  5277 ;;      Temps:          0       0       0
  5278 ;;      Totals:         0       0       0
  5279 ;;Total ram usage:        0 bytes
  5280 ;; Hardware stack levels used:    1
  5281 ;; Hardware stack levels required when called:    6
  5282 ;; This function calls:
  5283 ;;		Nothing
  5284 ;; This function is called by:
  5285 ;;		_ADC_run
  5286 ;; This function uses a non-reentrant model
  5287 ;;
  5288                           
  5289                           	psect	text27
  5290  0013B6                     __ptext27:
  5291                           	opt callstack 0
  5292  0013B6                     _ADC_StartConversion:
  5293                           	opt callstack 23
  5294                           
  5295                           ;adc.c: 94: ADCON0bits.GO_nDONE = 1;
  5296                           
  5297                           ;incstack = 0
  5298  0013B6  82C2               	bsf	194,1,c	;volatile
  5299  0013B8  0012               	return		;funcret
  5300  0013BA                     __end_of_ADC_StartConversion:
  5301                           	opt callstack 0
  5302                           
  5303 ;; *************** function _ADC_IsConversionDone *****************
  5304 ;; Defined at:
  5305 ;;		line 98 in file "mcc_generated_files/adc.c"
  5306 ;; Parameters:    Size  Location     Type
  5307 ;;		None
  5308 ;; Auto vars:     Size  Location     Type
  5309 ;;		None
  5310 ;; Return value:  Size  Location     Type
  5311 ;;                  1    wreg      unsigned char 
  5312 ;; Registers used:
  5313 ;;		wreg
  5314 ;; Tracked objects:
  5315 ;;		On entry : 0/0
  5316 ;;		On exit  : 0/0
  5317 ;;		Unchanged: 0/0
  5318 ;; Data sizes:     COMRAM   BANK0   BANK1
  5319 ;;      Params:         0       0       0
  5320 ;;      Locals:         0       0       0
  5321 ;;      Temps:          0       0       0
  5322 ;;      Totals:         0       0       0
  5323 ;;Total ram usage:        0 bytes
  5324 ;; Hardware stack levels used:    1
  5325 ;; Hardware stack levels required when called:    6
  5326 ;; This function calls:
  5327 ;;		Nothing
  5328 ;; This function is called by:
  5329 ;;		_ADC_run
  5330 ;; This function uses a non-reentrant model
  5331 ;;
  5332                           
  5333                           	psect	text28
  5334  00136E                     __ptext28:
  5335                           	opt callstack 0
  5336  00136E                     _ADC_IsConversionDone:
  5337                           	opt callstack 23
  5338                           
  5339                           ;adc.c: 101: return ((bool)(!ADCON0bits.GO_nDONE));
  5340                           
  5341                           ;incstack = 0
  5342  00136E  B2C2               	btfsc	194,1,c	;volatile
  5343  001370  D002               	goto	u1590
  5344  001372  0E01               	movlw	1
  5345  001374  0012               	return	
  5346  001376                     u1590:
  5347  001376  0E00               	movlw	0
  5348  001378  0012               	return		;funcret
  5349  00137A                     __end_of_ADC_IsConversionDone:
  5350                           	opt callstack 0
  5351                           
  5352 ;; *************** function _ADC_GetConversionResult *****************
  5353 ;; Defined at:
  5354 ;;		line 104 in file "mcc_generated_files/adc.c"
  5355 ;; Parameters:    Size  Location     Type
  5356 ;;		None
  5357 ;; Auto vars:     Size  Location     Type
  5358 ;;		None
  5359 ;; Return value:  Size  Location     Type
  5360 ;;                  2   11[COMRAM] unsigned int 
  5361 ;; Registers used:
  5362 ;;		wreg, status,2, status,0
  5363 ;; Tracked objects:
  5364 ;;		On entry : 0/0
  5365 ;;		On exit  : 0/0
  5366 ;;		Unchanged: 0/0
  5367 ;; Data sizes:     COMRAM   BANK0   BANK1
  5368 ;;      Params:         2       0       0
  5369 ;;      Locals:         0       0       0
  5370 ;;      Temps:          2       0       0
  5371 ;;      Totals:         4       0       0
  5372 ;;Total ram usage:        4 bytes
  5373 ;; Hardware stack levels used:    1
  5374 ;; Hardware stack levels required when called:    6
  5375 ;; This function calls:
  5376 ;;		Nothing
  5377 ;; This function is called by:
  5378 ;;		_ADC_run
  5379 ;; This function uses a non-reentrant model
  5380 ;;
  5381                           
  5382                           	psect	text29
  5383  001320                     __ptext29:
  5384                           	opt callstack 0
  5385  001320                     _ADC_GetConversionResult:
  5386                           	opt callstack 23
  5387                           
  5388                           ;adc.c: 107: return ((adc_result_t)((ADRESH << 8) + ADRESL));
  5389                           
  5390                           ;incstack = 0
  5391  001320  50C4               	movf	196,w,c	;volatile
  5392  001322  6E0F               	movwf	(??_ADC_GetConversionResult+1)^0,c
  5393  001324  6A0E               	clrf	??_ADC_GetConversionResult^0,c
  5394  001326  50C3               	movf	195,w,c	;volatile
  5395  001328  240E               	addwf	??_ADC_GetConversionResult^0,w,c
  5396  00132A  6E0C               	movwf	?_ADC_GetConversionResult^0,c
  5397  00132C  0E00               	movlw	0
  5398  00132E  200F               	addwfc	(??_ADC_GetConversionResult+1)^0,w,c
  5399  001330  6E0D               	movwf	(?_ADC_GetConversionResult+1)^0,c
  5400  001332  0012               	return		;funcret
  5401  001334                     __end_of_ADC_GetConversionResult:
  5402                           	opt callstack 0
  5403                           
  5404 ;; *************** function _ADC_SelectChannel *****************
  5405 ;; Defined at:
  5406 ;;		line 83 in file "mcc_generated_files/adc.c"
  5407 ;; Parameters:    Size  Location     Type
  5408 ;;  channel         1    wreg     enum E5598
  5409 ;; Auto vars:     Size  Location     Type
  5410 ;;  channel         1   12[COMRAM] enum E5598
  5411 ;; Return value:  Size  Location     Type
  5412 ;;                  1    wreg      void 
  5413 ;; Registers used:
  5414 ;;		wreg, status,2, status,0
  5415 ;; Tracked objects:
  5416 ;;		On entry : 0/0
  5417 ;;		On exit  : 0/0
  5418 ;;		Unchanged: 0/0
  5419 ;; Data sizes:     COMRAM   BANK0   BANK1
  5420 ;;      Params:         0       0       0
  5421 ;;      Locals:         1       0       0
  5422 ;;      Temps:          1       0       0
  5423 ;;      Totals:         2       0       0
  5424 ;;Total ram usage:        2 bytes
  5425 ;; Hardware stack levels used:    1
  5426 ;; Hardware stack levels required when called:    6
  5427 ;; This function calls:
  5428 ;;		Nothing
  5429 ;; This function is called by:
  5430 ;;		_main
  5431 ;; This function uses a non-reentrant model
  5432 ;;
  5433                           
  5434                           	psect	text30
  5435  001308                     __ptext30:
  5436                           	opt callstack 0
  5437  001308                     _ADC_SelectChannel:
  5438                           	opt callstack 24
  5439                           
  5440                           ;incstack = 0
  5441                           ;ADC_SelectChannel@channel stored from wreg
  5442  001308  6E0D               	movwf	ADC_SelectChannel@channel^0,c
  5443                           
  5444                           ;adc.c: 86: ADCON0bits.CHS = channel;
  5445  00130A  C00D  F00C         	movff	ADC_SelectChannel@channel,??_ADC_SelectChannel
  5446  00130E  460C               	rlncf	??_ADC_SelectChannel^0,f,c
  5447  001310  460C               	rlncf	??_ADC_SelectChannel^0,f,c
  5448  001312  50C2               	movf	194,w,c	;volatile
  5449  001314  180C               	xorwf	??_ADC_SelectChannel^0,w,c
  5450  001316  0B83               	andlw	-125
  5451  001318  180C               	xorwf	??_ADC_SelectChannel^0,w,c
  5452  00131A  6EC2               	movwf	194,c	;volatile
  5453                           
  5454                           ;adc.c: 88: ADCON0bits.ADON = 1;
  5455  00131C  80C2               	bsf	194,0,c	;volatile
  5456  00131E  0012               	return		;funcret
  5457  001320                     __end_of_ADC_SelectChannel:
  5458                           	opt callstack 0
  5459                           
  5460 ;; *************** function _INTERRUPT_InterruptManagerLow *****************
  5461 ;; Defined at:
  5462 ;;		line 101 in file "mcc_generated_files/interrupt_manager.c"
  5463 ;; Parameters:    Size  Location     Type
  5464 ;;		None
  5465 ;; Auto vars:     Size  Location     Type
  5466 ;;		None
  5467 ;; Return value:  Size  Location     Type
  5468 ;;                  1    wreg      void 
  5469 ;; Registers used:
  5470 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, cstack
  5471 ;; Tracked objects:
  5472 ;;		On entry : 0/0
  5473 ;;		On exit  : 0/0
  5474 ;;		Unchanged: 0/0
  5475 ;; Data sizes:     COMRAM   BANK0   BANK1
  5476 ;;      Params:         0       0       0
  5477 ;;      Locals:         0       0       0
  5478 ;;      Temps:          7       0       0
  5479 ;;      Totals:         7       0       0
  5480 ;;Total ram usage:        7 bytes
  5481 ;; Hardware stack levels used:    1
  5482 ;; Hardware stack levels required when called:    5
  5483 ;; This function calls:
  5484 ;;		Absolute function
  5485 ;;		_ADC_ISR
  5486 ;;		_EUSART2_Receive_ISR
  5487 ;;		_EUSART2_Transmit_ISR
  5488 ;; This function is called by:
  5489 ;;		Interrupt level 1
  5490 ;; This function uses a non-reentrant model
  5491 ;;
  5492                           
  5493                           	psect	intcodelo
  5494  000018                     __pintcodelo:
  5495                           	opt callstack 0
  5496  000018                     _INTERRUPT_InterruptManagerLow:
  5497                           	opt callstack 21
  5498                           
  5499                           ;incstack = 0
  5500  000018  8053               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  5501  00001A  CFD8 F005          	movff	status,??_INTERRUPT_InterruptManagerLow
  5502  00001E  CFE8 F006          	movff	wreg,??_INTERRUPT_InterruptManagerLow+1
  5503  000022  CFE0 F007          	movff	bsr,??_INTERRUPT_InterruptManagerLow+2
  5504  000026  CFFA F008          	movff	pclath,??_INTERRUPT_InterruptManagerLow+3
  5505  00002A  CFFB F009          	movff	pclatu,??_INTERRUPT_InterruptManagerLow+4
  5506  00002E  CFD9 F00A          	movff	fsr2l,??_INTERRUPT_InterruptManagerLow+5
  5507  000032  CFDA F00B          	movff	fsr2h,??_INTERRUPT_InterruptManagerLow+6
  5508                           
  5509                           ;interrupt_manager.c: 104: if(PIE1bits.ADIE == 1 && PIR1bits.ADIF == 1)
  5510  000036  BC9D               	btfsc	157,6,c	;volatile
  5511  000038  AC9E               	btfss	158,6,c	;volatile
  5512  00003A  D003               	goto	i1l153
  5513                           
  5514                           ;interrupt_manager.c: 105: {;interrupt_manager.c: 106: ADC_ISR();
  5515  00003C  ECDD  F009         	call	_ADC_ISR	;wreg free
  5516                           
  5517                           ;interrupt_manager.c: 107: }
  5518  000040  D01C               	goto	i1u145_29
  5519  000042                     i1l153:
  5520                           
  5521                           ;interrupt_manager.c: 108: else if(PIE3bits.RC2IE == 1 && PIR3bits.RC2IF == 1)
  5522  000042  BAA3               	btfsc	163,5,c	;volatile
  5523  000044  AAA4               	btfss	164,5,c	;volatile
  5524  000046  D009               	goto	i1l155
  5525                           
  5526                           ;interrupt_manager.c: 109: {;interrupt_manager.c: 110: EUSART2_RxDefaultInterruptHandler
      +                          ();
  5527  000048  D801               	call	i1u142_28
  5528  00004A  D017               	goto	i1u145_29
  5529  00004C                     i1u142_28:
  5530  00004C  0005               	push	
  5531  00004E  0100               	movlb	0	; () banked
  5532  000050  6EFA               	movwf	pclath,c
  5533  000052  51FC               	movf	_EUSART2_RxDefaultInterruptHandler& (0+255),w,b
  5534  000054  6EFD               	movwf	tosl,c
  5535  000056  51FD               	movf	(_EUSART2_RxDefaultInterruptHandler+1)& (0+255),w,b
  5536  000058  D00B               	goto	L9
  5537  00005A                     i1l155:
  5538                           
  5539                           ;interrupt_manager.c: 112: else if(PIE3bits.TX2IE == 1 && PIR3bits.TX2IF == 1)
  5540  00005A  B8A3               	btfsc	163,4,c	;volatile
  5541  00005C  A8A4               	btfss	164,4,c	;volatile
  5542  00005E  D00D               	goto	i1u145_29
  5543                           
  5544                           ;interrupt_manager.c: 113: {;interrupt_manager.c: 114: EUSART2_TxDefaultInterruptHandler
      +                          ();
  5545  000060  D801               	call	i1u145_28
  5546  000062  D00B               	goto	i1u145_29
  5547  000064                     i1u145_28:
  5548  000064  0005               	push	
  5549  000066  0100               	movlb	0	; () banked
  5550  000068  6EFA               	movwf	pclath,c
  5551  00006A  51FE               	movf	_EUSART2_TxDefaultInterruptHandler& (0+255),w,b
  5552  00006C  6EFD               	movwf	tosl,c
  5553  00006E  51FF               	movf	(_EUSART2_TxDefaultInterruptHandler+1)& (0+255),w,b
  5554  000070                     L9:
  5555  000070  6EFE               	movwf	tosh,c
  5556  000072  50F8               	movf	tblptru,w,c
  5557  000074  6EFF               	movwf	tosu,c
  5558  000076  50FA               	movf	pclath,w,c
  5559  000078  0012               	return		;indir
  5560  00007A                     i1u145_29:
  5561                           
  5562                           ;interrupt_manager.c: 115: }
  5563  00007A  C00B  FFDA         	movff	??_INTERRUPT_InterruptManagerLow+6,fsr2h
  5564  00007E  C00A  FFD9         	movff	??_INTERRUPT_InterruptManagerLow+5,fsr2l
  5565  000082  C009  FFFB         	movff	??_INTERRUPT_InterruptManagerLow+4,pclatu
  5566  000086  C008  FFFA         	movff	??_INTERRUPT_InterruptManagerLow+3,pclath
  5567  00008A  C007  FFE0         	movff	??_INTERRUPT_InterruptManagerLow+2,bsr
  5568  00008E  C006  FFE8         	movff	??_INTERRUPT_InterruptManagerLow+1,wreg
  5569  000092  C005  FFD8         	movff	??_INTERRUPT_InterruptManagerLow,status
  5570  000096  9053               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  5571  000098  0010               	retfie	
  5572  00009A                     __end_of_INTERRUPT_InterruptManagerLow:
  5573                           	opt callstack 0
  5574                           
  5575 ;; *************** function _EUSART2_Transmit_ISR *****************
  5576 ;; Defined at:
  5577 ;;		line 173 in file "mcc_generated_files/eusart2.c"
  5578 ;; Parameters:    Size  Location     Type
  5579 ;;		None
  5580 ;; Auto vars:     Size  Location     Type
  5581 ;;		None
  5582 ;; Return value:  Size  Location     Type
  5583 ;;                  1    wreg      void 
  5584 ;; Registers used:
  5585 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5586 ;; Tracked objects:
  5587 ;;		On entry : 0/0
  5588 ;;		On exit  : 0/0
  5589 ;;		Unchanged: 0/0
  5590 ;; Data sizes:     COMRAM   BANK0   BANK1
  5591 ;;      Params:         0       0       0
  5592 ;;      Locals:         0       0       0
  5593 ;;      Temps:          0       0       0
  5594 ;;      Totals:         0       0       0
  5595 ;;Total ram usage:        0 bytes
  5596 ;; Hardware stack levels used:    1
  5597 ;; Hardware stack levels required when called:    4
  5598 ;; This function calls:
  5599 ;;		Nothing
  5600 ;; This function is called by:
  5601 ;;		_EUSART2_Initialize
  5602 ;;		_INTERRUPT_InterruptManagerLow
  5603 ;; This function uses a non-reentrant model
  5604 ;;
  5605                           
  5606                           	psect	text32
  5607  001236                     __ptext32:
  5608                           	opt callstack 0
  5609  001236                     _EUSART2_Transmit_ISR:
  5610                           	opt callstack 21
  5611                           
  5612                           ;eusart2.c: 177: if(sizeof(eusart2TxBuffer) > eusart2TxBufferRemaining)
  5613                           
  5614                           ;incstack = 0
  5615  001236  0E40               	movlw	64
  5616  001238  6051               	cpfslt	_eusart2TxBufferRemaining^0,c	;volatile
  5617  00123A  D010               	goto	i1l384
  5618                           
  5619                           ;eusart2.c: 178: {;eusart2.c: 179: TXREG2 = eusart2TxBuffer[eusart2TxTail++];
  5620  00123C  0E00               	movlw	low _eusart2TxBuffer
  5621  00123E  2446               	addwf	_eusart2TxTail^0,w,c	;volatile
  5622  001240  6ED9               	movwf	fsr2l,c
  5623  001242  6ADA               	clrf	fsr2h,c
  5624  001244  0E01               	movlw	high _eusart2TxBuffer
  5625  001246  22DA               	addwfc	fsr2h,f,c
  5626  001248  50DF               	movf	indf2,w,c
  5627  00124A  6E73               	movwf	115,c	;volatile
  5628  00124C  2A46               	incf	_eusart2TxTail^0,f,c	;volatile
  5629                           
  5630                           ;eusart2.c: 180: if(sizeof(eusart2TxBuffer) <= eusart2TxTail)
  5631  00124E  0E3F               	movlw	63
  5632  001250  6446               	cpfsgt	_eusart2TxTail^0,c	;volatile
  5633  001252  D002               	goto	i1l2555
  5634                           
  5635                           ;eusart2.c: 181: {;eusart2.c: 182: eusart2TxTail = 0;
  5636  001254  0E00               	movlw	0
  5637  001256  6E46               	movwf	_eusart2TxTail^0,c	;volatile
  5638  001258                     i1l2555:
  5639                           
  5640                           ;eusart2.c: 183: };eusart2.c: 184: eusart2TxBufferRemaining++;
  5641  001258  2A51               	incf	_eusart2TxBufferRemaining^0,f,c	;volatile
  5642                           
  5643                           ;eusart2.c: 185: }
  5644  00125A  0012               	return	
  5645  00125C                     i1l384:
  5646                           
  5647                           ;eusart2.c: 186: else;eusart2.c: 187: {;eusart2.c: 188: PIE3bits.TX2IE = 0;
  5648  00125C  98A3               	bcf	163,4,c	;volatile
  5649  00125E  0012               	return		;funcret
  5650  001260                     __end_of_EUSART2_Transmit_ISR:
  5651                           	opt callstack 0
  5652                           
  5653 ;; *************** function _EUSART2_Receive_ISR *****************
  5654 ;; Defined at:
  5655 ;;		line 192 in file "mcc_generated_files/eusart2.c"
  5656 ;; Parameters:    Size  Location     Type
  5657 ;;		None
  5658 ;; Auto vars:     Size  Location     Type
  5659 ;;		None
  5660 ;; Return value:  Size  Location     Type
  5661 ;;                  1    wreg      void 
  5662 ;; Registers used:
  5663 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5664 ;; Tracked objects:
  5665 ;;		On entry : 0/0
  5666 ;;		On exit  : 0/0
  5667 ;;		Unchanged: 0/0
  5668 ;; Data sizes:     COMRAM   BANK0   BANK1
  5669 ;;      Params:         0       0       0
  5670 ;;      Locals:         0       0       0
  5671 ;;      Temps:          0       0       0
  5672 ;;      Totals:         0       0       0
  5673 ;;Total ram usage:        0 bytes
  5674 ;; Hardware stack levels used:    1
  5675 ;; Hardware stack levels required when called:    4
  5676 ;; This function calls:
  5677 ;;		Nothing
  5678 ;; This function is called by:
  5679 ;;		_EUSART2_Initialize
  5680 ;;		_INTERRUPT_InterruptManagerLow
  5681 ;; This function uses a non-reentrant model
  5682 ;;
  5683                           
  5684                           	psect	text33
  5685  00128A                     __ptext33:
  5686                           	opt callstack 0
  5687  00128A                     _EUSART2_Receive_ISR:
  5688                           	opt callstack 21
  5689                           
  5690                           ;eusart2.c: 195: if(1 == RCSTA2bits.OERR)
  5691                           
  5692                           ;incstack = 0
  5693  00128A  A271               	btfss	113,1,c	;volatile
  5694  00128C  D002               	goto	i1l2561
  5695                           
  5696                           ;eusart2.c: 196: {;eusart2.c: 199: RCSTA2bits.CREN = 0;
  5697  00128E  9871               	bcf	113,4,c	;volatile
  5698                           
  5699                           ;eusart2.c: 200: RCSTA2bits.CREN = 1;
  5700  001290  8871               	bsf	113,4,c	;volatile
  5701  001292                     i1l2561:
  5702                           
  5703                           ;eusart2.c: 201: };eusart2.c: 204: eusart2RxBuffer[eusart2RxHead++] = RCREG2;
  5704  001292  0EE4               	movlw	low _eusart2RxBuffer
  5705  001294  2445               	addwf	_eusart2RxHead^0,w,c	;volatile
  5706  001296  6ED9               	movwf	fsr2l,c
  5707  001298  6ADA               	clrf	fsr2h,c
  5708  00129A  0E00               	movlw	high _eusart2RxBuffer
  5709  00129C  22DA               	addwfc	fsr2h,f,c
  5710  00129E  CF74 FFDF          	movff	3956,indf2	;volatile
  5711  0012A2  2A45               	incf	_eusart2RxHead^0,f,c	;volatile
  5712                           
  5713                           ;eusart2.c: 205: if(sizeof(eusart2RxBuffer) <= eusart2RxHead)
  5714  0012A4  0E07               	movlw	7
  5715  0012A6  6445               	cpfsgt	_eusart2RxHead^0,c	;volatile
  5716  0012A8  D002               	goto	i1l2569
  5717                           
  5718                           ;eusart2.c: 206: {;eusart2.c: 207: eusart2RxHead = 0;
  5719  0012AA  0E00               	movlw	0
  5720  0012AC  6E45               	movwf	_eusart2RxHead^0,c	;volatile
  5721  0012AE                     i1l2569:
  5722                           
  5723                           ;eusart2.c: 208: };eusart2.c: 209: eusart2RxCount++;
  5724  0012AE  2A43               	incf	_eusart2RxCount^0,f,c	;volatile
  5725  0012B0  0012               	return		;funcret
  5726  0012B2                     __end_of_EUSART2_Receive_ISR:
  5727                           	opt callstack 0
  5728                           
  5729 ;; *************** function _ADC_ISR *****************
  5730 ;; Defined at:
  5731 ;;		line 135 in file "mcc_generated_files/adc.c"
  5732 ;; Parameters:    Size  Location     Type
  5733 ;;		None
  5734 ;; Auto vars:     Size  Location     Type
  5735 ;;		None
  5736 ;; Return value:  Size  Location     Type
  5737 ;;                  1    wreg      void 
  5738 ;; Registers used:
  5739 ;;		None
  5740 ;; Tracked objects:
  5741 ;;		On entry : 0/0
  5742 ;;		On exit  : 0/0
  5743 ;;		Unchanged: 0/0
  5744 ;; Data sizes:     COMRAM   BANK0   BANK1
  5745 ;;      Params:         0       0       0
  5746 ;;      Locals:         0       0       0
  5747 ;;      Temps:          0       0       0
  5748 ;;      Totals:         0       0       0
  5749 ;;Total ram usage:        0 bytes
  5750 ;; Hardware stack levels used:    1
  5751 ;; Hardware stack levels required when called:    4
  5752 ;; This function calls:
  5753 ;;		Nothing
  5754 ;; This function is called by:
  5755 ;;		_INTERRUPT_InterruptManagerLow
  5756 ;; This function uses a non-reentrant model
  5757 ;;
  5758                           
  5759                           	psect	text34
  5760  0013BA                     __ptext34:
  5761                           	opt callstack 0
  5762  0013BA                     _ADC_ISR:
  5763                           	opt callstack 21
  5764                           
  5765                           ;adc.c: 138: PIR1bits.ADIF = 0;
  5766                           
  5767                           ;incstack = 0
  5768  0013BA  9C9E               	bcf	158,6,c	;volatile
  5769  0013BC  0012               	return		;funcret
  5770  0013BE                     __end_of_ADC_ISR:
  5771                           	opt callstack 0
  5772                           
  5773 ;; *************** function _INTERRUPT_InterruptManagerHigh *****************
  5774 ;; Defined at:
  5775 ;;		line 80 in file "mcc_generated_files/interrupt_manager.c"
  5776 ;; Parameters:    Size  Location     Type
  5777 ;;		None
  5778 ;; Auto vars:     Size  Location     Type
  5779 ;;		None
  5780 ;; Return value:  Size  Location     Type
  5781 ;;                  1    wreg      void 
  5782 ;; Registers used:
  5783 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, cstack
  5784 ;; Tracked objects:
  5785 ;;		On entry : 0/0
  5786 ;;		On exit  : 0/0
  5787 ;;		Unchanged: 0/0
  5788 ;; Data sizes:     COMRAM   BANK0   BANK1
  5789 ;;      Params:         0       0       0
  5790 ;;      Locals:         0       0       0
  5791 ;;      Temps:          4       0       0
  5792 ;;      Totals:         4       0       0
  5793 ;;Total ram usage:        4 bytes
  5794 ;; Hardware stack levels used:    1
  5795 ;; Hardware stack levels required when called:    3
  5796 ;; This function calls:
  5797 ;;		Absolute function
  5798 ;;		_EUSART1_Receive_ISR
  5799 ;;		_EUSART1_Transmit_ISR
  5800 ;;		_TMR0_ISR
  5801 ;; This function is called by:
  5802 ;;		Interrupt level 2
  5803 ;; This function uses a non-reentrant model
  5804 ;;
  5805                           
  5806                           	psect	intcode
  5807  000008                     __pintcode:
  5808                           	opt callstack 0
  5809  000008                     _INTERRUPT_InterruptManagerHigh:
  5810                           	opt callstack 21
  5811                           
  5812                           ;incstack = 0
  5813  000008  8253               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  5814  00000A  EF59  F007         	goto	int_func
  5815                           
  5816                           	psect	intcode_body
  5817  000EB2                     __pintcode_body:
  5818                           	opt callstack 21
  5819  000EB2                     int_func:
  5820                           	opt callstack 21
  5821  000EB2  CFFA F001          	movff	pclath,??_INTERRUPT_InterruptManagerHigh
  5822  000EB6  CFFB F002          	movff	pclatu,??_INTERRUPT_InterruptManagerHigh+1
  5823  000EBA  CFD9 F003          	movff	fsr2l,??_INTERRUPT_InterruptManagerHigh+2
  5824  000EBE  CFDA F004          	movff	fsr2h,??_INTERRUPT_InterruptManagerHigh+3
  5825                           
  5826                           ;interrupt_manager.c: 83: if(PIE1bits.RC1IE == 1 && PIR1bits.RC1IF == 1)
  5827  000EC2  BA9D               	btfsc	157,5,c	;volatile
  5828  000EC4  AA9E               	btfss	158,5,c	;volatile
  5829  000EC6  D009               	goto	i2l142
  5830                           
  5831                           ;interrupt_manager.c: 84: {;interrupt_manager.c: 85: EUSART1_RxDefaultInterruptHandler()
      +                          ;
  5832  000EC8  D801               	call	i2u132_48
  5833  000ECA  D01C               	goto	i2l145
  5834  000ECC                     i2u132_48:
  5835  000ECC  0005               	push	
  5836  000ECE  0100               	movlb	0	; () banked
  5837  000ED0  6EFA               	movwf	pclath,c
  5838  000ED2  51F8               	movf	_EUSART1_RxDefaultInterruptHandler& (0+255),w,b
  5839  000ED4  6EFD               	movwf	tosl,c
  5840  000ED6  51F9               	movf	(_EUSART1_RxDefaultInterruptHandler+1)& (0+255),w,b
  5841  000ED8  D00B               	goto	L10
  5842  000EDA                     i2l142:
  5843                           
  5844                           ;interrupt_manager.c: 87: else if(PIE1bits.TX1IE == 1 && PIR1bits.TX1IF == 1)
  5845  000EDA  B89D               	btfsc	157,4,c	;volatile
  5846  000EDC  A89E               	btfss	158,4,c	;volatile
  5847  000EDE  D00D               	goto	i2l144
  5848                           
  5849                           ;interrupt_manager.c: 88: {;interrupt_manager.c: 89: EUSART1_TxDefaultInterruptHandler()
      +                          ;
  5850  000EE0  D801               	call	i2u135_48
  5851  000EE2  D010               	goto	i2l145
  5852  000EE4                     i2u135_48:
  5853  000EE4  0005               	push	
  5854  000EE6  0100               	movlb	0	; () banked
  5855  000EE8  6EFA               	movwf	pclath,c
  5856  000EEA  51FA               	movf	_EUSART1_TxDefaultInterruptHandler& (0+255),w,b
  5857  000EEC  6EFD               	movwf	tosl,c
  5858  000EEE  51FB               	movf	(_EUSART1_TxDefaultInterruptHandler+1)& (0+255),w,b
  5859  000EF0                     L10:
  5860  000EF0  6EFE               	movwf	tosh,c
  5861  000EF2  50F8               	movf	tblptru,w,c
  5862  000EF4  6EFF               	movwf	tosu,c
  5863  000EF6  50FA               	movf	pclath,w,c
  5864  000EF8  0012               	return		;indir
  5865  000EFA                     i2l144:
  5866                           
  5867                           ;interrupt_manager.c: 91: else if(INTCONbits.TMR0IE == 1 && INTCONbits.TMR0IF == 1)
  5868  000EFA  BAF2               	btfsc	242,5,c	;volatile
  5869  000EFC  A4F2               	btfss	242,2,c	;volatile
  5870  000EFE  D002               	goto	i2l145
  5871                           
  5872                           ;interrupt_manager.c: 92: {;interrupt_manager.c: 93: TMR0_ISR();
  5873  000F00  ECA2  F009         	call	_TMR0_ISR	;wreg free
  5874  000F04                     i2l145:
  5875  000F04  C004  FFDA         	movff	??_INTERRUPT_InterruptManagerHigh+3,fsr2h
  5876  000F08  C003  FFD9         	movff	??_INTERRUPT_InterruptManagerHigh+2,fsr2l
  5877  000F0C  C002  FFFB         	movff	??_INTERRUPT_InterruptManagerHigh+1,pclatu
  5878  000F10  C001  FFFA         	movff	??_INTERRUPT_InterruptManagerHigh,pclath
  5879  000F14  9253               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  5880  000F16  0011               	retfie		f
  5881  000F18                     __end_of_INTERRUPT_InterruptManagerHigh:
  5882                           	opt callstack 0
  5883                           
  5884 ;; *************** function _TMR0_ISR *****************
  5885 ;; Defined at:
  5886 ;;		line 136 in file "mcc_generated_files/tmr0.c"
  5887 ;; Parameters:    Size  Location     Type
  5888 ;;		None
  5889 ;; Auto vars:     Size  Location     Type
  5890 ;;		None
  5891 ;; Return value:  Size  Location     Type
  5892 ;;                  1    wreg      void 
  5893 ;; Registers used:
  5894 ;;		wreg, status,2, status,0, pclath, tosl, cstack
  5895 ;; Tracked objects:
  5896 ;;		On entry : 0/0
  5897 ;;		On exit  : 0/0
  5898 ;;		Unchanged: 0/0
  5899 ;; Data sizes:     COMRAM   BANK0   BANK1
  5900 ;;      Params:         0       0       0
  5901 ;;      Locals:         0       0       0
  5902 ;;      Temps:          0       0       0
  5903 ;;      Totals:         0       0       0
  5904 ;;Total ram usage:        0 bytes
  5905 ;; Hardware stack levels used:    1
  5906 ;; Hardware stack levels required when called:    2
  5907 ;; This function calls:
  5908 ;;		_TMR0_CallBack
  5909 ;; This function is called by:
  5910 ;;		_INTERRUPT_InterruptManagerHigh
  5911 ;; This function uses a non-reentrant model
  5912 ;;
  5913                           
  5914                           	psect	text36
  5915  001344                     __ptext36:
  5916                           	opt callstack 0
  5917  001344                     _TMR0_ISR:
  5918                           	opt callstack 21
  5919                           
  5920                           ;tmr0.c: 140: INTCONbits.TMR0IF = 0;
  5921                           
  5922                           ;incstack = 0
  5923  001344  94F2               	bcf	242,2,c	;volatile
  5924                           
  5925                           ;tmr0.c: 144: TMR0H = timer0ReloadVal >> 8;
  5926  001346  504E               	movf	(_timer0ReloadVal+1)^0,w,c	;volatile
  5927  001348  6ED7               	movwf	215,c	;volatile
  5928                           
  5929                           ;tmr0.c: 145: TMR0L = (uint8_t) timer0ReloadVal;
  5930  00134A  C04D  FFD6         	movff	_timer0ReloadVal,4054	;volatile
  5931                           
  5932                           ;tmr0.c: 149: TMR0_CallBack();
  5933  00134E  EC59  F009         	call	_TMR0_CallBack	;wreg free
  5934  001352  0012               	return		;funcret
  5935  001354                     __end_of_TMR0_ISR:
  5936                           	opt callstack 0
  5937                           
  5938 ;; *************** function _TMR0_CallBack *****************
  5939 ;; Defined at:
  5940 ;;		line 154 in file "mcc_generated_files/tmr0.c"
  5941 ;; Parameters:    Size  Location     Type
  5942 ;;		None
  5943 ;; Auto vars:     Size  Location     Type
  5944 ;;		None
  5945 ;; Return value:  Size  Location     Type
  5946 ;;                  1    wreg      void 
  5947 ;; Registers used:
  5948 ;;		wreg, status,2, status,0, pclath, tosl, cstack
  5949 ;; Tracked objects:
  5950 ;;		On entry : 0/0
  5951 ;;		On exit  : 0/0
  5952 ;;		Unchanged: 0/0
  5953 ;; Data sizes:     COMRAM   BANK0   BANK1
  5954 ;;      Params:         0       0       0
  5955 ;;      Locals:         0       0       0
  5956 ;;      Temps:          0       0       0
  5957 ;;      Totals:         0       0       0
  5958 ;;Total ram usage:        0 bytes
  5959 ;; Hardware stack levels used:    1
  5960 ;; Hardware stack levels required when called:    1
  5961 ;; This function calls:
  5962 ;;		Absolute function
  5963 ;;		_TMR0_DefaultInterruptHandler
  5964 ;;		_timer_8ms
  5965 ;; This function is called by:
  5966 ;;		_TMR0_ISR
  5967 ;; This function uses a non-reentrant model
  5968 ;;
  5969                           
  5970                           	psect	text37
  5971  0012B2                     __ptext37:
  5972                           	opt callstack 0
  5973  0012B2                     _TMR0_CallBack:
  5974                           	opt callstack 21
  5975                           
  5976                           ;tmr0.c: 158: if(TMR0_InterruptHandler)
  5977                           
  5978                           ;incstack = 0
  5979  0012B2  504F               	movf	_TMR0_InterruptHandler^0,w,c
  5980  0012B4  1050               	iorwf	(_TMR0_InterruptHandler+1)^0,w,c
  5981  0012B6  B4D8               	btfsc	status,2,c
  5982  0012B8  0012               	return	
  5983                           
  5984                           ;tmr0.c: 159: {;tmr0.c: 160: TMR0_InterruptHandler();
  5985  0012BA  D801               	call	i2u84_48
  5986  0012BC  0012               	return	
  5987  0012BE                     i2u84_48:
  5988  0012BE  0005               	push	
  5989  0012C0  6EFA               	movwf	pclath,c
  5990  0012C2  504F               	movf	_TMR0_InterruptHandler^0,w,c
  5991  0012C4  6EFD               	movwf	tosl,c
  5992  0012C6  5050               	movf	(_TMR0_InterruptHandler+1)^0,w,c
  5993  0012C8  6EFE               	movwf	tosh,c
  5994  0012CA  50F8               	movf	tblptru,w,c
  5995  0012CC  6EFF               	movwf	tosu,c
  5996  0012CE  50FA               	movf	pclath,w,c
  5997  0012D0  0012               	return		;indir
  5998  0012D2                     __end_of_TMR0_CallBack:
  5999                           	opt callstack 0
  6000                           
  6001 ;; *************** function _TMR0_DefaultInterruptHandler *****************
  6002 ;; Defined at:
  6003 ;;		line 168 in file "mcc_generated_files/tmr0.c"
  6004 ;; Parameters:    Size  Location     Type
  6005 ;;		None
  6006 ;; Auto vars:     Size  Location     Type
  6007 ;;		None
  6008 ;; Return value:  Size  Location     Type
  6009 ;;                  1    wreg      void 
  6010 ;; Registers used:
  6011 ;;		None
  6012 ;; Tracked objects:
  6013 ;;		On entry : 0/0
  6014 ;;		On exit  : 0/0
  6015 ;;		Unchanged: 0/0
  6016 ;; Data sizes:     COMRAM   BANK0   BANK1
  6017 ;;      Params:         0       0       0
  6018 ;;      Locals:         0       0       0
  6019 ;;      Temps:          0       0       0
  6020 ;;      Totals:         0       0       0
  6021 ;;Total ram usage:        0 bytes
  6022 ;; Hardware stack levels used:    1
  6023 ;; This function calls:
  6024 ;;		Nothing
  6025 ;; This function is called by:
  6026 ;;		_TMR0_Initialize
  6027 ;;		_TMR0_CallBack
  6028 ;; This function uses a non-reentrant model
  6029 ;;
  6030                           
  6031                           	psect	text38
  6032  0013BE                     __ptext38:
  6033                           	opt callstack 0
  6034  0013BE                     _TMR0_DefaultInterruptHandler:
  6035                           	opt callstack 21
  6036                           
  6037                           ;incstack = 0
  6038  0013BE  0012               	return		;funcret
  6039  0013C0                     __end_of_TMR0_DefaultInterruptHandler:
  6040                           	opt callstack 0
  6041                           
  6042 ;; *************** function _timer_8ms *****************
  6043 ;; Defined at:
  6044 ;;		line 449 in file "main.c"
  6045 ;; Parameters:    Size  Location     Type
  6046 ;;		None
  6047 ;; Auto vars:     Size  Location     Type
  6048 ;;		None
  6049 ;; Return value:  Size  Location     Type
  6050 ;;                  1    wreg      void 
  6051 ;; Registers used:
  6052 ;;		status,2, status,0
  6053 ;; Tracked objects:
  6054 ;;		On entry : 0/0
  6055 ;;		On exit  : 0/0
  6056 ;;		Unchanged: 0/0
  6057 ;; Data sizes:     COMRAM   BANK0   BANK1
  6058 ;;      Params:         0       0       0
  6059 ;;      Locals:         0       0       0
  6060 ;;      Temps:          0       0       0
  6061 ;;      Totals:         0       0       0
  6062 ;;Total ram usage:        0 bytes
  6063 ;; Hardware stack levels used:    1
  6064 ;; This function calls:
  6065 ;;		Nothing
  6066 ;; This function is called by:
  6067 ;;		_main
  6068 ;;		_TMR0_CallBack
  6069 ;; This function uses a non-reentrant model
  6070 ;;
  6071                           
  6072                           	psect	text39
  6073  0013AC                     __ptext39:
  6074                           	opt callstack 0
  6075  0013AC                     _timer_8ms:
  6076                           	opt callstack 21
  6077                           
  6078                           ;main.c: 451: timer++;
  6079                           
  6080                           ;incstack = 0
  6081  0013AC  4A3F               	infsnz	_timer^0,f,c	;volatile
  6082  0013AE  2A40               	incf	(_timer+1)^0,f,c	;volatile
  6083  0013B0  0012               	return		;funcret
  6084  0013B2                     __end_of_timer_8ms:
  6085                           	opt callstack 0
  6086                           
  6087 ;; *************** function _EUSART1_Transmit_ISR *****************
  6088 ;; Defined at:
  6089 ;;		line 176 in file "mcc_generated_files/eusart1.c"
  6090 ;; Parameters:    Size  Location     Type
  6091 ;;		None
  6092 ;; Auto vars:     Size  Location     Type
  6093 ;;		None
  6094 ;; Return value:  Size  Location     Type
  6095 ;;                  1    wreg      void 
  6096 ;; Registers used:
  6097 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6098 ;; Tracked objects:
  6099 ;;		On entry : 0/0
  6100 ;;		On exit  : 0/0
  6101 ;;		Unchanged: 0/0
  6102 ;; Data sizes:     COMRAM   BANK0   BANK1
  6103 ;;      Params:         0       0       0
  6104 ;;      Locals:         0       0       0
  6105 ;;      Temps:          0       0       0
  6106 ;;      Totals:         0       0       0
  6107 ;;Total ram usage:        0 bytes
  6108 ;; Hardware stack levels used:    1
  6109 ;; This function calls:
  6110 ;;		Nothing
  6111 ;; This function is called by:
  6112 ;;		_EUSART1_Initialize
  6113 ;;		_INTERRUPT_InterruptManagerHigh
  6114 ;; This function uses a non-reentrant model
  6115 ;;
  6116                           
  6117                           	psect	text40
  6118  001260                     __ptext40:
  6119                           	opt callstack 0
  6120  001260                     _EUSART1_Transmit_ISR:
  6121                           	opt callstack 23
  6122                           
  6123                           ;eusart1.c: 180: if(sizeof(eusart1TxBuffer) > eusart1TxBufferRemaining)
  6124                           
  6125                           ;incstack = 0
  6126  001260  0E8C               	movlw	140
  6127  001262  6052               	cpfslt	_eusart1TxBufferRemaining^0,c	;volatile
  6128  001264  D010               	goto	i2l292
  6129                           
  6130                           ;eusart1.c: 181: {;eusart1.c: 182: TXREG1 = eusart1TxBuffer[eusart1TxTail++];
  6131  001266  0E40               	movlw	low _eusart1TxBuffer
  6132  001268  244B               	addwf	_eusart1TxTail^0,w,c	;volatile
  6133  00126A  6ED9               	movwf	fsr2l,c
  6134  00126C  6ADA               	clrf	fsr2h,c
  6135  00126E  0E01               	movlw	high _eusart1TxBuffer
  6136  001270  22DA               	addwfc	fsr2h,f,c
  6137  001272  50DF               	movf	indf2,w,c
  6138  001274  6EAD               	movwf	173,c	;volatile
  6139  001276  2A4B               	incf	_eusart1TxTail^0,f,c	;volatile
  6140                           
  6141                           ;eusart1.c: 183: if(sizeof(eusart1TxBuffer) <= eusart1TxTail)
  6142  001278  0E8B               	movlw	139
  6143  00127A  644B               	cpfsgt	_eusart1TxTail^0,c	;volatile
  6144  00127C  D002               	goto	i2l2529
  6145                           
  6146                           ;eusart1.c: 184: {;eusart1.c: 185: eusart1TxTail = 0;
  6147  00127E  0E00               	movlw	0
  6148  001280  6E4B               	movwf	_eusart1TxTail^0,c	;volatile
  6149  001282                     i2l2529:
  6150                           
  6151                           ;eusart1.c: 186: };eusart1.c: 187: eusart1TxBufferRemaining++;
  6152  001282  2A52               	incf	_eusart1TxBufferRemaining^0,f,c	;volatile
  6153                           
  6154                           ;eusart1.c: 188: }
  6155  001284  0012               	return	
  6156  001286                     i2l292:
  6157                           
  6158                           ;eusart1.c: 189: else;eusart1.c: 190: {;eusart1.c: 191: PIE1bits.TX1IE = 0;
  6159  001286  989D               	bcf	157,4,c	;volatile
  6160  001288  0012               	return		;funcret
  6161  00128A                     __end_of_EUSART1_Transmit_ISR:
  6162                           	opt callstack 0
  6163                           
  6164 ;; *************** function _EUSART1_Receive_ISR *****************
  6165 ;; Defined at:
  6166 ;;		line 196 in file "mcc_generated_files/eusart1.c"
  6167 ;; Parameters:    Size  Location     Type
  6168 ;;		None
  6169 ;; Auto vars:     Size  Location     Type
  6170 ;;		None
  6171 ;; Return value:  Size  Location     Type
  6172 ;;                  1    wreg      void 
  6173 ;; Registers used:
  6174 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6175 ;; Tracked objects:
  6176 ;;		On entry : 0/0
  6177 ;;		On exit  : 0/0
  6178 ;;		Unchanged: 0/0
  6179 ;; Data sizes:     COMRAM   BANK0   BANK1
  6180 ;;      Params:         0       0       0
  6181 ;;      Locals:         0       0       0
  6182 ;;      Temps:          0       0       0
  6183 ;;      Totals:         0       0       0
  6184 ;;Total ram usage:        0 bytes
  6185 ;; Hardware stack levels used:    1
  6186 ;; This function calls:
  6187 ;;		Nothing
  6188 ;; This function is called by:
  6189 ;;		_EUSART1_Initialize
  6190 ;;		_INTERRUPT_InterruptManagerHigh
  6191 ;; This function uses a non-reentrant model
  6192 ;;
  6193                           
  6194                           	psect	text41
  6195  0011A0                     __ptext41:
  6196                           	opt callstack 0
  6197  0011A0                     _EUSART1_Receive_ISR:
  6198                           	opt callstack 23
  6199                           
  6200                           ;eusart1.c: 198: if(1 == RCSTA1bits.OERR)
  6201                           
  6202                           ;incstack = 0
  6203  0011A0  A2AB               	btfss	171,1,c	;volatile
  6204  0011A2  D002               	goto	i2l2535
  6205                           
  6206                           ;eusart1.c: 199: {;eusart1.c: 202: RCSTA1bits.CREN = 0;
  6207  0011A4  98AB               	bcf	171,4,c	;volatile
  6208                           
  6209                           ;eusart1.c: 203: RCSTA1bits.CREN = 1;
  6210  0011A6  88AB               	bsf	171,4,c	;volatile
  6211  0011A8                     i2l2535:
  6212                           
  6213                           ;eusart1.c: 204: };eusart1.c: 207: if(sizeof(eusart1RxBuffer) <= eusart1RxHead)
  6214  0011A8  0E23               	movlw	35
  6215  0011AA  644A               	cpfsgt	_eusart1RxHead^0,c	;volatile
  6216  0011AC  D009               	goto	i2l2539
  6217                           
  6218                           ;eusart1.c: 208: {;eusart1.c: 209: eusart1RxBuffer[eusart1RxHead] = RCREG1;
  6219  0011AE  0ECC               	movlw	low _eusart1RxBuffer
  6220  0011B0  244A               	addwf	_eusart1RxHead^0,w,c	;volatile
  6221  0011B2  6ED9               	movwf	fsr2l,c
  6222  0011B4  6ADA               	clrf	fsr2h,c
  6223  0011B6  0E01               	movlw	high _eusart1RxBuffer
  6224  0011B8  22DA               	addwfc	fsr2h,f,c
  6225  0011BA  CFAE FFDF          	movff	4014,indf2	;volatile
  6226                           
  6227                           ;eusart1.c: 210: }
  6228  0011BE  0012               	return	
  6229  0011C0                     i2l2539:
  6230                           
  6231                           ;eusart1.c: 211: else;eusart1.c: 212: {;eusart1.c: 213: eusart1RxBuffer[eusart1RxHead++]
      +                           = RCREG1;
  6232  0011C0  0ECC               	movlw	low _eusart1RxBuffer
  6233  0011C2  244A               	addwf	_eusart1RxHead^0,w,c	;volatile
  6234  0011C4  6ED9               	movwf	fsr2l,c
  6235  0011C6  6ADA               	clrf	fsr2h,c
  6236  0011C8  0E01               	movlw	high _eusart1RxBuffer
  6237  0011CA  22DA               	addwfc	fsr2h,f,c
  6238  0011CC  CFAE FFDF          	movff	4014,indf2	;volatile
  6239  0011D0  2A4A               	incf	_eusart1RxHead^0,f,c	;volatile
  6240                           
  6241                           ;eusart1.c: 214: eusart1RxCount++;
  6242  0011D2  2A48               	incf	_eusart1RxCount^0,f,c	;volatile
  6243  0011D4  0012               	return		;funcret
  6244  0011D6                     __end_of_EUSART1_Receive_ISR:
  6245                           	opt callstack 0
  6246                           
  6247                           	psect	text42
  6248  000000                     __ptext42:
  6249                           	opt callstack 0
  6250                           
  6251                           	psect	rparam
  6252  0000                     
  6253                           	psect	temp
  6254  000053                     btemp:
  6255                           	opt callstack 0
  6256  000053                     	ds	1
  6257  0000                     int$flags	set	btemp
  6258  0000                     wtemp8	set	btemp+1
  6259  0000                     ttemp5	set	btemp+1
  6260  0000                     ttemp6	set	btemp+4
  6261  0000                     ttemp7	set	btemp+8
  6262                           tosu	equ	0xFFF
  6263                           tosh	equ	0xFFE
  6264                           tosl	equ	0xFFD
  6265                           stkptr	equ	0xFFC
  6266                           pclatu	equ	0xFFB
  6267                           pclath	equ	0xFFA
  6268                           pcl	equ	0xFF9
  6269                           tblptru	equ	0xFF8
  6270                           tblptrh	equ	0xFF7
  6271                           tblptrl	equ	0xFF6
  6272                           tablat	equ	0xFF5
  6273                           prodh	equ	0xFF4
  6274                           prodl	equ	0xFF3
  6275                           indf0	equ	0xFEF
  6276                           postinc0	equ	0xFEE
  6277                           postdec0	equ	0xFED
  6278                           preinc0	equ	0xFEC
  6279                           plusw0	equ	0xFEB
  6280                           fsr0h	equ	0xFEA
  6281                           fsr0l	equ	0xFE9
  6282                           wreg	equ	0xFE8
  6283                           indf1	equ	0xFE7
  6284                           postinc1	equ	0xFE6
  6285                           postdec1	equ	0xFE5
  6286                           preinc1	equ	0xFE4
  6287                           plusw1	equ	0xFE3
  6288                           fsr1h	equ	0xFE2
  6289                           fsr1l	equ	0xFE1
  6290                           bsr	equ	0xFE0
  6291                           indf2	equ	0xFDF
  6292                           postinc2	equ	0xFDE
  6293                           postdec2	equ	0xFDD
  6294                           preinc2	equ	0xFDC
  6295                           plusw2	equ	0xFDB
  6296                           fsr2h	equ	0xFDA
  6297                           fsr2l	equ	0xFD9
  6298                           status	equ	0xFD8


Data Sizes:
    Strings     175
    Constant    512
    Data        0
    BSS         406
    Persistent  14
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     50      82
    BANK0           160     12     160
    BANK1           256     14     254

Pointer List with Targets:

    uart_run@tran	PTR struct modbus_485 size(2) Largest target is 140
		 -> eusart1TxBuffer(BANK1[140]), 

    uart_run@recv	PTR struct modbus_485 size(2) Largest target is 36
		 -> eusart1RxBuffer(BANK1[36]), 

    string_tx_uart2@text	PTR unsigned char  size(2) Largest target is 26
		 -> STR_24(CODE[5]), STR_23(CODE[2]), STR_22(CODE[15]), STR_21(CODE[7]), 
		 -> STR_20(CODE[10]), STR_19(CODE[6]), STR_18(CODE[2]), STR_17(CODE[6]), 
		 -> STR_16(CODE[7]), STR_15(CODE[8]), STR_14(CODE[2]), STR_13(CODE[7]), 
		 -> STR_12(CODE[7]), STR_11(CODE[8]), STR_10(CODE[2]), STR_9(CODE[6]), 
		 -> STR_8(CODE[7]), STR_7(CODE[8]), STR_6(CODE[7]), STR_5(CODE[21]), 
		 -> STR_4(CODE[9]), STR_3(CODE[13]), STR_2(CODE[12]), STR_1(CODE[26]), 

    crcGen@commandBuffer	PTR unsigned char  size(2) Largest target is 140
		 -> eusart1RxBuffer(BANK1[36]), eusart1TxBuffer(BANK1[140]), 

    crcGen@memPtr1	PTR unsigned char  size(2) Largest target is 140
		 -> eusart1RxBuffer(BANK1[36]), eusart1TxBuffer(BANK1[140]), 

    EUSART2_SetRxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART2_Receive_ISR(), 

    EUSART2_SetTxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART2_Transmit_ISR(), 

    EUSART1_SetRxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART1_Receive_ISR(), 

    EUSART1_SetTxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART1_Transmit_ISR(), 

    EUSART2_TxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART2_Transmit_ISR(), Absolute function(), 

    EUSART2_RxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART2_Receive_ISR(), Absolute function(), 

    EUSART1_TxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART1_Transmit_ISR(), Absolute function(), 

    EUSART1_RxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART1_Receive_ISR(), Absolute function(), 

    TMR0_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> timer_8ms(), TMR0_DefaultInterruptHandler(), 

    TMR0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> timer_8ms(), Absolute function(), TMR0_DefaultInterruptHandler(), 


Critical Paths under _main in COMRAM

    _uart_run->_uint_tx_uart2
    _uint_tx_uart2->_EUSART2_Write
    _SYSTEM_Initialize->_TMR0_Initialize
    _TMR0_Initialize->_TMR0_SetInterruptHandler
    _EUSART2_Initialize->_EUSART2_SetRxInterruptHandler
    _EUSART2_Initialize->_EUSART2_SetTxInterruptHandler
    _EUSART1_Initialize->_EUSART1_SetRxInterruptHandler
    _EUSART1_Initialize->_EUSART1_SetTxInterruptHandler
    _ADC_run->_u32_sqrt
    _u32_sqrt->___lldiv
    _check_register->_string_tx_uart2
    _string_tx_uart2->_EUSART2_Write

Critical Paths under _INTERRUPT_InterruptManagerLow in COMRAM

    None.

Critical Paths under _INTERRUPT_InterruptManagerHigh in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_ADC_run

Critical Paths under _INTERRUPT_InterruptManagerLow in BANK0

    None.

Critical Paths under _INTERRUPT_InterruptManagerHigh in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_uart_run

Critical Paths under _INTERRUPT_InterruptManagerLow in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManagerHigh in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   20686
                                             10 BANK0      2     2      0
                  _ADC_SelectChannel
                            _ADC_run
                _EUSART1_is_rx_ready
                 _EUSART1_is_tx_done
                  _SYSTEM_Initialize
           _TMR0_SetInterruptHandler
                    _string_tx_uart2
                           _uart_run
 ---------------------------------------------------------------------------------
 (1) _uart_run                                            28    28      0   10445
                                             26 COMRAM    14    14      0
                                              0 BANK1     14    14      0
                      _EUSART2_Write
                     _check_register
                             _crcGen
                    _string_tx_uart2
                      _uint_tx_uart2
 ---------------------------------------------------------------------------------
 (2) _uint_tx_uart2                                       14     9      5    1843
                                             12 COMRAM    14     9      5
                      _EUSART2_Write
 ---------------------------------------------------------------------------------
 (2) _crcGen                                              10     7      3     918
                                             11 COMRAM    10     7      3
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     695
                     _ADC_Initialize
                 _EUSART1_Initialize
                 _EUSART2_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      2     2      0     211
                                             13 COMRAM     2     2      0
           _TMR0_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (1) _TMR0_SetInterruptHandler                             2     0      2     211
                                             11 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART2_Initialize                                   0     0      0     242
      _EUSART2_SetRxInterruptHandler
      _EUSART2_SetTxInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _EUSART2_SetTxInterruptHandler                        2     0      2     121
                                             11 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART2_SetRxInterruptHandler                        2     0      2     121
                                             11 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Initialize                                   0     0      0     242
      _EUSART1_SetRxInterruptHandler
      _EUSART1_SetTxInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _EUSART1_SetTxInterruptHandler                        2     0      2     121
                                             11 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART1_SetRxInterruptHandler                        2     0      2     121
                                             11 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _EUSART1_is_tx_done                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _EUSART1_is_rx_ready                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ADC_run                                             10    10      0    6810
                                              0 BANK0     10    10      0
            _ADC_GetConversionResult
               _ADC_IsConversionDone
                _ADC_StartConversion
                            ___lldiv
                             ___lmul
                            ___lwmod
                     _check_register
                    _string_tx_uart2
                           _u32_sqrt
 ---------------------------------------------------------------------------------
 (2) _u32_sqrt                                            26    22      4     402
                                             24 COMRAM    26    22      4
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (2) _check_register                                       0     0      0    2352
                    _string_tx_uart2
 ---------------------------------------------------------------------------------
 (2) _string_tx_uart2                                      5     3      2    2352
                                             12 COMRAM     5     3      2
                      _EUSART2_Write
 ---------------------------------------------------------------------------------
 (3) _EUSART2_Write                                        1     1      0      62
                                             11 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     412
                                             11 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              12     4      8     456
                                             11 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     601
                                             11 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (2) _ADC_StartConversion                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_IsConversionDone                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_GetConversionResult                              4     2      2       0
                                             11 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _ADC_SelectChannel                                    2     2      0      22
                                             11 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _INTERRUPT_InterruptManagerLow                        7     7      0       0
                                              4 COMRAM     7     7      0
                   Absolute function *
                            _ADC_ISR
                _EUSART2_Receive_ISR *
               _EUSART2_Transmit_ISR *
 ---------------------------------------------------------------------------------
 (6) _EUSART2_Transmit_ISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _EUSART2_Receive_ISR                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _ADC_ISR                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (10) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _INTERRUPT_InterruptManagerHigh                       4     4      0       0
                                              0 COMRAM     4     4      0
                   Absolute function *
                _EUSART1_Receive_ISR *
               _EUSART1_Transmit_ISR *
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (8) _TMR0_ISR                                             0     0      0       0
                      _TMR0_CallBack
 ---------------------------------------------------------------------------------
 (9) _TMR0_CallBack                                        0     0      0       0
                   Absolute function *
       _TMR0_DefaultInterruptHandler *
                          _timer_8ms *
 ---------------------------------------------------------------------------------
 (10) _timer_8ms                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _TMR0_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (10) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _EUSART1_Transmit_ISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _EUSART1_Receive_ISR                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_SelectChannel
   _ADC_run
     _ADC_GetConversionResult
     _ADC_IsConversionDone
     _ADC_StartConversion
     ___lldiv
     ___lmul
     ___lwmod
     _check_register
       _string_tx_uart2
         _EUSART2_Write
     _string_tx_uart2
       _EUSART2_Write
     _u32_sqrt
       ___lldiv (ARG)
   _EUSART1_is_rx_ready
   _EUSART1_is_tx_done
   _SYSTEM_Initialize
     _ADC_Initialize
     _EUSART1_Initialize
       _EUSART1_SetRxInterruptHandler
       _EUSART1_SetTxInterruptHandler
     _EUSART2_Initialize
       _EUSART2_SetRxInterruptHandler
       _EUSART2_SetTxInterruptHandler
     _INTERRUPT_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR0_Initialize
       _TMR0_SetInterruptHandler
   _TMR0_SetInterruptHandler
   _string_tx_uart2
     _EUSART2_Write
   _uart_run
     _EUSART2_Write
     _check_register
       _string_tx_uart2
         _EUSART2_Write
     _crcGen
     _string_tx_uart2
       _EUSART2_Write
     _uint_tx_uart2
       _EUSART2_Write

 _INTERRUPT_InterruptManagerLow (ROOT)
   Absolute function(Fake) *
   _ADC_ISR *
   _EUSART2_Receive_ISR *
   _EUSART2_Transmit_ISR *

 _INTERRUPT_InterruptManagerHigh (ROOT)
   Absolute function(Fake) *
   _EUSART1_Receive_ISR *
   _EUSART1_Transmit_ISR *
   _TMR0_ISR *
     _TMR0_CallBack
       Absolute function(Fake) *
       _TMR0_DefaultInterruptHandler *
       _timer_8ms *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1FF      0       0       8        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      E      FE       5       99.2%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0      C      A0       4      100.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     32      52       1       87.2%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1F0       6        0.0%
DATA                 0      0     1F0       9        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Fri Apr 10 12:32:58 2020

                     _eusart1TxBufferRemaining 0052                                             bsr 000FE0  
                              _timer0ReloadVal 004D                                   __CFG_CP0$OFF 000000  
                                 __CFG_CP1$OFF 000000                                    __CFG_LVP$ON 000000  
                                          l521 09C2                                            l540 086A  
                                          l615 0EA0                                            l379 117C  
                                          l577 0CBA                                            l569 0CF8  
                                 __CFG_CPB$OFF 000000                                   __CFG_CPD$OFF 000000  
                              __end_of_ADC_ISR 13BE                                            prod 000FF3  
                                          tosl 000FFD                                            wreg 000FE8  
                                   _TXSTA1bits 000FAC                                     _TXSTA2bits 000F72  
                              __end_of_ADC_run 0A84                                 _check_register 1018  
                                         l1077 112A                                           l3201 0B00  
                                         l3203 0B08                                           l3301 1100  
                                         l3037 119A                                           l3053 10B4  
                                         l3303 1108                                           l3039 119C  
                                         l3231 0D44                                           l3207 0B10  
                                         l3057 10D2                                           l3209 0BD0  
                                         l3401 00DA                                           l3243 0E12  
                                         l3309 1120                                           l3261 1054  
                                         l3157 0F26                                           l3165 0F64  
                                         l3181 0AB0                                           l3173 0A90  
                                         l3271 0F9A                                           l3191 0AD8  
                                         l3183 0AB8                                           l3175 0A98  
                                         l3407 0108                                           l3281 0E52  
                                         l3257 1044                                           l3193 0AE0  
                                         l3185 0AC0                                           l3177 0AA0  
                                         l3169 0A88                                           l3513 0590  
                                         l3505 055E                                           l3417 0186  
                                         l3283 0E5E                                           l3267 0F86  
                                         l3347 08E8                                           l3355 0938  
                                         l3195 0AE8                                           l3187 0AC8  
                                         l3179 0AA8                                           l3443 02A8  
                                         l3293 0E92                                           l3197 0AF0  
                                         l3189 0AD0                                           l3613 08B0  
                                         l3541 069A                                           l3453 02E4  
                                         l3445 02AC                                           l3605 0876  
                                         l3383 0A60                                           l3199 0AF8  
                                         l3543 06A4                                           l3607 0884  
                                         l3385 0A68                                           l3457 038E  
                                         l3625 0BF0                                           l3387 0A7A  
                                         l3571 07A2                                           l3547 0738  
                                         l3467 0420                                           l3557 0752  
                                         l3661 0C98                                           l3645 0C56  
                                         l3743 0B5C                                           l3495 0536  
                                         l3655 0C7C                                           l3745 0BC8  
                                         l3593 0846                                           l3675 0CD8  
                                         l3659 0C92                                           l3669 0CCA  
                                         STR_1 1F4F                                           STR_2 1F9A  
                                         STR_3 1F8D                                           STR_4 1FB0  
                                         STR_5 1F69                                           STR_6 1FD1  
                                         STR_7 1FC1                                           STR_8 1FE6  
                                         STR_9 1FF3                                           u2000 0CA4  
                                         u2030 0CE4                                           _LATA 000F89  
                                         _LATB 000F8A                                           _LATC 000F8B  
                                         u1630 0B36                                           u1640 0D6C  
                                         u1635 0B2C                                           u1740 0E62  
                                         u1820 0944                                           u1900 025C  
                                         u1645 0D62                                           u1590 1376  
                                         u1655 0D82                                           u1680 0E26  
                                         u1920 04EA                                           u1665 0DAA  
                                         u1770 110C                                           u1930 058A  
                                         u1860 0A52                                           u1940 064E  
                                         u1790 136A                                           u1960 077E  
                                         u1891 0176                                           u1980 0C62  
                                         _WPUB 000F61                          ??_EUSART2_Receive_ISR 0005  
                      _Modbus_Holding_Register 0060                                  _EUSART2_Write 116A  
                                         _main 0BD4                                           fsr1h 000FE2  
                                         fsr2h 000FDA                                           indf1 000FE7  
                                         indf2 000FDF                                           fsr1l 000FE1  
                                         fsr2l 000FD9                                           btemp 0053  
                                __CFG_BORV$190 000000                                           prodl 000FF3  
                                         start 009A                                  __CFG_IESO$OFF 000000  
                 __end_of_EUSART2_Transmit_ISR 1260                                  _uint_tx_uart2 0A84  
                                 ___param_bank 000000                        __end_of_TMR0_Initialize 116A  
               ??_TMR0_DefaultInterruptHandler 0001                 __size_of_OSCILLATOR_Initialize 000E  
                __end_of_OSCILLATOR_Initialize 1362                                          ?_main 0001  
                                        STR_10 1FD6                                          STR_11 1FC9  
                                        STR_12 1FE6                                          STR_20 1FA6  
                                        STR_13 1FDF                                          STR_21 1FD8  
                                        STR_14 1FD6                                          STR_22 1F7E  
                                        STR_23 1FD6                                          STR_15 1FB9  
                                        STR_16 1FE6                                          STR_24 1FF9  
                                        STR_17 1FF3                                          STR_18 1FD6  
                                        STR_19 1FED                                __end_of___lldiv 0EB2  
                                        _T0CON 000FD5                                 __CFG_DEBUG$OFF 000000  
                                        i1l153 0042                                          i1l155 005A  
                              __end_of___lwmod 1134                                          i2l142 0EDA  
                                        i2l144 0EFA                                          i1l384 125C  
                                        i2l145 0F04                                          i2l292 1286  
                  __size_of_EUSART1_is_tx_done 000C                                          _TMR0H 000FD7  
                                        _TMR0L 000FD6                                          _TRISA 000F92  
                                        _TRISB 000F93                                          _TRISC 000F94  
             __size_of_ADC_GetConversionResult 0014              __size_of_TMR0_SetInterruptHandler 000A  
                                __CFG_WRT0$OFF 000000                                  __CFG_WRT1$OFF 000000  
                          ___lmul@multiplicand 0010                      ?_TMR0_SetInterruptHandler 000C  
                         _EUSART1_Transmit_ISR 1260                                 __CFG_EBTR0$OFF 000000  
                               __CFG_FCMEN$OFF 000000                                 __CFG_EBTR1$OFF 000000  
                       __end_of_check_register 1064                               __end_of_TMR0_ISR 1354  
                                __CFG_WRTB$OFF 000000                                  __CFG_WRTC$OFF 000000  
                                __CFG_WRTD$OFF 000000                                 __CFG_EBTRB$OFF 000000  
                           __CFG_MCLRE$EXTMCLR 000000                                          _timer 003F  
                                        main@i 00F7                                 ?_EUSART2_Write 0001  
                                        pclath 000FFA                                          tablat 000FF5  
                                        ttemp5 0054                                          ttemp6 0057  
                                        ttemp7 005B                                          status 000FD8  
                                        wtemp8 0054                                 __CFG_HFOFST$ON 000000  
               ?_INTERRUPT_InterruptManagerLow 0001                                    u32_sqrt@rem 002B  
                               __CFG_PBADEN$ON 000000          __end_of_EUSART2_SetTxInterruptHandler 138E  
       __size_of_EUSART2_SetTxInterruptHandler 000A                  _EUSART2_SetTxInterruptHandler 1384  
                               ?_uint_tx_uart2 000D                                __initialization 11D6  
                   __end_of_EUSART1_Initialize 10AE                                   __end_of_main 0D1C  
                         __end_of_CRC_HI_TABLE 1F4F                               __end_of_u32_sqrt 0E30  
                                    ??_ADC_ISR 0005                                      ??_ADC_run 0033  
                                       ??_main 0033                                  __activetblptr 000002  
                         __end_of_CRC_LO_TABLE 1E4F                            ADC_run@sample_count 003B  
                        ?_EUSART1_Transmit_ISR 0001                            ADC_run@sample_total 0033  
                __size_of_ADC_IsConversionDone 000C                                ?_check_register 0001  
                   __end_of_EUSART2_Initialize 1018                                         _ADCON0 000FC2  
                                       _ADCON1 000FC1                                         _ADCON2 000FC0  
                     _eusart2TxBufferRemaining 0051                                         _ADRESH 000FC4  
                                       _ADRESL 000FC3                                         _ANSELA 000F38  
                                       _ANSELB 000F39                                         _ANSELC 000F3A  
                 __size_of_EUSART1_is_rx_ready 0004                                         i1l2561 1292  
                                       i1l2555 1258                                         i1l2569 12AE  
                               __CFG_WDTEN$OFF 000000                                         i2l2535 11A8  
                                       i2l2529 1282                                         i2l2539 11C0  
                             ADC_run@adc_count 003D                                         _RCREG1 000FAE  
                                       _RCREG2 000F74                                         _RCSTA1 000FAB  
                                       _RCSTA2 000F71                                         _OSCCON 000FD3  
                             ADC_run@adc_value 00F4                                         _SPBRG1 000FAF  
                                       _SPBRG2 000F75                                         _TXREG1 000FAD  
                                       _TXREG2 000F73                                         _TXSTA1 000FAC  
                                       _TXSTA2 000F72                                 __CFG_XINST$OFF 000000  
                                 _ADC_run$1500 00EE                                   _ADC_run$1496 00EC  
                                       ___lmul 0F76                                _string_tx_uart2 10AE  
                               __CFG_STVREN$ON 000000                                         _crcGen 0F18  
                                    ??___lldiv 0014                                      ??___lwmod 0010  
                             ?_TMR0_Initialize 0001                                         clear_0 11DC  
                                       clear_1 11E8                                         clear_2 11F4  
                             __end_of_uart_run 08B4                                   __mediumconst 1D4E  
                                       tblptrh 000FF7                                         tblptrl 000FF6  
                                       tblptru 000FF8                           _EUSART2_Transmit_ISR 1236  
                        __end_of_TMR0_CallBack 12D2                                ??_EUSART2_Write 000C  
     TMR0_SetInterruptHandler@InterruptHandler 000C                                _eusart1RxBuffer 01CC  
                             uint_tx_uart2@len 0011                  __size_of_INTERRUPT_Initialize 0010  
                              _eusart1TxBuffer 0140                                _eusart2RxBuffer 00E4  
             ??_INTERRUPT_InterruptManagerHigh 0001                ?_INTERRUPT_InterruptManagerHigh 0001  
                            _SYSTEM_Initialize 12D2                                _eusart2TxBuffer 0100  
                                   __accesstop 0060                        __end_of__initialization 11FA  
                                 u32_sqrt@root 002F                             ?_SYSTEM_Initialize 0001  
                              ??_uint_tx_uart2 0012                                  ___rparam_used 000001  
                 __size_of_ADC_StartConversion 0004                                 __pcstackCOMRAM 0001  
                          ??_SYSTEM_Initialize 0010                                      ?_TMR0_ISR 0001  
               ?_EUSART2_SetTxInterruptHandler 000C                         ??_EUSART1_Transmit_ISR 0001  
                      _ADC_GetConversionResult 1320                          ?_EUSART2_Transmit_ISR 0001  
                  __end_of_EUSART1_Receive_ISR 11D6                      __end_of_SYSTEM_Initialize 12F0  
                                _eusart1RxHead 004A                                  _eusart1TxHead 004C  
                                _eusart2RxHead 0045                                  _eusart1RxTail 0049  
                                _eusart2TxHead 0047                                     __pbssBANK0 0060  
                                   __pbssBANK1 0100                                  _eusart1TxTail 004B  
                                _eusart2RxTail 0044              _EUSART1_TxDefaultInterruptHandler 00FA  
                                _eusart2TxTail 0046                ??_EUSART1_SetRxInterruptHandler 000E  
                              __CFG_PLLCFG$OFF 000000                                      ?_u32_sqrt 0019  
                                   __pnvCOMRAM 004D                        __end_of_string_tx_uart2 10F2  
                           __CFG_CCP2MX$PORTC1 000000               __end_of_TMR0_SetInterruptHandler 1384  
                                      ?___lmul 000C                                     ??_TMR0_ISR 0001  
                                      ?_crcGen 000C                             __CFG_CCP3MX$PORTB5 000000  
                                      _ADC_ISR 13BA                                  crcGen@dataLen 000E  
                               ___lmul@product 0014                                        _ADC_run 08B4  
                      __size_of_ADC_Initialize 0018                                  crcGen@memPtr1 0012  
                           __size_of_timer_8ms 0006                                        _OSCCON2 000FD2  
                  __end_of_EUSART2_Receive_ISR 12B2                                        _OSCTUNE 000F9B  
                                      _SPBRGH1 000FB0                                        _SPBRGH2 000F76  
                                      i2u84_48 12BE                                   _CRC_HI_TABLE 1E4F  
                                   ??_u32_sqrt 001D                                   _CRC_LO_TABLE 1D4F  
                              __CFG_PWRTEN$OFF 000000                                        __Hparam 0000  
                                      __Lparam 0000                                      ?_uart_run 0001  
                              __size_of___lmul 0056                                        ___lldiv 0E30  
                              __size_of_crcGen 005E                                        ___lwmod 10F2  
                          _EUSART1_is_rx_ready 13B2                      ??_ADC_GetConversionResult 000E  
                   __end_of_EUSART1_is_tx_done 136E                                        __pcinit 11D6  
                                      __ramtop 0200                                        __ptext0 0BD4  
                                      __ptext1 009E                                        __ptext2 0A84  
                                      __ptext3 0F18                                        __ptext4 12D2  
                                      __ptext5 1134                                        __ptext6 137A  
                                      __ptext7 1208                                        __ptext8 1354  
                                      __ptext9 1334                               ??_check_register 0012  
                                    _T0CONbits 000FD5                          _OSCILLATOR_Initialize 1354  
                       ??_EUSART2_Transmit_ISR 0005                             _EUSART1_Initialize 1064  
                     ??_PIN_MANAGER_Initialize 000C                     __size_of_SYSTEM_Initialize 001E  
                               __pintcode_body 0EB2                           end_of_initialization 11FA  
                         ?_EUSART1_is_rx_ready 0001                            ?_EUSART1_Initialize 0001  
                                __Lmediumconst 1D4E                                        int_func 0EB2  
                             ?_string_tx_uart2 000D                              __end_of_timer_8ms 13B2  
                              ___lldiv@divisor 0010          __end_of_EUSART1_SetRxInterruptHandler 13AC  
       __size_of_EUSART1_SetRxInterruptHandler 000A                  _EUSART1_SetRxInterruptHandler 13A2  
                 __end_of_ADC_IsConversionDone 137A                                ___lldiv@counter 0018  
                           _EUSART2_Initialize 0FCC                                     ??_uart_run 001B  
                                      postdec1 000FE5                                        postdec2 000FDD  
                                      postinc0 000FEE                                        postinc1 000FE6  
                                      postinc2 000FDE                           ??_EUSART1_Initialize 000E  
                          ?_EUSART2_Initialize 0001                       _TMR0_SetInterruptHandler 137A  
                                  uart_run@crc 01F2                                    uart_run@len 01F6  
                          _ADC_StartConversion 13B6                                  u32_sqrt@pisor 0025  
                        ??_EUSART1_is_rx_ready 000C                           ??_EUSART2_Initialize 000E  
                                    u32_sqrt@a 0019                                      u32_sqrt@i 0029  
                         ?_ADC_StartConversion 0001                   __end_of_INTERRUPT_Initialize 1344  
                               __end_of___lmul 0FCC                                 __end_of_crcGen 0F76  
                            __size_of_TMR0_ISR 0010                                 _ADC_Initialize 12F0  
                       ?_OSCILLATOR_Initialize 0001                            start_initialization 11D6  
                     __size_of_TMR0_Initialize 0036                __size_of_PIN_MANAGER_Initialize 002E  
EUSART2_SetRxInterruptHandler@interruptHandler 000C  EUSART2_SetTxInterruptHandler@interruptHandler 000C  
EUSART1_SetRxInterruptHandler@interruptHandler 000C  EUSART1_SetTxInterruptHandler@interruptHandler 000C  
                        __end_of_EUSART2_Write 11A0                              __size_of_u32_sqrt 0114  
                        __end_of_uint_tx_uart2 0BD4                          ??_ADC_StartConversion 000C  
                                     ??___lmul 0014                                       ??_crcGen 000F  
                       __size_of_TMR0_CallBack 0020                 ?_EUSART1_SetRxInterruptHandler 000C  
                       __end_of_ADC_Initialize 1308                                       ?_ADC_ISR 0001  
                                     ?_ADC_run 0001                                 _eusart1RxCount 0048  
                               _eusart2RxCount 0043                                    __pbssCOMRAM 0033  
            _EUSART1_RxDefaultInterruptHandler 00F8                  __size_of_EUSART1_Transmit_ISR 002A  
                                __pcstackBANK0 00EC                                  __pcstackBANK1 01F0  
                         _ADC_IsConversionDone 136E                            EUSART2_Write@txData 000C  
              ??_EUSART1_SetTxInterruptHandler 000E                ??_EUSART2_SetRxInterruptHandler 000E  
                 __size_of_EUSART1_Receive_ISR 0036                          _TMR0_InterruptHandler 004F  
                                    __pnvBANK0 00F8                         _PIN_MANAGER_Initialize 1208  
                                    __pintcode 0008                              _ADC_SelectChannel 1308  
                                __pmediumconst 1D4E                                       ?___lldiv 000C  
                                 crcGen@crcReg 0041                                       ?___lwmod 000C  
                              ?_ADC_Initialize 0001                             ?_ADC_SelectChannel 0001  
            _EUSART2_TxDefaultInterruptHandler 00FE                              __size_of_uart_run 0816  
                                  __pintcodelo 0018                               __CFG_PRICLKEN$ON 000000  
                                     _BAUDCON1 000FB8                                       _BAUDCON2 000F70  
                          ??_ADC_SelectChannel 000C                          ?_ADC_IsConversionDone 0001  
                          crcGen@commandBuffer 000C                                  _TMR0_CallBack 12B2  
                           _EUSART1_is_tx_done 1362                           _INTERRUPT_Initialize 1334  
                            ??_TMR0_Initialize 000E                   __size_of_EUSART2_Receive_ISR 0028  
                                     _LATAbits 000F89                                       _LATCbits 000F8B  
                          ?_EUSART1_is_tx_done 0001                                       _IPR1bits 000F9F  
                                     _PIE1bits 000F9D                                       _IPR3bits 000FA5  
                                     _PIE3bits 000FA3                                       i1u142_28 004C  
                                     i1u145_28 0064                                       i1u145_29 007A  
                    __end_of_ADC_SelectChannel 1320                                       i2u132_48 0ECC  
                                     i2u135_48 0EE4                     ??_TMR0_SetInterruptHandler 000E  
                                     _PIR1bits 000F9E                                       _PIR3bits 000FA4  
                                     _RCONbits 000FD0                               __CFG_WDTPS$32768 000000  
                                    _timer_8ms 13AC                                       _TMR0_ISR 1344  
                             __size_of_ADC_ISR 0004                                     _ADCON0bits 000FC2  
                             __size_of_ADC_run 01D0                           ??_EUSART1_is_tx_done 000C  
                     ADC_SelectChannel@channel 000D                                      main@state 00F6  
                __size_of_EUSART2_Transmit_ISR 002A                                 ?_TMR0_CallBack 0001  
                            ___lmul@multiplier 000C                                    _INTCON2bits 000FF1  
                        ?_INTERRUPT_Initialize 0001                                       _u32_sqrt 0D1C  
                                  ADC_run@Vnow 00F0                                    ADC_run@Vrms 0037  
        __end_of_EUSART1_SetTxInterruptHandler 13A2         __size_of_EUSART1_SetTxInterruptHandler 000A  
                _EUSART1_SetTxInterruptHandler 1398                                       __Hrparam 0000  
        __end_of_EUSART2_SetRxInterruptHandler 1398         __size_of_EUSART2_SetRxInterruptHandler 000A  
                _EUSART2_SetRxInterruptHandler 138E                                       __Lrparam 0000  
                     ?_ADC_GetConversionResult 000C                             __CFG_BOREN$SBORDIS 000000  
                            __CFG_P2BMX$PORTB5 000000                                     ?_timer_8ms 0001  
                      ??_OSCILLATOR_Initialize 000C                       __size_of_string_tx_uart2 0044  
                               uint_tx_uart2@i 001A                               __size_of___lldiv 0082  
                  __size_of_EUSART1_Initialize 004A                               __size_of___lwmod 0042  
                       ??_ADC_IsConversionDone 000C                    __end_of_EUSART1_is_rx_ready 13B6  
              ??_INTERRUPT_InterruptManagerLow 0005                                       __ptext10 0FCC  
                                     __ptext11 1384                                       __ptext20 0D1C  
                                     __ptext12 138E                                       __ptext21 1018  
                                     __ptext13 1064                                       __ptext30 1308  
                                     __ptext22 10AE                                       __ptext14 1398  
                                     __ptext23 116A                                       __ptext15 13A2  
                                     __ptext40 1260                                       __ptext32 1236  
                                     __ptext24 10F2                                       __ptext16 12F0  
                                     __ptext41 11A0                                       __ptext33 128A  
                                     __ptext25 0F76                                       __ptext17 1362  
                                     __ptext42 0000                                       __ptext34 13BA  
                                     __ptext26 0E30                                       __ptext18 13B2  
                                     __ptext27 13B6                                       __ptext19 08B4  
                                     __ptext36 1344                                       __ptext28 136E  
                                     __ptext37 12B2                                       __ptext29 1320  
                                     __ptext38 13BE                                       __ptext39 13AC  
                                  crcGen@index 0014                        __size_of_check_register 004C  
                          string_tx_uart2@text 000D                    __size_of_EUSART2_Initialize 004C  
                                __size_of_main 0148           __end_of_TMR0_DefaultInterruptHandler 13C0  
        __size_of_TMR0_DefaultInterruptHandler 0002                   _TMR0_DefaultInterruptHandler 13BE  
                   __size_of_ADC_SelectChannel 0018                                       _uart_run 009E  
                                    uart_run@i 01FA                                       int$flags 0053  
                          _EUSART1_Receive_ISR 11A0                                     _INTCONbits 000FF2  
                              ??_TMR0_CallBack 0001                         ??_INTERRUPT_Initialize 000C  
                                     intlevel1 0000                                       intlevel2 0000  
                         ?_EUSART1_Receive_ISR 0001                    __end_of_ADC_StartConversion 13BA  
                             ___lwmod@dividend 000C                               ___lldiv@dividend 000C  
                      ?_PIN_MANAGER_Initialize 0001                __end_of_ADC_GetConversionResult 1334  
                                   _RCSTA1bits 000FAB                                     _RCSTA2bits 000F71  
                 __end_of_EUSART1_Transmit_ISR 128A                               ??_ADC_Initialize 000C  
                ?_TMR0_DefaultInterruptHandler 0001                                    ??_timer_8ms 0001  
               ?_EUSART1_SetTxInterruptHandler 000C                 ?_EUSART2_SetRxInterruptHandler 000C  
                       __size_of_EUSART2_Write 0036                            _EUSART2_Receive_ISR 128A  
       __end_of_INTERRUPT_InterruptManagerHigh 0F18        __size_of_INTERRUPT_InterruptManagerHigh 0F10  
               _INTERRUPT_InterruptManagerHigh 0008                               ___lldiv@quotient 0014  
                              ___lwmod@divisor 000E                              ??_string_tx_uart2 000F  
                              _TMR0_Initialize 1134                                ___lwmod@counter 0010  
                          uint_tx_uart2@number 000D                              __CFG_T3CMX$PORTC0 000000  
                       __size_of_uint_tx_uart2 0150          __end_of_INTERRUPT_InterruptManagerLow 009A  
       __size_of_INTERRUPT_InterruptManagerLow 0082                  _INTERRUPT_InterruptManagerLow 0018  
                        ??_EUSART1_Receive_ISR 0001                 __end_of_PIN_MANAGER_Initialize 1236  
                             string_tx_uart2@i 0011                ??_EUSART2_SetTxInterruptHandler 000E  
                         ?_EUSART2_Receive_ISR 0001                                   uart_run@addr 01F4  
                                 uart_run@data 01F0                              __CFG_FOSC$INTIO67 000000  
                                 uart_run@recv 01F8                                   uart_run@tran 01FC  
            _EUSART2_RxDefaultInterruptHandler 00FC  
