

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Wed Apr 22 17:17:41 2020

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og9 
     1                           	processor	18F23K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    18                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    19                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    20  0000                     
    21                           ; Version 2.05
    22                           ; Generated 20/12/2018 GMT
    23                           ; 
    24                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    25                           ; All rights reserved.
    26                           ; 
    27                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    28                           ; 
    29                           ; Redistribution and use in source and binary forms, with or without modification, are
    30                           ; permitted provided that the following conditions are met:
    31                           ; 
    32                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    33                           ;        conditions and the following disclaimer.
    34                           ; 
    35                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    36                           ;        of conditions and the following disclaimer in the documentation and/or other
    37                           ;        materials provided with the distribution.
    38                           ; 
    39                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    40                           ;        software without specific prior written permission.
    41                           ; 
    42                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    43                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    44                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    45                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    46                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    47                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    48                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    49                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    50                           ; 
    51                           ; 
    52                           ; Code-generator required, PIC18F23K22 Definitions
    53                           ; 
    54                           ; SFR Addresses
    55  0000                     
    56                           	psect	nvCOMRAM
    57  00000D                     __pnvCOMRAM:
    58                           	opt callstack 0
    59  00000D                     _timer0ReloadVal:
    60                           	opt callstack 0
    61  00000D                     	ds	1
    62  0000                     _ANSELA	set	3896
    63  0000                     _ANSELB	set	3897
    64  0000                     _ANSELC	set	3898
    65  0000                     _INTCON2bits	set	4081
    66  0000                     _WPUB	set	3937
    67  0000                     _TRISC	set	3988
    68  0000                     _TRISB	set	3987
    69  0000                     _TRISA	set	3986
    70  0000                     _LATC	set	3979
    71  0000                     _LATB	set	3978
    72  0000                     _LATA	set	3977
    73  0000                     _OSCTUNE	set	3995
    74  0000                     _OSCCON2	set	4050
    75  0000                     _OSCCON	set	4051
    76  0000                     _RCONbits	set	4048
    77  0000                     _LATAbits	set	3977
    78  0000                     _T0CON	set	4053
    79  0000                     _INTCONbits	set	4082
    80  0000                     _TMR0L	set	4054
    81  0000                     _TMR0H	set	4055
    82                           
    83                           ; #config settings
    84  0000                     
    85                           	psect	cinit
    86  00009C                     __pcinit:
    87                           	opt callstack 0
    88  00009C                     start_initialization:
    89                           	opt callstack 0
    90  00009C                     __initialization:
    91                           	opt callstack 0
    92                           
    93                           ; Clear objects allocated to COMRAM (4 bytes)
    94  00009C  6A0C               	clrf	(__pbssCOMRAM+3)& (0+255),c
    95  00009E  6A0B               	clrf	(__pbssCOMRAM+2)& (0+255),c
    96  0000A0  6A0A               	clrf	(__pbssCOMRAM+1)& (0+255),c
    97  0000A2  6A09               	clrf	__pbssCOMRAM& (0+255),c
    98  0000A4                     end_of_initialization:
    99                           	opt callstack 0
   100  0000A4                     __end_of__initialization:
   101                           	opt callstack 0
   102  0000A4  900E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   103  0000A6  920E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   104  0000A8  0E00               	movlw	low (__Lmediumconst shr (0+16))
   105  0000AA  6EF8               	movwf	tblptru,c
   106  0000AC  0100               	movlb	0
   107  0000AE  EF0E  F000         	goto	_main	;jump to C main() function
   108                           
   109                           	psect	bssCOMRAM
   110  000009                     __pbssCOMRAM:
   111                           	opt callstack 0
   112  000009                     _timecount:
   113                           	opt callstack 0
   114  000009                     	ds	2
   115  00000B                     _TMR0_InterruptHandler:
   116                           	opt callstack 0
   117  00000B                     	ds	2
   118                           
   119                           	psect	cstackCOMRAM
   120  000001                     __pcstackCOMRAM:
   121                           	opt callstack 0
   122  000001                     ??_TMR0_ISR:
   123  000001                     
   124                           ; 1 bytes @ 0x0
   125  000001                     	ds	2
   126  000003                     TMR0_ISR@oldtimecount:
   127                           	opt callstack 0
   128                           
   129                           ; 2 bytes @ 0x2
   130  000003                     	ds	2
   131  000005                     ??_main:
   132                           
   133                           ; 1 bytes @ 0x4
   134  000005                     	ds	2
   135  000007                     main@oldtimecount:
   136                           	opt callstack 0
   137                           
   138                           ; 2 bytes @ 0x6
   139  000007                     	ds	2
   140                           
   141 ;;
   142 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   143 ;;
   144 ;; *************** function _main *****************
   145 ;; Defined at:
   146 ;;		line 48 in file "main.c"
   147 ;; Parameters:    Size  Location     Type
   148 ;;		None
   149 ;; Auto vars:     Size  Location     Type
   150 ;;  oldtimecount    2    6[COMRAM] int 
   151 ;; Return value:  Size  Location     Type
   152 ;;                  1    wreg      void 
   153 ;; Registers used:
   154 ;;		wreg, status,2, status,0, cstack
   155 ;; Tracked objects:
   156 ;;		On entry : 0/0
   157 ;;		On exit  : 0/0
   158 ;;		Unchanged: 0/0
   159 ;; Data sizes:     COMRAM   BANK0   BANK1
   160 ;;      Params:         0       0       0
   161 ;;      Locals:         2       0       0
   162 ;;      Temps:          2       0       0
   163 ;;      Totals:         4       0       0
   164 ;;Total ram usage:        4 bytes
   165 ;; Hardware stack levels required when called:    4
   166 ;; This function calls:
   167 ;;		_SYSTEM_Initialize
   168 ;; This function is called by:
   169 ;;		Startup code after reset
   170 ;; This function uses a non-reentrant model
   171 ;;
   172                           
   173                           	psect	text0
   174  00001C                     __ptext0:
   175                           	opt callstack 0
   176  00001C                     _main:
   177                           	opt callstack 27
   178                           
   179                           ;main.c: 51: SYSTEM_Initialize();
   180                           
   181                           ;incstack = 0
   182  00001C  EC64  F000         	call	_SYSTEM_Initialize	;wreg free
   183                           
   184                           ; BSR set to: 15
   185                           ;main.c: 58: (INTCONbits.GIE = 1);
   186  000020  8EF2               	bsf	4082,7,c	;volatile
   187  000022                     l897:
   188                           
   189                           ;main.c: 68: int oldtimecount;;main.c: 69: extern int timecount;;main.c: 70: oldtimecoun
      +                          t=timecount;
   190  000022  C009  F007         	movff	_timecount,main@oldtimecount
   191  000026  C00A  F008         	movff	_timecount+1,main@oldtimecount+1
   192  00002A                     l899:
   193                           
   194                           ;main.c: 73: {;main.c: 74: if(((timecount-oldtimecount)>=10))
   195  00002A  5007               	movf	main@oldtimecount,w,c
   196  00002C  5C09               	subwf	_timecount,w,c
   197  00002E  6E05               	movwf	??_main& (0+255),c
   198  000030  5008               	movf	main@oldtimecount+1,w,c
   199  000032  580A               	subwfb	_timecount+1,w,c
   200  000034  6E06               	movwf	(??_main+1)& (0+255),c
   201  000036  BE06               	btfsc	??_main+1,7,c
   202  000038  D7F8               	goto	l899
   203  00003A  5006               	movf	??_main+1,w,c
   204  00003C  E104               	bnz	u40
   205  00003E  0E0A               	movlw	10
   206  000040  5C05               	subwf	??_main,w,c
   207  000042  A0D8               	btfss	status,0,c
   208  000044  D7F2               	goto	l899
   209  000046                     u40:
   210                           
   211                           ;main.c: 75: {;main.c: 76: LATAbits.LATA1^=1;
   212  000046  7289               	btg	3977,1,c	;volatile
   213  000048  D7EC               	goto	l897
   214  00004A                     __end_of_main:
   215                           	opt callstack 0
   216                           
   217 ;; *************** function _SYSTEM_Initialize *****************
   218 ;; Defined at:
   219 ;;		line 51 in file "mcc_generated_files/mcc.c"
   220 ;; Parameters:    Size  Location     Type
   221 ;;		None
   222 ;; Auto vars:     Size  Location     Type
   223 ;;		None
   224 ;; Return value:  Size  Location     Type
   225 ;;                  1    wreg      void 
   226 ;; Registers used:
   227 ;;		wreg, status,2, cstack
   228 ;; Tracked objects:
   229 ;;		On entry : 0/0
   230 ;;		On exit  : 3F/F
   231 ;;		Unchanged: 0/0
   232 ;; Data sizes:     COMRAM   BANK0   BANK1
   233 ;;      Params:         0       0       0
   234 ;;      Locals:         0       0       0
   235 ;;      Temps:          0       0       0
   236 ;;      Totals:         0       0       0
   237 ;;Total ram usage:        0 bytes
   238 ;; Hardware stack levels used:    1
   239 ;; Hardware stack levels required when called:    3
   240 ;; This function calls:
   241 ;;		_INTERRUPT_Initialize
   242 ;;		_OSCILLATOR_Initialize
   243 ;;		_PIN_MANAGER_Initialize
   244 ;;		_TMR0_Initialize
   245 ;; This function is called by:
   246 ;;		_main
   247 ;; This function uses a non-reentrant model
   248 ;;
   249                           
   250                           	psect	text1
   251  0000C8                     __ptext1:
   252                           	opt callstack 0
   253  0000C8                     _SYSTEM_Initialize:
   254                           	opt callstack 27
   255                           
   256                           ;mcc.c: 54: INTERRUPT_Initialize();
   257                           
   258                           ;incstack = 0
   259  0000C8  EC74  F000         	call	_INTERRUPT_Initialize	;wreg free
   260                           
   261                           ;mcc.c: 55: PIN_MANAGER_Initialize();
   262  0000CC  EC25  F000         	call	_PIN_MANAGER_Initialize	;wreg free
   263                           
   264                           ; BSR set to: 15
   265                           ;mcc.c: 56: OSCILLATOR_Initialize();
   266  0000D0  EC6D  F000         	call	_OSCILLATOR_Initialize	;wreg free
   267                           
   268                           ; BSR set to: 15
   269                           ;mcc.c: 57: TMR0_Initialize();
   270  0000D4  EC59  F000         	call	_TMR0_Initialize	;wreg free
   271                           
   272                           ; BSR set to: 15
   273  0000D8  0012               	return		;funcret
   274  0000DA                     __end_of_SYSTEM_Initialize:
   275                           	opt callstack 0
   276                           
   277 ;; *************** function _TMR0_Initialize *****************
   278 ;; Defined at:
   279 ;;		line 68 in file "mcc_generated_files/tmr0.c"
   280 ;; Parameters:    Size  Location     Type
   281 ;;		None
   282 ;; Auto vars:     Size  Location     Type
   283 ;;		None
   284 ;; Return value:  Size  Location     Type
   285 ;;                  1    wreg      void 
   286 ;; Registers used:
   287 ;;		wreg, status,2
   288 ;; Tracked objects:
   289 ;;		On entry : 3F/F
   290 ;;		On exit  : 3F/F
   291 ;;		Unchanged: 3E/0
   292 ;; Data sizes:     COMRAM   BANK0   BANK1
   293 ;;      Params:         0       0       0
   294 ;;      Locals:         0       0       0
   295 ;;      Temps:          0       0       0
   296 ;;      Totals:         0       0       0
   297 ;;Total ram usage:        0 bytes
   298 ;; Hardware stack levels used:    1
   299 ;; Hardware stack levels required when called:    2
   300 ;; This function calls:
   301 ;;		Nothing
   302 ;; This function is called by:
   303 ;;		_SYSTEM_Initialize
   304 ;; This function uses a non-reentrant model
   305 ;;
   306                           
   307                           	psect	text2
   308  0000B2                     __ptext2:
   309                           	opt callstack 0
   310  0000B2                     _TMR0_Initialize:
   311                           	opt callstack 27
   312                           
   313                           ; BSR set to: 15
   314                           ;tmr0.c: 73: TMR0H = 0x00;
   315                           
   316                           ; BSR set to: 15
   317                           ;incstack = 0
   318  0000B2  0E00               	movlw	0
   319  0000B4  6ED7               	movwf	4055,c	;volatile
   320                           
   321                           ;tmr0.c: 76: TMR0L = 0x64;
   322  0000B6  0E64               	movlw	100
   323  0000B8  6ED6               	movwf	4054,c	;volatile
   324                           
   325                           ;tmr0.c: 80: timer0ReloadVal = 100;
   326  0000BA  0E64               	movlw	100
   327  0000BC  6E0D               	movwf	_timer0ReloadVal,c	;volatile
   328                           
   329                           ; BSR set to: 15
   330                           ;tmr0.c: 83: INTCONbits.TMR0IF = 0;
   331  0000BE  94F2               	bcf	4082,2,c	;volatile
   332                           
   333                           ; BSR set to: 15
   334                           ;tmr0.c: 86: INTCONbits.TMR0IE = 1;
   335  0000C0  8AF2               	bsf	4082,5,c	;volatile
   336                           
   337                           ;tmr0.c: 89: T0CON = 0xD3;
   338  0000C2  0ED3               	movlw	211
   339  0000C4  6ED5               	movwf	4053,c	;volatile
   340                           
   341                           ; BSR set to: 15
   342  0000C6  0012               	return		;funcret
   343  0000C8                     __end_of_TMR0_Initialize:
   344                           	opt callstack 0
   345                           
   346 ;; *************** function _PIN_MANAGER_Initialize *****************
   347 ;; Defined at:
   348 ;;		line 55 in file "mcc_generated_files/pin_manager.c"
   349 ;; Parameters:    Size  Location     Type
   350 ;;		None
   351 ;; Auto vars:     Size  Location     Type
   352 ;;		None
   353 ;; Return value:  Size  Location     Type
   354 ;;                  1    wreg      void 
   355 ;; Registers used:
   356 ;;		wreg, status,2
   357 ;; Tracked objects:
   358 ;;		On entry : 0/0
   359 ;;		On exit  : 3F/F
   360 ;;		Unchanged: 0/0
   361 ;; Data sizes:     COMRAM   BANK0   BANK1
   362 ;;      Params:         0       0       0
   363 ;;      Locals:         0       0       0
   364 ;;      Temps:          0       0       0
   365 ;;      Totals:         0       0       0
   366 ;;Total ram usage:        0 bytes
   367 ;; Hardware stack levels used:    1
   368 ;; Hardware stack levels required when called:    2
   369 ;; This function calls:
   370 ;;		Nothing
   371 ;; This function is called by:
   372 ;;		_SYSTEM_Initialize
   373 ;; This function uses a non-reentrant model
   374 ;;
   375                           
   376                           	psect	text3
   377  00004A                     __ptext3:
   378                           	opt callstack 0
   379  00004A                     _PIN_MANAGER_Initialize:
   380                           	opt callstack 27
   381                           
   382                           ;pin_manager.c: 60: LATA = 0x00;
   383                           
   384                           ; BSR set to: 15
   385                           ;incstack = 0
   386  00004A  0E00               	movlw	0
   387  00004C  6E89               	movwf	3977,c	;volatile
   388                           
   389                           ;pin_manager.c: 61: LATB = 0x00;
   390  00004E  0E00               	movlw	0
   391  000050  6E8A               	movwf	3978,c	;volatile
   392                           
   393                           ;pin_manager.c: 62: LATC = 0x00;
   394  000052  0E00               	movlw	0
   395  000054  6E8B               	movwf	3979,c	;volatile
   396                           
   397                           ;pin_manager.c: 67: TRISA = 0xB1;
   398  000056  0EB1               	movlw	177
   399  000058  6E92               	movwf	3986,c	;volatile
   400                           
   401                           ;pin_manager.c: 68: TRISB = 0xFF;
   402  00005A  6893               	setf	3987,c	;volatile
   403                           
   404                           ;pin_manager.c: 69: TRISC = 0xFF;
   405  00005C  6894               	setf	3988,c	;volatile
   406                           
   407                           ;pin_manager.c: 74: ANSELC = 0xFC;
   408  00005E  0EFC               	movlw	252
   409  000060  010F               	movlb	15	; () banked
   410  000062  6F3A               	movwf	58,b	;volatile
   411                           
   412                           ;pin_manager.c: 75: ANSELB = 0x3F;
   413  000064  0E3F               	movlw	63
   414  000066  6F39               	movwf	57,b	;volatile
   415                           
   416                           ;pin_manager.c: 76: ANSELA = 0x20;
   417  000068  0E20               	movlw	32
   418  00006A  6F38               	movwf	56,b	;volatile
   419                           
   420                           ;pin_manager.c: 81: WPUB = 0x00;
   421  00006C  0E00               	movlw	0
   422  00006E  6E61               	movwf	3937,c	;volatile
   423                           
   424                           ; BSR set to: 15
   425                           ;pin_manager.c: 82: INTCON2bits.nRBPU = 1;
   426  000070  8EF1               	bsf	4081,7,c	;volatile
   427                           
   428                           ; BSR set to: 15
   429  000072  0012               	return		;funcret
   430  000074                     __end_of_PIN_MANAGER_Initialize:
   431                           	opt callstack 0
   432                           
   433 ;; *************** function _OSCILLATOR_Initialize *****************
   434 ;; Defined at:
   435 ;;		line 60 in file "mcc_generated_files/mcc.c"
   436 ;; Parameters:    Size  Location     Type
   437 ;;		None
   438 ;; Auto vars:     Size  Location     Type
   439 ;;		None
   440 ;; Return value:  Size  Location     Type
   441 ;;                  1    wreg      void 
   442 ;; Registers used:
   443 ;;		wreg, status,2
   444 ;; Tracked objects:
   445 ;;		On entry : 3F/F
   446 ;;		On exit  : 3F/F
   447 ;;		Unchanged: 3E/0
   448 ;; Data sizes:     COMRAM   BANK0   BANK1
   449 ;;      Params:         0       0       0
   450 ;;      Locals:         0       0       0
   451 ;;      Temps:          0       0       0
   452 ;;      Totals:         0       0       0
   453 ;;Total ram usage:        0 bytes
   454 ;; Hardware stack levels used:    1
   455 ;; Hardware stack levels required when called:    2
   456 ;; This function calls:
   457 ;;		Nothing
   458 ;; This function is called by:
   459 ;;		_SYSTEM_Initialize
   460 ;; This function uses a non-reentrant model
   461 ;;
   462                           
   463                           	psect	text4
   464  0000DA                     __ptext4:
   465                           	opt callstack 0
   466  0000DA                     _OSCILLATOR_Initialize:
   467                           	opt callstack 27
   468                           
   469                           ; BSR set to: 15
   470                           ;mcc.c: 63: OSCCON = 0x30;
   471                           
   472                           ; BSR set to: 15
   473                           ;incstack = 0
   474  0000DA  0E30               	movlw	48
   475  0000DC  6ED3               	movwf	4051,c	;volatile
   476                           
   477                           ;mcc.c: 65: OSCCON2 = 0x14;
   478  0000DE  0E14               	movlw	20
   479  0000E0  6ED2               	movwf	4050,c	;volatile
   480                           
   481                           ;mcc.c: 67: OSCTUNE = 0x00;
   482  0000E2  0E00               	movlw	0
   483  0000E4  6E9B               	movwf	3995,c	;volatile
   484                           
   485                           ; BSR set to: 15
   486  0000E6  0012               	return		;funcret
   487  0000E8                     __end_of_OSCILLATOR_Initialize:
   488                           	opt callstack 0
   489                           
   490 ;; *************** function _INTERRUPT_Initialize *****************
   491 ;; Defined at:
   492 ;;		line 53 in file "mcc_generated_files/interrupt_manager.c"
   493 ;; Parameters:    Size  Location     Type
   494 ;;		None
   495 ;; Auto vars:     Size  Location     Type
   496 ;;		None
   497 ;; Return value:  Size  Location     Type
   498 ;;                  1    wreg      void 
   499 ;; Registers used:
   500 ;;		None
   501 ;; Tracked objects:
   502 ;;		On entry : 0/0
   503 ;;		On exit  : 0/0
   504 ;;		Unchanged: 0/0
   505 ;; Data sizes:     COMRAM   BANK0   BANK1
   506 ;;      Params:         0       0       0
   507 ;;      Locals:         0       0       0
   508 ;;      Temps:          0       0       0
   509 ;;      Totals:         0       0       0
   510 ;;Total ram usage:        0 bytes
   511 ;; Hardware stack levels used:    1
   512 ;; Hardware stack levels required when called:    2
   513 ;; This function calls:
   514 ;;		Nothing
   515 ;; This function is called by:
   516 ;;		_SYSTEM_Initialize
   517 ;; This function uses a non-reentrant model
   518 ;;
   519                           
   520                           	psect	text5
   521  0000E8                     __ptext5:
   522                           	opt callstack 0
   523  0000E8                     _INTERRUPT_Initialize:
   524                           	opt callstack 27
   525                           
   526                           ;interrupt_manager.c: 56: RCONbits.IPEN = 0;
   527                           
   528                           ; BSR set to: 15
   529                           ;incstack = 0
   530  0000E8  9ED0               	bcf	4048,7,c	;volatile
   531  0000EA  0012               	return		;funcret
   532  0000EC                     __end_of_INTERRUPT_Initialize:
   533                           	opt callstack 0
   534                           
   535 ;; *************** function _INTERRUPT_InterruptManager *****************
   536 ;; Defined at:
   537 ;;		line 59 in file "mcc_generated_files/interrupt_manager.c"
   538 ;; Parameters:    Size  Location     Type
   539 ;;		None
   540 ;; Auto vars:     Size  Location     Type
   541 ;;		None
   542 ;; Return value:  Size  Location     Type
   543 ;;                  1    wreg      void 
   544 ;; Registers used:
   545 ;;		wreg, status,2, status,0, cstack
   546 ;; Tracked objects:
   547 ;;		On entry : 0/0
   548 ;;		On exit  : 0/0
   549 ;;		Unchanged: 0/0
   550 ;; Data sizes:     COMRAM   BANK0   BANK1
   551 ;;      Params:         0       0       0
   552 ;;      Locals:         0       0       0
   553 ;;      Temps:          0       0       0
   554 ;;      Totals:         0       0       0
   555 ;;Total ram usage:        0 bytes
   556 ;; Hardware stack levels used:    1
   557 ;; Hardware stack levels required when called:    1
   558 ;; This function calls:
   559 ;;		_TMR0_ISR
   560 ;; This function is called by:
   561 ;;		Interrupt level 2
   562 ;; This function uses a non-reentrant model
   563 ;;
   564                           
   565                           	psect	intcode
   566  000008                     __pintcode:
   567                           	opt callstack 0
   568  000008                     _INTERRUPT_InterruptManager:
   569                           	opt callstack 27
   570                           
   571                           ;incstack = 0
   572  000008  820E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
   573                           
   574                           ;interrupt_manager.c: 62: if(INTCONbits.TMR0IE == 1 && INTCONbits.TMR0IF == 1)
   575  00000A  BAF2               	btfsc	4082,5,c	;volatile
   576  00000C  A4F2               	btfss	4082,2,c	;volatile
   577  00000E  D002               	goto	i2l39
   578                           
   579                           ;interrupt_manager.c: 63: {;interrupt_manager.c: 64: TMR0_ISR();
   580  000010  EC3A  F000         	call	_TMR0_ISR	;wreg free
   581  000014                     i2l39:
   582  000014  920E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
   583  000016  0011               	retfie		f
   584  000018                     __end_of_INTERRUPT_InterruptManager:
   585                           	opt callstack 0
   586                           
   587 ;; *************** function _TMR0_ISR *****************
   588 ;; Defined at:
   589 ;;		line 97 in file "mcc_generated_files/tmr0.c"
   590 ;; Parameters:    Size  Location     Type
   591 ;;		None
   592 ;; Auto vars:     Size  Location     Type
   593 ;;  oldtimecount    2    2[COMRAM] int 
   594 ;; Return value:  Size  Location     Type
   595 ;;                  1    wreg      void 
   596 ;; Registers used:
   597 ;;		wreg, status,2, status,0
   598 ;; Tracked objects:
   599 ;;		On entry : 0/0
   600 ;;		On exit  : 0/0
   601 ;;		Unchanged: 0/0
   602 ;; Data sizes:     COMRAM   BANK0   BANK1
   603 ;;      Params:         0       0       0
   604 ;;      Locals:         2       0       0
   605 ;;      Temps:          2       0       0
   606 ;;      Totals:         4       0       0
   607 ;;Total ram usage:        4 bytes
   608 ;; Hardware stack levels used:    1
   609 ;; This function calls:
   610 ;;		Nothing
   611 ;; This function is called by:
   612 ;;		_INTERRUPT_InterruptManager
   613 ;; This function uses a non-reentrant model
   614 ;;
   615                           
   616                           	psect	text7
   617  000074                     __ptext7:
   618                           	opt callstack 0
   619  000074                     _TMR0_ISR:
   620                           	opt callstack 27
   621                           
   622                           ;tmr0.c: 99: int oldtimecount;;tmr0.c: 100: if(((timecount-oldtimecount)>=1000))
   623                           
   624                           ;incstack = 0
   625  000074  5003               	movf	TMR0_ISR@oldtimecount,w,c
   626  000076  5C09               	subwf	_timecount,w,c
   627  000078  6E01               	movwf	??_TMR0_ISR& (0+255),c
   628  00007A  5004               	movf	TMR0_ISR@oldtimecount+1,w,c
   629  00007C  580A               	subwfb	_timecount+1,w,c
   630  00007E  6E02               	movwf	(??_TMR0_ISR+1)& (0+255),c
   631  000080  BE02               	btfsc	??_TMR0_ISR+1,7,c
   632  000082  D006               	goto	i2l871
   633  000084  0EE8               	movlw	232
   634  000086  5C01               	subwf	??_TMR0_ISR,w,c
   635  000088  0E03               	movlw	3
   636  00008A  5802               	subwfb	??_TMR0_ISR+1,w,c
   637  00008C  B0D8               	btfsc	status,0,c
   638                           
   639                           ;tmr0.c: 101: {;tmr0.c: 102: LATAbits.LATA2^=1;
   640  00008E  7489               	btg	3977,2,c	;volatile
   641  000090                     i2l871:
   642                           
   643                           ;tmr0.c: 105: };tmr0.c: 107: INTCONbits.TMR0IF = 0;
   644  000090  94F2               	bcf	4082,2,c	;volatile
   645                           
   646                           ;tmr0.c: 110: TMR0L = timer0ReloadVal;
   647  000092  C00D  FFD6         	movff	_timer0ReloadVal,4054	;volatile
   648                           
   649                           ;tmr0.c: 111: timecount++;
   650  000096  4A09               	infsnz	_timecount,f,c
   651  000098  2A0A               	incf	_timecount+1,f,c
   652  00009A  0012               	return		;funcret
   653  00009C                     __end_of_TMR0_ISR:
   654                           	opt callstack 0
   655  0000                     
   656                           	psect	rparam
   657  0000                     
   658                           	psect	temp
   659  00000E                     btemp:
   660                           	opt callstack 0
   661  00000E                     	ds	1
   662  0000                     int$flags	set	btemp
   663  0000                     wtemp8	set	btemp+1
   664  0000                     ttemp5	set	btemp+1
   665  0000                     ttemp6	set	btemp+4
   666  0000                     ttemp7	set	btemp+8
   667                           tosu	equ	0xFFF
   668                           tosh	equ	0xFFE
   669                           tosl	equ	0xFFD
   670                           stkptr	equ	0xFFC
   671                           pclatu	equ	0xFFB
   672                           pclath	equ	0xFFA
   673                           pcl	equ	0xFF9
   674                           tblptru	equ	0xFF8
   675                           tblptrh	equ	0xFF7
   676                           tblptrl	equ	0xFF6
   677                           tablat	equ	0xFF5
   678                           prodh	equ	0xFF4
   679                           prodl	equ	0xFF3
   680                           indf0	equ	0xFEF
   681                           postinc0	equ	0xFEE
   682                           postdec0	equ	0xFED
   683                           preinc0	equ	0xFEC
   684                           plusw0	equ	0xFEB
   685                           fsr0h	equ	0xFEA
   686                           fsr0l	equ	0xFE9
   687                           wreg	equ	0xFE8
   688                           indf1	equ	0xFE7
   689                           postinc1	equ	0xFE6
   690                           postdec1	equ	0xFE5
   691                           preinc1	equ	0xFE4
   692                           plusw1	equ	0xFE3
   693                           fsr1h	equ	0xFE2
   694                           fsr1l	equ	0xFE1
   695                           bsr	equ	0xFE0
   696                           indf2	equ	0xFDF
   697                           postinc2	equ	0xFDE
   698                           postdec2	equ	0xFDD
   699                           preinc2	equ	0xFDC
   700                           plusw2	equ	0xFDB
   701                           fsr2h	equ	0xFDA
   702                           fsr2l	equ	0xFD9
   703                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         4
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94      8      13
    BANK0           160      0       0
    BANK1           256      0       0

Pointer List with Targets:

    TMR0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _INTERRUPT_InterruptManager->_TMR0_ISR

Critical Paths under _main in BANK0

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0      15
                                              4 COMRAM     4     4      0
                  _SYSTEM_Initialize
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _INTERRUPT_InterruptManager                           0     0      0      15
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (4) _TMR0_ISR                                             4     4      0      15
                                              0 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SYSTEM_Initialize
     _INTERRUPT_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR0_Initialize

 _INTERRUPT_InterruptManager (ROOT)
   _TMR0_ISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1FF      0       0       8        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       5        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0      0       0       4        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E      8       D       1       13.8%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0       D       6        0.0%
DATA                 0      0       D       9        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Wed Apr 22 17:17:41 2020

                                 u40 0046                      _timer0ReloadVal 000D  
                       __CFG_CP0$OFF 000000                         __CFG_CP1$OFF 000000  
                        __CFG_LVP$ON 000000                                  l897 0022  
                                l899 002A                         __CFG_CPB$OFF 000000  
                       __CFG_CPD$OFF 000000                                 _LATA 000F89  
                               _LATB 000F8A                                 _LATC 000F8B  
                               i2l39 0014                                 _WPUB 000F61  
                               _main 001C                                 btemp 000E  
                      __CFG_BORV$190 000000                                 start 0018  
                      __CFG_IESO$OFF 000000                         ___param_bank 000000  
            __end_of_TMR0_Initialize 00C8       __size_of_OSCILLATOR_Initialize 000E  
      __end_of_OSCILLATOR_Initialize 00E8                                ?_main 0001  
                              _T0CON 000FD5                       __CFG_DEBUG$OFF 000000  
                              i2l871 0090                                _TMR0H 000FD7  
                              _TMR0L 000FD6                                _TRISA 000F92  
                              _TRISB 000F93                                _TRISC 000F94  
                      __CFG_WRT0$OFF 000000                        __CFG_WRT1$OFF 000000  
                     __CFG_EBTR0$OFF 000000                       __CFG_FCMEN$OFF 000000  
                     __CFG_EBTR1$OFF 000000                     __end_of_TMR0_ISR 009C  
                      __CFG_WRTB$OFF 000000                        __CFG_WRTC$OFF 000000  
                      __CFG_WRTD$OFF 000000                       __CFG_EBTRB$OFF 000000  
                 __CFG_MCLRE$EXTMCLR 000000                                ttemp5 000F  
                              ttemp6 0012                                ttemp7 0016  
                              status 000FD8                                wtemp8 000F  
                     __CFG_HFOFST$ON 000000                       __CFG_PBADEN$ON 000000  
                    __initialization 009C                         __end_of_main 004A  
        ?_INTERRUPT_InterruptManager 0001                               ??_main 0005  
                      __activetblptr 000002                               _ANSELA 000F38  
                             _ANSELB 000F39                               _ANSELC 000F3A  
                     __CFG_WDTEN$OFF 000000                               _OSCCON 000FD3  
                     __CFG_XINST$OFF 000000                       __CFG_STVREN$ON 000000  
                   ?_TMR0_Initialize 0001                               tblptru 000FF8  
      __size_of_INTERRUPT_Initialize 0004                    _SYSTEM_Initialize 00C8  
                         __accesstop 0060              __end_of__initialization 00A4  
                 ?_SYSTEM_Initialize 0001                        ___rparam_used 000001  
                     __pcstackCOMRAM 0001                  ??_SYSTEM_Initialize 0005  
                          ?_TMR0_ISR 0001            __end_of_SYSTEM_Initialize 00DA  
                    __CFG_PLLCFG$OFF 000000                           __pnvCOMRAM 000D  
                 __CFG_CCP2MX$PORTC1 000000                           ??_TMR0_ISR 0001  
                 __CFG_CCP3MX$PORTB5 000000                              _OSCCON2 000FD2  
                            _OSCTUNE 000F9B                      __CFG_PWRTEN$OFF 000000  
                            __Hparam 0000                              __Lparam 0000  
                            __pcinit 009C                              __ramtop 0200  
                            __ptext0 001C                              __ptext1 00C8  
                            __ptext2 00B2                              __ptext3 004A  
                            __ptext4 00DA                              __ptext5 00E8  
                            __ptext7 0074                _OSCILLATOR_Initialize 00DA  
           ??_PIN_MANAGER_Initialize 0005           __size_of_SYSTEM_Initialize 0012  
               end_of_initialization 00A4                        __Lmediumconst 0000  
               TMR0_ISR@oldtimecount 0003         __end_of_INTERRUPT_Initialize 00EC  
                  __size_of_TMR0_ISR 0028               ?_OSCILLATOR_Initialize 0001  
                start_initialization 009C             __size_of_TMR0_Initialize 0016  
    __size_of_PIN_MANAGER_Initialize 002A                          __pbssCOMRAM 0009  
              _TMR0_InterruptHandler 000B               _PIN_MANAGER_Initialize 004A  
                   main@oldtimecount 0007                            __pintcode 0008  
       ??_INTERRUPT_InterruptManager 0005                     __CFG_PRICLKEN$ON 000000  
               _INTERRUPT_Initialize 00E8                    ??_TMR0_Initialize 0005  
                           _LATAbits 000F89  __size_of_INTERRUPT_InterruptManager 0010  
                           _RCONbits 000FD0                     __CFG_WDTPS$32768 000000  
                           _TMR0_ISR 0074                            _timecount 0009  
                        _INTCON2bits 000FF1                ?_INTERRUPT_Initialize 0001  
                           __Hrparam 0000                             __Lrparam 0000  
                 __CFG_BOREN$SBORDIS 000000                    __CFG_P2BMX$PORTB5 000000  
            ??_OSCILLATOR_Initialize 0005                        __size_of_main 002E  
                           int$flags 000E   __end_of_INTERRUPT_InterruptManager 0018  
         _INTERRUPT_InterruptManager 0008                           _INTCONbits 000FF2  
             ??_INTERRUPT_Initialize 0005                             intlevel2 0000  
            ?_PIN_MANAGER_Initialize 0001                      _TMR0_Initialize 00B2  
                  __CFG_T3CMX$PORTC0 000000       __end_of_PIN_MANAGER_Initialize 0074  
                  __CFG_FOSC$INTIO67 000000  
